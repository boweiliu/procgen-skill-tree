{"version":3,"sources":["lib/util/fpsTracker.ts","components/DebugOverlayComponent.tsx","lib/util/epsilon_math.ts","lib/util/misc.ts","lib/util/geometry/vector2.ts","data/PointNodeRef.ts","data/WorldGenState.ts","data/GameState.ts","lib/util/data_structures/hash.ts","lib/util/geometry/vector3.ts","pixi/colors.ts","components/GameArea/GameAreaComponent.tsx","components/GameArea/GameAreaStateManager.tsx","components/KeyboardListenerComponent.tsx","contexts.ts","lib/pixi/pixify.ts","lib/util/batchify.ts","lib/util/updaterGenerator.ts","pixi/components/LifecycleHandler.ts","game/Neighbors.ts","game/ComputeState.ts","game/OnAllocation.ts","game/OnSelectOrReselectNode.ts","pixi/components/PointNodeComponent.ts","pixi/components/ChunkComponent.ts","lib/util/lazy.ts","pixi/components/FixedCameraStageComponent.ts","pixi/components/RootComponent.ts","pixi/textures/PointNodeTexture.ts","pixi/PixiReactBridge.ts","components/PixiWrapperComponent.tsx","components/WindowListenerComponent.tsx","game/lib/HexGrid.ts","game/WorldGenStateFactory.ts","game/GameStateFactory.ts","game/actions/AllocateNode.ts","App.tsx","serviceWorker.ts","index.tsx","lib/util/random.ts"],"names":["FpsTracker","frameTimestampsInTicks","frameTimestampsInTime","this","push","ticksSinceLastUpdate","lastFrameTime","length","logRowsToKeep","slice","Date","getTime","ticksDiff","framesPerTick","timeDiff","framesPerMilli","getFps","toFixed","getUps","DebugOverlayComponent","props","pixiFpsTracker","useRef","useEffect","current","tick","className","windowState","innerWidth","innerHeight","ReactFps","getFpsString","useState","counter","setCounter","reactFpsTracker","timer","setTimeout","it","clearTimeout","fpsString","useMemo","EPSILON","Util","list","fn","lowestT","lowestValue","item","value","obj","highestT","highestValue","low","high","Math","floor","random","array","key","sort","a","b","str","mapObj","re","RegExp","Object","keys","join","replace","matched","toLowerCase","func","timeoutId","waitMilliseconds","options","isImmediate","result","args","doLater","undefined","apply","shouldCallNow","d","monthName","getMonth","getDate","getHours","substr","getMinutes","getSeconds","arr","concat","string","intersperse","character","repeat","multiplyColor","color1","color2","reds","blues","greens","out","round","enumKeys","enm","Vector2","propsOrX","x","y","_x","_y","toString","p","abs","max","dx","dy","sqrt","newX","newY","about","amount","origin","angle","PI","cos","sin","other","__type","trans","scale","t","console","error","add","tx","ty","lerp","highX","highY","lowX","lowY","RandRange","hasOwnProperty","JSON","stringify","Zero","One","NodeType","ResourceNontrivialType","ResourceModifier","IntentName","PointNodeRef","z","chunkCoord","pointNodeCoord","pointNodeId","ChunkGenConstants","CHUNK_HALF_DIM","CHUNK_DIM","DROP_NODES_CHANCE","noIntent","reduce","object","appSizeFromWindowSize","window","min","Infinity","ResourceTypeAndModifier","type","modifier","HashSet","initialValues","_values","HashMap","put","remove","get","contains","values","n","clone","size","k","hash","KeyedHashMap","_kvalues","map","s","hashCode","pv","cv","h","i","imul","charCodeAt","Vector3","_z","pOrX","newZ","COLORS","backgroundBlue","nodePink","nodeLavender","nodeBlue","nodeAqua","gateTint","selectedTint","allocatedTint","nodeBorder","nullTint","tooltipBorderBlack","tooltipFillWhite","white","grayBlack","borderBlack","borderWhite","black","colorToCss","c","NodeAllocatedStatus","LockStatus","GameAreaComponent","React","memo","GameArea","jumpOffset","log","receivedJumpOffset","ref","container","scrollTo","scrollLeft","gridWidth","scrollTop","gridHeight","hexBlockStyle","width","height","hexHalfBlockStyle","hexCenterStyle","hexCenterRadius","hexCenterLockStyle","marginLeft","hexCenterLockBlockStyle","marginTop","backgroundColor","handleScroll","useCallback","e","direction","target","newScrollTop","newScrollLeft","virtualGridDims","appSize","onJump","previousContainer","lastTime","action","intent","activeIntent","PAN_EAST","addX","PAN_WEST","PAN_NORTH","addY","PAN_SOUTH","multiply","elapsed","interval","setInterval","clearInterval","newIntent","hidden","style","onScroll","onPointerOver","onClick","Array","fill","_","Row","rowIdx","nodeData","virtualGridStatusMap","Node","status","text","shortText","idx","onUpdateStatus","updateNodeStatusCb","id","RowComponent","children","odd","Cell","CellComponent","leftLock","rightLock","isLocked","lockData","fillColor","TAKEN","borderColor","UNREACHABLE","lockBorderColor","HIDDEN","display","alignItems","justifyContent","borderStyle","minWidth","padding","background","shortTextTarget","shortTextTimer","NodeComponent","handleClick","preventDefault","virtualDims","newStatus","GameAreaStateManager","Component","hexGridPx","gameState","setJumpOffset","virtualDimsToLocation","virtualCenter","divide","offsetFromVirtualCenter","subtract","relativeLocation","playerUI","virtualGridLocation","FromVector2","location","startTime","row","col","virtualVec","maybeStatus","computed","fogOfWarStatusMap","nodeStatus","playerSave","allocationStatusMap","worldGen","lockMap","toolTipText","alert","handleJump","jumpAmounts","withY","clampX","clampY","updaters","enqueueUpdate","handleUpdateNodeStatus","nodeLocation","prevStatus","AVAILABLE","maybeLock","actions","allocateNode","enqueueAction","lockStatusMap","isPixiHidden","defaultKeyIntentConfig","w","ArrowUp","ArrowLeft","ArrowDown","ArrowRight","TRAVEL_UPSTAIRS","TRAVEL_DOWNSTAIRS","KeyboardListenerComponent","handleKeydown","configuredIntent","state","keyIntentConfig","NOOP","handleKeyup","endedIntent","document","addEventListener","removeEventListener","UseGameStateContext","createContext","PixiPointFrom","Pixi","batchifySetState","batch","arg","thisBatch","prev","next","valueOrCallback","updaterGenerator2Helper","dataObject","dataUpdater","forEach","Error","newValueOrCallback","oldData","wholeData","newKey","updaterGenerator2","setState","stateCallbackFunction","ChildrenArray","indexOf","instance","removed","splice","findIndex","find","cloned","callbackfn","LifecycleHandlerBase","_staleProps","_children","_childrenToConstruct","_childrenToDestruct","_forceUpdates","markForceUpdate","childInstance","childInfo","child","childClass","propsFactory","addChild","renderSelf","didMount","self","initialState","batchedSetState","fireStateUpdaters","stateUpdaters","nextProps","_update","staleState","updateSelf","shouldUpdate","forceUpdates","didForceUpdateChild","didForceUpdate","updateChildren","_updateChildren","Promise","resolve","didUpdate","willUnmount","removeChild","engageLifecycle","derived","Proxy","construct","_didConstruct","Direction","newTarget","Reflect","computePlayerResourceAmounts","amounts","playerResourceNodesAggregated","allocatedPointNodeHistory","pointNodeRef","pointNodeGen","zLevels","chunks","pointNodes","nodeType","Nothing","resourceTypeAndModifier","resourceType","resourceModifier","resourceAmount","computePlayerResourceNodesAggregated","Flat","Increased0","AfterIncreased0","Increased1","AfterIncreased1","playerResourceAmounts","getNeighbors","selfPointNodeRef","neighborsMap","neighbors","zLevel","myChunk","chunk","withX","nbor","EAST","WEST","equals","upZLevel","upChunkCoordX","upNodeX","upChunkCoordY","upNodeY","upChunkCoord","upChunk","upNode","UP","downZLevel","downChunk","DOWN","getNeighborsMap","doTryAllocate","prevGameState","allocatedPointNodeSet","hasActiveQuest","connected","canAllocate","activeQuest","EfficiencyGate","efficiencyGateInfo","thresholdResourceType","thresholdResourceAmount","timeUntilLocked","checkEfficiencyGate","nextSet","nextHistory","selectOrReselectNode","justTriedToAllocate","justSpentSp","justFailedToAllocate","selectedPointNode","spSpentThisQuest","questProgressHistory","afterMaybeSpendingSp","activeTab","wrapped","sprite","halfwayCenterSprite","centerSprite","topHalfSprite","hitArea","tooltippableArea","numClicks","descriptionText","defaultTexture","pointNodeTexture","cropFraction","texture","sortableChildren","anchor","zIndex","mask","beginFill","drawRect","pivot","alpha","interactive","buttonMode","RenderedChunkConstants","NODE_HITAREA_PX","nodeDescription","tint","centerTint","position","isSelected","isAllocated","baseColor","topHalfColor","Mana0","textureToFind","staleProps","addListener","event","localPosition","data","getLocalPosition","worldTransform","tooltipUpdaters","visible","SPACING_PX","CHUNK_SPACING_PX","NODE_SIZE_PX","NODE_ROUNDED_PX","resyncChildren","prevProps","prevState","childrenToDelete","chunkGen","entries","selfChunkRef","childPropsFactory","delta","allocatedPointNodeSubset","childKey","childComponent","PointNodeComponent","Lazy","factory","_wasConstructed","_value","_factory","LazyHashMap","fixedCameraStage","actionStage","backdropStage","backdrop","renderer","textureSet","g","drawRoundedRect","generateTexture","LINEAR","generatePointNodeTexture","playerCurrentZ","tooltip","fixedCameraStagePropsFactory","FixedCameraStageComponent","PixiReactBridge","app","rootComponent","onTick","isSecondConstructorCall","originalAppSize","antialias","transparent","resolution","devicePixelRatio","autoDensity","powerPreference","ticker","destroy","baseTexture","baseGameLoop","bind","curr","appendChild","view","RootComponent","stage","resize","fireBatch","update","initialApplication","PixiWrapperComponent","application","useContext","gameStateUpdaters","fireBatchedSetGameState","childNodes","rerender","UAParser","getBrowser","name","WindowListenerComponent","handleWindowResize","old","getCoordNeighbors","base","NORTHWEST","SOUTHEAST","NORTHEAST","SOUTHWEST","addZ","getWithinDistance","maxDistance","minDistance","disallowedSet","touched","disallowedButTouched","byDist","vec","considering","dd","ZLevelGenFactory","config","chunkGenFactory","ChunkGenFactory","squirrel3","seed","startingChunks","j","create","pointNodeGenFactory","PointNodeGenFactory","droppedNodes","INTMAX32","loc","randomFloat","Mana2","Basic","Mana1","LockFactory","lockStatus","TICKING","GameStateFactory","mySeed","firstId","orientation","lockFactory","lockDataMap","0","questInitialAmount","questsCompleted","score","precompute","prevMap","VISIBLE","validLocks","v","OPEN","AllocateNodeAction","input","initialGameState","App","setGameState","batchedSetGameState","gameStateContextValue","classnames","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.951ce3a2.chunk.js","sourcesContent":["const logRowsToKeep: number = 60; // last 1 seconds, at 60 fps\n\n/**\n * See https://www.npmjs.com/package/pixi-fps https://github.com/jkanchelov/pixi-fps\n */\nexport class FpsTracker {\n  private frameTimestampsInTicks: any[] = [];\n  private frameTimestampsInTime: any[] = [];\n\n  constructor() {\n    this.frameTimestampsInTicks.push(0);\n    // this.frameTimestampsInTime.push((new Date()).getTime());\n  }\n\n  /**\n   * @param ticksSinceLastUpdate should be the delta in ticks since the last update - will probably be a decimal close to 1\n   */\n  public tick(ticksSinceLastUpdate: number) {\n    let lastFrameTime = this.frameTimestampsInTicks[\n      this.frameTimestampsInTicks.length - 1\n    ];\n    this.frameTimestampsInTicks.push(lastFrameTime + ticksSinceLastUpdate);\n\n    // rotate logs\n    if (this.frameTimestampsInTicks.length > logRowsToKeep + 60) {\n      this.frameTimestampsInTicks = this.frameTimestampsInTicks.slice(60);\n    }\n\n    // do the same but track real time\n    this.frameTimestampsInTime.push(new Date().getTime());\n    if (this.frameTimestampsInTime.length > logRowsToKeep + 60) {\n      this.frameTimestampsInTime = this.frameTimestampsInTime.slice(60);\n    }\n  }\n\n  // [0, 3, 4] -> 30 fps\n  public getUps(): number {\n    let ticksDiff =\n      this.frameTimestampsInTicks[this.frameTimestampsInTicks.length - 1] -\n      this.frameTimestampsInTicks[0];\n    let framesDiff = this.frameTimestampsInTicks.length - 1;\n\n    let framesPerTick = framesDiff / ticksDiff;\n    if (!framesPerTick) {\n      return 60;\n    }\n\n    return framesPerTick * 60;\n  }\n\n  public getFps(): number {\n    let timeDiff =\n      this.frameTimestampsInTime[this.frameTimestampsInTime.length - 1] -\n      this.frameTimestampsInTime[0];\n    let framesDiff = this.frameTimestampsInTime.length - 1;\n\n    let framesPerMilli = framesDiff / timeDiff;\n    if (!framesPerMilli) {\n      return 60;\n    }\n\n    return framesPerMilli * 1000;\n  }\n\n  public getFpsString(): string {\n    let fpsNumber = this.getFps();\n\n    return fpsNumber.toFixed(1);\n  }\n\n  public getUpsString(): string {\n    let upsNumber = this.getUps();\n\n    return upsNumber.toFixed(1);\n  }\n}\n","import './DebugOverlayComponent.css';\n\nimport classnames from 'classnames';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport COLORS, { colorToCss } from '../pixi/colors';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { FpsTracker } from '../lib/util/fpsTracker';\nimport { WindowState } from '../data/GameState';\n\n/**\n * Small overlay in the top left which displays window dimensions and fps.\n */\nexport function DebugOverlayComponent(props: {\n  tick: number;\n  windowState: WindowState;\n}) {\n  const pixiFpsTracker = useRef(new FpsTracker());\n  useEffect(() => {\n    pixiFpsTracker.current.tick(0);\n  }, [props.tick]);\n\n  return (\n    <div className=\"text\">\n      <div>\n        {props.windowState.innerWidth}x{props.windowState.innerHeight}\n      </div>\n      <ReactFps />\n      <div>UPS: {pixiFpsTracker.current.getFpsString()}</div>\n    </div>\n  );\n}\n\nfunction ReactFps() {\n  const [counter, setCounter] = useState(0);\n  const reactFpsTracker = useRef(new FpsTracker());\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setCounter((it) => it + 1);\n      reactFpsTracker.current.tick(0);\n    }, 5);\n    return () => clearTimeout(timer);\n  }, [counter]);\n\n  const fpsString = useMemo(() => reactFpsTracker.current.getFpsString(), [\n    counter,\n  ]);\n\n  return <div>RPS: {fpsString}</div>;\n}\n","export const EPSILON = 0.0000001;\n\nexport const epsEqual = (x: number, y: number) => {\n  return Math.abs(x - y) < EPSILON;\n};\n\nexport const epsGreaterThan = (x: number, y: number) => {\n  return x + EPSILON - y > 0;\n};\n\nexport const epsLessThan = (x: number, y: number) => {\n  return x - EPSILON - y < 0;\n};\n","let lastUsedId = 0;\n\nexport const getUniqueID = () => {\n  return lastUsedId++;\n};\n\nexport class Util {\n  static MinBy<T>(list: T[], fn: (T: T) => number): T | null {\n    let lowestT: T | null = null;\n    let lowestValue: number | null = null;\n\n    for (const item of list) {\n      const value = fn(item);\n\n      if (lowestValue === null || value < lowestValue) {\n        lowestT = item;\n        lowestValue = value;\n      }\n    }\n\n    return lowestT;\n  }\n\n  static MinByAndValue<T>(\n    list: T[],\n    fn: (T: T) => number\n  ): { obj: T; value: number } | null {\n    let lowestT: T | null = null;\n    let lowestValue: number | null = null;\n\n    for (const item of list) {\n      const value = fn(item);\n\n      if (lowestValue === null || value < lowestValue) {\n        lowestT = item;\n        lowestValue = value;\n      }\n    }\n\n    return lowestT === null || lowestValue === null\n      ? null\n      : { obj: lowestT, value: lowestValue };\n  }\n\n  static MaxBy<T>(list: T[], fn: (T: T) => number): T | null {\n    let highestT: T | null = null;\n    let highestValue: number | null = null;\n\n    for (const item of list) {\n      const value = fn(item);\n\n      if (highestValue === null || value > highestValue) {\n        highestT = item;\n        highestValue = value;\n      }\n    }\n\n    return highestT;\n  }\n\n  static RandRange(low: number, high: number): number {\n    return Math.floor(Math.random() * (high - low) + low);\n  }\n\n  public static SortByKey<T>(array: T[], key: (x: T) => number): T[] {\n    return array.sort((a, b) => {\n      return key(a) - key(b);\n    });\n  }\n\n  public static ReplaceAll(\n    str: string,\n    mapObj: { [key: string]: string }\n  ): string {\n    const re = new RegExp(Object.keys(mapObj).join('|'), 'gi');\n\n    return str.replace(re, (matched) => {\n      return mapObj[matched.toLowerCase()];\n    });\n  }\n\n  public static Debounce<F extends (...args: any[]) => void>(\n    func: F,\n    waitMilliseconds = 50,\n    options = {\n      isImmediate: false,\n    }\n  ): F {\n    let timeoutId: any; // types are different on node vs client, so we have to use any.\n\n    const result = (...args: any[]) => {\n      const doLater = () => {\n        timeoutId = undefined;\n        if (!options.isImmediate) {\n          func.apply(this, args);\n        }\n      };\n\n      const shouldCallNow = options.isImmediate && timeoutId === undefined;\n\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId);\n      }\n\n      timeoutId = setTimeout(doLater, waitMilliseconds);\n\n      if (shouldCallNow) {\n        func.apply(this, args);\n      }\n    };\n\n    return result as any;\n  }\n\n  public static FormatDate(d: Date): string {\n    const monthName = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ][d.getMonth()];\n\n    return `${monthName} ${d.getDate()}, ${('00' + d.getHours()).substr(-2)}:${(\n      '00' + d.getMinutes()\n    ).substr(-2)}:${('00' + d.getSeconds()).substr(-2)}`;\n  }\n\n  public static FlattenByOne<T>(arr: T[][]): T[] {\n    let result: T[] = [];\n\n    for (const obj of arr) {\n      result = result.concat(obj);\n    }\n\n    return result;\n  }\n\n  public static PadString(\n    string: string,\n    length: number,\n    intersperse = '',\n    character = ' '\n  ) {\n    return string + intersperse + character.repeat(length - string.length);\n  }\n}\n\n/**\n * A deep readonly type - given an object type, all subobjects and their subobjects are also marked as readonly.\n */\nexport type Const<T> = T extends Function\n  ? T\n  : {\n      readonly [P in keyof T]: T[P] extends { [k: string]: any }\n        ? Const<T[P]>\n        : T[P];\n    };\n\nconst assertOnlyCalledOnceData: { [k: string]: [string, number] } = {};\n\n/**\n * Asserts that a function is not called more than twice. Useful for debugging react lifecycle which may be creating more objects than you realize, impacting performance.\n * @param id identifier\n */\nexport function assertOnlyCalledOnce(id: string | number) {\n  let k = id.toString();\n  if (assertOnlyCalledOnceData[k] !== undefined) {\n    if (assertOnlyCalledOnceData[k][1] === 1) {\n      assertOnlyCalledOnceData[k][1] = 2;\n    } else {\n      throw new Error(\n        'Error, called more than twice with same id: ' +\n          k +\n          ' , callback the first time was : ' +\n          assertOnlyCalledOnceData[k]\n      );\n    }\n  } else {\n    const stacktrace = new Error().stack!;\n    assertOnlyCalledOnceData[k] = [stacktrace, 1];\n  }\n}\n\n/**\n * Multiplies colors (0xFFFFFF === 1). use for applying tints manually.\n * @param color1 A base color\n * @param color2 A tint\n */\nexport function multiplyColor(color1: number, color2: number): number {\n  let reds = [color1 & 0xff0000, color2 & 0xff0000];\n  let blues = [color1 & 0x0000ff, color2 & 0x0000ff];\n  let greens = [color1 & 0x00ff00, color2 & 0x00ff00];\n  let out = Math.round(((reds[0] / 0x010000) * reds[1]) / 0xffffff) * 0x010000;\n  out += Math.round(((greens[0] / 0x000100) * greens[1]) / 0x00ff00) * 0x000100;\n  out += Math.round((blues[0] * blues[1]) / 0x0000ff);\n  return out;\n}\n\nexport function enumKeys<T extends string>(enm: { [key in T]: T }): T[] {\n  return Object.keys(enm) as T[];\n}\n\n// export function enumKeys<T extends string>(enm: { [key: string]: string }) : T[] {\n//   return Object.keys(enm) as T[];\n// }\n","import { EPSILON } from '../epsilon_math';\nimport { Util } from '../misc';\n\nexport interface IVector2 {\n  x: number;\n  y: number;\n}\n\nexport class Vector2 {\n  private _x: number;\n  private _y: number;\n\n  public get x(): number {\n    return this._x;\n  }\n  public get y(): number {\n    return this._y;\n  }\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(props: { x: number; y: number });\n  constructor(\n    propsOrX: { x: number; y: number } | number = { x: 0, y: 0 },\n    y?: number\n  ) {\n    if (typeof propsOrX === 'number') {\n      this._x = propsOrX;\n      this._y = y!;\n    } else {\n      this._x = propsOrX.x;\n      this._y = propsOrX.y;\n    }\n  }\n\n  public get half(): Vector2 {\n    return new Vector2({ x: this.x / 2, y: this.y / 2 });\n  }\n\n  public static Zero: Vector2 = new Vector2(0, 0);\n  public static One: Vector2 = new Vector2(1, 1);\n\n  static IsVector2(x: any): x is Vector2 {\n    return x instanceof Vector2;\n  }\n\n  static Random(highX: number, highY: number, lowX = 0, lowY = 0) {\n    return new Vector2({\n      x: Util.RandRange(lowX, highX),\n      y: Util.RandRange(lowY, highY),\n    });\n  }\n\n  hash(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return `[${this.x}, ${this.y}]`;\n  }\n\n  invert(): Vector2 {\n    return new Vector2({\n      x: -this.x,\n      y: -this.y,\n    });\n  }\n\n  round(): Vector2 {\n    return new Vector2({\n      x: Math.round(this.x),\n      y: Math.round(this.y),\n    });\n  }\n\n  floor(): Vector2 {\n    return new Vector2({\n      x: Math.floor(this.x),\n      y: Math.floor(this.y),\n    });\n  }\n\n  taxicabDistance(p: Vector2): number {\n    return Math.abs(p.x - this.x) + Math.abs(p.y - this.y);\n  }\n\n  diagonalDistance(p: IVector2): number {\n    return Math.max(Math.abs(p.x - this.x), Math.abs(p.y - this.y));\n  }\n\n  distance(p: IVector2): number {\n    let dx = Math.abs(p.x - this.x);\n    let dy = Math.abs(p.y - this.y);\n\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  translate(p: { x: number; y: number }): Vector2 {\n    return new Vector2({\n      x: this.x + p.x,\n      y: this.y + p.y,\n    });\n  }\n\n  subtract(p: { x: number; y: number }): Vector2 {\n    return new Vector2({\n      x: this.x - p.x,\n      y: this.y - p.y,\n    });\n  }\n\n  add(p: { x: number; y: number }): Vector2 {\n    return new Vector2({\n      x: this.x + p.x,\n      y: this.y + p.y,\n    });\n  }\n\n  addX(x: number): Vector2 {\n    return new Vector2({\n      x: this.x + x,\n      y: this.y,\n    });\n  }\n\n  addY(y: number): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: this.y + y,\n    });\n  }\n\n  subtractX(x: number): Vector2 {\n    return new Vector2({\n      x: this.x - x,\n      y: this.y,\n    });\n  }\n\n  subtractY(y: number): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: this.y - y,\n    });\n  }\n\n  clampX(low: number, high: number): Vector2 {\n    let newX = this.x;\n\n    if (newX < low) {\n      newX = low;\n    }\n    if (newX > high) {\n      newX = high;\n    }\n\n    return new Vector2({\n      x: newX,\n      y: this.y,\n    });\n  }\n\n  clampY(low: number, high: number): Vector2 {\n    let newY = this.y;\n\n    if (newY < low) {\n      newY = low;\n    }\n    if (newY > high) {\n      newY = high;\n    }\n\n    return new Vector2({\n      x: this.x,\n      y: newY,\n    });\n  }\n\n  scale(\n    about: { x: number; y: number },\n    amount: { x: number; y: number }\n  ): Vector2 {\n    return new Vector2({\n      x: (this.x - about.x) * amount.x + about.x,\n      y: (this.y - about.y) * amount.y + about.y,\n    });\n  }\n\n  rotate(origin: Vector2, angle: number): Vector2 {\n    angle = angle / (180 / Math.PI);\n\n    return new Vector2({\n      x:\n        Math.cos(angle) * (this.x - origin.x) -\n        Math.sin(angle) * (this.y - origin.y) +\n        origin.x,\n      y:\n        Math.sin(angle) * (this.x - origin.x) +\n        Math.cos(angle) * (this.y - origin.y) +\n        origin.y,\n    });\n  }\n\n  equals(other: Vector2 | undefined): boolean {\n    if (other === undefined) {\n      return false;\n    }\n\n    return (\n      Math.abs(this.x - other.x) < EPSILON &&\n      Math.abs(this.y - other.y) < EPSILON\n    );\n  }\n\n  multiply(other: Vector2 | number): Vector2 {\n    if (typeof other === 'number') {\n      return new Vector2({\n        x: this.x * other,\n        y: this.y * other,\n      });\n    } else {\n      return new Vector2({\n        x: this.x * other.x,\n        y: this.y * other.y,\n      });\n    }\n  }\n\n  divide(other: Vector2 | number): Vector2 {\n    if (typeof other === 'number') {\n      return new Vector2({\n        x: this.x / other,\n        y: this.y / other,\n      });\n    } else {\n      return new Vector2({\n        x: this.x / other.x,\n        y: this.y / other.y,\n      });\n    }\n  }\n\n  toJSON(): any {\n    return {\n      __type: 'Vector2',\n      x: this.x,\n      y: this.y,\n    };\n  }\n\n  transform(trans: Vector2, scale: number): Vector2 {\n    return new Vector2({\n      x: Math.floor((this.x - trans.x) * scale),\n      y: Math.floor((this.y - trans.y) * scale),\n    });\n  }\n\n  normalize(): Vector2 {\n    if (this.x === 0 && this.y === 0) {\n      return this;\n    }\n\n    const length = Math.sqrt(this.x * this.x + this.y * this.y);\n\n    return new Vector2({\n      x: this.x / length,\n      y: this.y / length,\n    });\n  }\n\n  withX(newX: number): Vector2 {\n    return new Vector2({\n      x: newX,\n      y: this.y,\n    });\n  }\n\n  withY(newY: number): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: newY,\n    });\n  }\n\n  invertX(): Vector2 {\n    return new Vector2({\n      x: -this.x,\n      y: this.y,\n    });\n  }\n\n  lerp(other: Vector2, t: number): Vector2 {\n    if (t > 1 || t < 0) {\n      console.error('Lerp t must be between 0 and 1.');\n    }\n    if (t === 0) return this;\n    if (t === 1) return other;\n\n    return this.scale({ x: 0, y: 0 }, { x: 1 - t, y: 1 - t }).add(\n      other.scale({ x: 0, y: 0 }, { x: t, y: t })\n    );\n  }\n\n  lerp2D(other: Vector2, tx: number, ty: number): Vector2 {\n    if (tx > 1 || tx < 0 || ty > 1 || ty < 0) {\n      console.error('Lerp t must be between 0 and 1.');\n    }\n    return this.scale({ x: 0, y: 0 }, { x: 1 - tx, y: 1 - ty }).add(\n      other.scale({ x: 0, y: 0 }, { x: tx, y: ty })\n    );\n  }\n\n  coserp(other: Vector2, t: number): Vector2 {\n    t = 0.5 * (1 + Math.cos(2 * t * Math.PI));\n\n    return this.lerp(other, t);\n  }\n\n  static Deserialize(obj: any): Vector2 {\n    if (!obj.hasOwnProperty('x') || !obj.hasOwnProperty('y')) {\n      console.error('Failed deserializing point');\n    }\n\n    return new Vector2({\n      x: obj.x,\n      y: obj.y,\n    });\n  }\n\n  static Serialize(obj: Vector2): string {\n    return JSON.stringify({ x: obj.x, y: obj.y });\n  }\n}\n","import { Vector2 } from '../lib/util/geometry/vector2';\n\nexport class PointNodeRef {\n  public z: number;\n  public chunkCoord: Vector2;\n  public pointNodeCoord: Vector2;\n  public pointNodeId: number;\n\n  constructor(args: {\n    z: number;\n    chunkCoord: Vector2;\n    pointNodeCoord: Vector2;\n    pointNodeId: number;\n  }) {\n    this.z = args.z;\n    this.chunkCoord = args.chunkCoord;\n    this.pointNodeCoord = args.pointNodeCoord;\n    this.pointNodeId = args.pointNodeId;\n  }\n\n  public hash(): string {\n    return (\n      this.pointNodeId.toString() +\n      this.z.toString() +\n      this.chunkCoord.toString() +\n      this.pointNodeCoord.toString()\n    );\n  }\n\n  public toString(): string {\n    return (\n      this.z +\n      ',' +\n      this.chunkCoord.toString() +\n      ',' +\n      this.pointNodeCoord.toString()\n    );\n  }\n}\n\nexport class ChunkRef {\n  public z: number;\n  public chunkCoord: Vector2;\n  public chunkId: number;\n\n  constructor(args: { z: number; chunkCoord: Vector2; chunkId: number }) {\n    this.z = args.z;\n    this.chunkCoord = args.chunkCoord;\n    this.chunkId = args.chunkId;\n  }\n\n  public hash(): string {\n    return (\n      this.chunkId.toString() + this.z.toString() + this.chunkCoord.toString()\n    );\n  }\n}\n","import { KeyedHashMap } from '../lib/util/data_structures/hash';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { Vector3 } from '../lib/util/geometry/vector3';\nimport { LazyHashMap } from '../lib/util/lazy';\nimport { LockData } from './PlayerSaveState';\n\nexport type WorldGenState = {\n  // DEPRECATED\n  zLevels: { [z: number]: ZLevelGen };\n\n  // NOT DEPRECATED\n  seed: number;\n  lockMap: LazyHashMap<Vector3, LockData | undefined>;\n};\n\nexport type ZLevelGen = {\n  id: number;\n  chunks: KeyedHashMap<Vector2, ChunkGen>;\n};\n\nexport type ChunkGen = {\n  id: number;\n  pointNodes: KeyedHashMap<Vector2, PointNodeGen>;\n};\n\nexport class ChunkGenConstants {\n  public static CHUNK_DIM = 9; // each chunk is a DIM x DIM grid of nodes, centered on a single node\n  public static CHUNK_HALF_DIM = (ChunkGenConstants.CHUNK_DIM - 1) / 2;\n  public static DROP_NODES_CHANCE = 0.0; // before generating edges, how many of the nodes to throw out\n}\n\nexport type PointNodeGen = {\n  id: number;\n} & (\n  | {\n      nodeType: NodeType.Basic;\n      // more data to be generated here - size, color, etc.\n      resourceType: ResourceNontrivialType;\n      resourceModifier: ResourceModifier;\n      resourceAmount: number;\n    }\n  | {\n      nodeType: NodeType.Nothing;\n    }\n  | {\n      nodeType: NodeType.EfficiencyGate;\n      resourceType: ResourceNontrivialType;\n      resourceModifier: ResourceModifier;\n      resourceAmount: number;\n\n      efficiencyGateInfo: {\n        thresholdResourceType: ResourceType;\n        thresholdResourceAmount: number;\n        timeUntilLocked: number;\n      };\n    }\n);\n\nexport enum NodeType {\n  Basic = 'Basic',\n  Nothing = 'Nothing',\n  EfficiencyGate = 'EfficiencyGate',\n}\n\nexport enum ResourceNontrivialType {\n  Mana0 = 'Mana0',\n  Mana1 = 'Mana1',\n  Mana2 = 'Mana2',\n}\n\nexport type ResourceType = ResourceNontrivialType;\n// // eslint-disable-next-line\n// export const ResourceType = {\n//   Nothing: \"Nothing\",\n//   EfficiencyGate: \"EfficiencyGate\",\n//   ...ResourceNontrivialType,\n// };\n\nexport enum ResourceModifier {\n  Flat = 'Flat',\n  Increased0 = '% increased',\n  AfterIncreased0 = 'added after % increased',\n  Increased1 = '% increased multiplier',\n  AfterIncreased1 = 'added after % increased multiplier',\n}\n","import {\n  LockStatus,\n  NodeAllocatedStatus,\n} from '../components/GameArea/GameAreaComponent';\nimport { HashMap } from '../lib/util/data_structures/hash';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { Vector3 } from '../lib/util/geometry/vector3';\nimport { LazyHashMap } from '../lib/util/lazy';\nimport { Const, enumKeys } from '../lib/util/misc';\nimport { PlayerSaveState } from './PlayerSaveState';\nimport { PointNodeRef } from './PointNodeRef';\nimport {\n  ResourceModifier,\n  ResourceNontrivialType,\n  ResourceType,\n  WorldGenState,\n} from './WorldGenState';\n\nexport { PointNodeRef, ChunkRef } from './PointNodeRef';\nexport type { PlayerSaveState, Quest } from './PlayerSaveState';\nexport type {\n  WorldGenState,\n  ChunkGen,\n  ZLevelGen,\n  PointNodeGen,\n  ResourceType,\n} from './WorldGenState';\nexport {\n  ChunkGenConstants,\n  ResourceModifier,\n  ResourceNontrivialType,\n} from './WorldGenState';\n\n/**\n * Data owned by the master \"App\" component, to be made available as props to ALL subcomponents (both pixi and react); react uses context providers to make this easier\n * 1. world generation data, stuff that was computed off of the random seed and is stored so we can do logic off of it,\n *   but can be deleted/recomputed any time.\n *   May or may not be persisted to disk - unimportant apart from the random seed.\n * 2. data about player activity in the game e.g. which nodes were allocated, what quest stage they are on\n *   Must be persisted to disk - this is essentially the player's \"save file\"\n * 3. data about player activity that only influences the UI, e.g. which node was selected, but affects UI across\n *   very far away pixi/react components.\n *   Should be persisted to disk - will help the player \"remember their place\" in the game, but not a big deal if lost.\n * 4. data about the window display - should never be persisted to disk.\n * 5. data that is computed from other data - no need to persist to disk.\n *\n * Does NOT include UI data which is only relevant to a small part of the component hierarchy - e.g. how many seconds since last tap.\n * That data should belong in state owned by subcomponents.\n */\nexport type GameState = {\n  tick: number;\n  worldGen: WorldGenState;\n  playerSave: PlayerSaveState;\n  playerUI: PlayerUIState;\n  computed: ComputedState;\n  intent: PlayerIntentState;\n  windowState: WindowState;\n};\n\n/**\n * Player intents == what they want to do when they press certain mouse/keyboard keys. This is decoupled\n * from their actual keyboard keys to make remapping easier.\n */\nexport type PlayerIntentState = {\n  activeIntent: Intent;\n  newIntent: Intent;\n  endedIntent: Intent;\n};\n\nexport type Intent = {\n  [name in IntentName]: boolean;\n};\n\nexport enum IntentName {\n  // Default intent - does nothing\n  NOOP = 'NOOP',\n\n  PAN_NORTH = 'PAN_NORTH',\n  PAN_SOUTH = 'PAN_SOUTH',\n  PAN_WEST = 'PAN_WEST',\n  PAN_EAST = 'PAN_EAST',\n  TRAVEL_UPSTAIRS = 'TRAVEL_UPSTAIRS',\n  TRAVEL_DOWNSTAIRS = 'TRAVEL_DOWNSTAIRS',\n}\n\nexport const noIntent = enumKeys(IntentName).reduce((object: Intent, key) => {\n  object[key] = false;\n  return object;\n}, {} as Intent);\n\n/**\n * current window settings -- allows for dynamic resizing and also rotation on mobile web\n */\nexport type WindowState = {\n  orientation: 'original' | 'rotated'; // rotated === we are forcing landscape-in-portrait\n  innerWidth: number;\n  innerHeight: number;\n};\n\n/**\n * given the dimensions of the entire html window, computes the size of the intended play area -- leaves a 24px border\n */\nexport function appSizeFromWindowSize(window?: Const<Vector2>): Vector2 {\n  return new Vector2({\n    x: Math.min(1920, (window?.x || Infinity) - 24),\n    y: Math.min(1080, (window?.y || Infinity) - 24),\n  });\n}\n\nexport type ComputedState = {\n  // DEPRECATED\n  playerResourceAmounts?: { [k in ResourceType]: number };\n  playerResourceNodesAggregated?: HashMap<ResourceTypeAndModifier, number>;\n\n  // NOT DEPRECATED\n  fogOfWarStatusMap?: HashMap<Vector3, NodeAllocatedStatus>;\n  lockStatusMap?: HashMap<Vector3, LockStatus | undefined>;\n};\n\nexport class ResourceTypeAndModifier {\n  public type: ResourceNontrivialType;\n  public modifier: ResourceModifier;\n\n  constructor(args: {\n    type: ResourceNontrivialType;\n    modifier: ResourceModifier;\n  }) {\n    this.type = args.type;\n    this.modifier = args.modifier;\n  }\n\n  public hash(): string {\n    return this.type.toString() + ',' + this.modifier.toString();\n  }\n}\n\nexport type PlayerUIState = {\n  // deprecated\n  selectedPointNode: PointNodeRef | undefined;\n\n  // deprecated\n  activeTab: number;\n\n  isPixiHidden: boolean;\n\n  virtualGridLocation: Vector3;\n};\n","/**\n * Intended as a typescript-friendly replacement for {[k: string]: boolean} that allows us to specify what the key type should be (\n * rather than allowing any keyType.toString() to be a valid key, and without going through the trouble of declaring distinguishable\n * types for each key type we want to use). Also serves as a slightly different version of ES6 native Set(), which is hardcoded\n * to use === for object referential equality.\n *\n * NOTE: this assume hash() is a strong test for equality, i.e. 2 objects are considered equal if and only if their hashes are the same!!!\n * TODO: write StrictHashSet<K extends {hash(): string, equals(k: K): boolean}> to handle custom equality checks\n */\nexport class HashSet<K extends { hash(): string }> {\n  private _values: HashMap<K, K>;\n\n  constructor(initialValues: K[] = []) {\n    this._values = new HashMap<K, K>();\n\n    for (const value of initialValues) {\n      this.put(value);\n    }\n  }\n\n  remove(key: K): void {\n    this._values.remove(key);\n  }\n\n  put(key: K): void {\n    this._values.put(key, key);\n  }\n\n  get(key: K): boolean {\n    return this._values.get(key) !== undefined;\n  }\n\n  contains(key: K): boolean {\n    return this._values.contains(key);\n  }\n\n  values(): K[] {\n    return this._values.values();\n  }\n\n  // hash(): string {\n  //   return this._values.hashKeyset();\n  // }\n\n  clone(): HashSet<K> {\n    let n = new HashSet<K>();\n    n._values = this._values.clone();\n    return n;\n  }\n\n  size(): number {\n    return this._values.size();\n  }\n\n  equals(other: HashSet<K> | undefined | null) {\n    if (other === undefined || other === null) {\n      return false;\n    }\n\n    if (this.size() !== other.size()) {\n      return false;\n    }\n\n    for (let k of this.values()) {\n      if (!other.contains(k)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // *[Symbol.iterator]() {\n  //   // construct a new iterator. note that as usual\n  //   for (let key of Object.keys(this._values)) {\n  //     yield key;\n  //   }\n  // }\n}\n\n/**\n * Intended as a typescript-friendly replacement for {[k: string]: V} that allows us to specify what the key type should be (\n * rather than allowing any keyType.toString() to be a valid key, and without going through the trouble of declaring distinguishable\n * types for each key type we want to use). Also serves as a slightly different version of ES6 native Map(), which is hardcoded\n * to use === for object referential equality.\n *\n * NOTE: this assume hash() is a strong test for equality, i.e. 2 objects are considered equal if and only if their hashes are the same!!!\n * TODO: write StrictHashMap<K extends {hash(): string, equals(K): boolean}> to handle custom equality checks\n */\nexport class HashMap<K extends { hash(): string }, V> {\n  protected _values: { [key: string]: V } = {};\n\n  constructor(initialValues: [K, V][] = []) {\n    for (const [key, value] of initialValues) {\n      this.put(key, value);\n    }\n  }\n\n  put(key: K, value: V) {\n    this._values[key.hash()] = value;\n  }\n\n  remove(key: K): void {\n    delete this._values[key.hash()];\n  }\n\n  get(key: K): V | undefined {\n    return this._values[key.hash()];\n  }\n\n  contains(key: K): boolean {\n    // V may be an undefined type\n    return this.get(key) !== undefined && key.hash() in this._values;\n  }\n\n  values(): V[] {\n    return Object.values(this._values);\n    // return Object.keys(this._values).map(key => this._values[key]); // why grant???\n  }\n\n  // *[Symbol.iterator]() {\n  //   // construct a new iterator. note that as usual editing the object during iteration is not supported\n  //   for (let key of Object.keys(this._values)) {\n  //     yield key;\n  //   }\n  // }\n\n  // hashes only the keys - use HashableHashMap if you know that the value type here is also hashable\n  // hashKeyset(): string {\n  //   const hashes: number[] = Object.keys(this._values).map(s => hashCode(s));\n  //   let code: number = hashes.reduce((pv, cv) => pv + cv);\n  //   return code.toString();\n  // }\n\n  size(): number {\n    return Object.keys(this._values).length;\n  }\n\n  clone(): HashMap<K, V> {\n    let n = new HashMap<K, V>();\n    n._values = { ...this._values };\n    return n;\n  }\n}\n\nexport class HashableHashMap<\n  K extends { hash(): string },\n  V extends { hash(): string }\n> extends HashMap<K, V> {\n  hash(): string {\n    const hashes: number[] = Object.entries(this._values).map(\n      ([s, v]) => hashCode(s) + hashCode(v.hash())\n    );\n    let code: number = hashes.reduce((pv, cv) => pv + cv);\n    return code.toString();\n  }\n}\n\n/**\n * Same as HashMap, but actually stores the keys used to key the hashmap, instead of just their hashes.\n * Allows iteration over the full key-value pair set.\n */\nexport class KeyedHashMap<K extends { hash(): string }, V> {\n  private _kvalues: { [key: string]: [K, V] } = {};\n\n  constructor(initialValues: [K, V][] = []) {\n    for (const [key, value] of initialValues) {\n      this.put(key, value);\n    }\n  }\n\n  put(key: K, value: V) {\n    this._kvalues[key.hash()] = [key, value];\n  }\n\n  remove(key: K): void {\n    delete this._kvalues[key.hash()];\n  }\n\n  get(key: K): V | undefined {\n    return this._kvalues[key.hash()]?.[1];\n  }\n\n  contains(key: K): boolean {\n    // V may be an undefined type\n    return this.get(key) !== undefined && key.hash() in this._kvalues;\n  }\n\n  keys(): K[] {\n    return Object.keys(this._kvalues).map((key) => this._kvalues[key][0]);\n  }\n\n  entries(): [K, V][] {\n    return Object.keys(this._kvalues).map((key) => this._kvalues[key]);\n  }\n\n  values(): V[] {\n    return Object.keys(this._kvalues).map((key) => this._kvalues[key][1]);\n  }\n\n  hashKeyset(): string {\n    const hashes: number[] = Object.keys(this._kvalues).map((s) => hashCode(s));\n    let code: number = hashes.reduce((pv, cv) => pv + cv);\n    return code.toString();\n  }\n\n  clone(): KeyedHashMap<K, V> {\n    let n = new KeyedHashMap<K, V>();\n    n._kvalues = { ...this._kvalues };\n    return n;\n  }\n\n  size(): number {\n    return Object.keys(this._kvalues).length;\n  }\n}\n\nexport class DefaultHashMap<K extends { hash(): string }, V> {\n  private _values: { [key: string]: V } = {};\n  private _makeDefault: () => V;\n\n  constructor(makeDefaultValue: () => V) {\n    this._makeDefault = makeDefaultValue;\n  }\n\n  put(key: K, value: V) {\n    this._values[key.hash()] = value;\n  }\n\n  get(key: K): V {\n    if (this._values[key.hash()] === undefined) {\n      this._values[key.hash()] = this._makeDefault();\n    }\n\n    return this._values[key.hash()];\n  }\n}\n\n// Hash a string to a number. source: https://gist.github.com/hyamamoto/fd435505d29ebfa3d9716fd2be8d42f0\nexport function hashCode(s: string): number {\n  let h = 0;\n  for (let i = 0; i < s.length; i++) {\n    h = (Math.imul(31, h) + s.charCodeAt(i)) | 0;\n  }\n  return h;\n}\n\n// declare global {\n//   interface Array<T extends { hash(): string }> {\n//     hash(): string\n//   }\n//\n//   interface Number {\n//     hash(): string\n//   }\n//\n//   interface String {\n//     hash(): String\n//   }\n// }\n//\n// Array.prototype.hash = function () {\n//   return hashArray(this);\n// }\n//\n// Number.prototype.hash = function () {\n//   return this.toString();\n// }\n//\n// String.prototype.hash = function () {\n//   return this;\n// }\n//\n// function hashArray<T extends { hash(): string }>(arr: T[]): string {\n//   return arr.map(elt => hashCode(elt.hash())).reduce((pv, cv) => 31 * pv + cv).hash();\n// }\n//\n","import { EPSILON } from '../epsilon_math';\nimport { Util } from '../misc';\nimport { IVector2, Vector2 } from './vector2';\n\nexport interface IVector3 {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport class Vector3 {\n  private _x: number;\n  private _y: number;\n  private _z: number;\n\n  public get x(): number {\n    return this._x;\n  }\n  public get y(): number {\n    return this._y;\n  }\n  public get z(): number {\n    return this._z;\n  }\n\n  constructor();\n  constructor(x: number, y: number, z: number);\n  constructor(props: IVector3);\n  constructor(\n    propsOrX: IVector3 | number = { x: 0, y: 0, z: 0 },\n    y?: number,\n    z?: number\n  ) {\n    if (typeof propsOrX === 'number') {\n      this._x = propsOrX;\n      this._y = y!;\n      this._z = z!;\n    } else {\n      this._x = propsOrX.x;\n      this._y = propsOrX.y;\n      this._z = propsOrX.z;\n    }\n  }\n\n  // public get half(): Vector3 {\n  //   return new Vector3({ x: this.x / 2, y: this.y / 2 });\n  // }\n\n  public static Zero: Vector3 = new Vector3(0, 0, 0);\n  public static One: Vector3 = new Vector3(1, 1, 1);\n\n  static IsVector3(x: any): x is Vector3 {\n    return x instanceof Vector3;\n  }\n\n  static FromVector2(p: IVector2, z: number) {\n    return new Vector3(p.x, p.y, z);\n  }\n\n  // static Random(highX: number, highY: number, lowX = 0, lowY = 0) {\n  //   return new Vector3({\n  //     x: Util.RandRange(lowX, highX),\n  //     y: Util.RandRange(lowY, highY),\n  //   });\n  // }\n\n  hash(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return `[${this.x}, ${this.y}, ${this.z}]`;\n  }\n\n  // invert(): Vector3 {\n  //   return new Vector3({\n  //     x: -this.x,\n  //     y: -this.y,\n  //   });\n  // }\n\n  // round(): Vector3 {\n  //   return new Vector3({\n  //     x: Math.round(this.x),\n  //     y: Math.round(this.y),\n  //   });\n  // }\n\n  // floor(): Vector3 {\n  //   return new Vector3({\n  //     x: Math.floor(this.x),\n  //     y: Math.floor(this.y),\n  //   });\n  // }\n\n  // taxicabDistance(p: Vector3): number {\n  //   return Math.abs(p.x - this.x) + Math.abs(p.y - this.y);\n  // }\n\n  // diagonalDistance(p: IVector3): number {\n  //   return Math.max(Math.abs(p.x - this.x), Math.abs(p.y - this.y));\n  // }\n\n  // distance(p: IVector3): number {\n  //   let dx = Math.abs(p.x - this.x);\n  //   let dy = Math.abs(p.y - this.y);\n\n  //   return Math.sqrt(dx * dx + dy * dy);\n  // }\n\n  // translate(p: { x: number; y: number }): Vector3 {\n  //   return new Vector3({\n  //     x: this.x + p.x,\n  //     y: this.y + p.y,\n  //   });\n  // }\n\n  subtract(p: IVector3): Vector3 {\n    return new Vector3({\n      x: this.x - p.x,\n      y: this.y - p.y,\n      z: this.z - p.z,\n    });\n  }\n\n  add(pOrX: IVector3 | number, y?: number, z?: number): Vector3 {\n    if (typeof pOrX === 'number') {\n      return new Vector3({\n        x: this.x + pOrX,\n        y: this.y + y!,\n        z: this.z + z!,\n      });\n    } else {\n      return new Vector3({\n        x: this.x + pOrX.x,\n        y: this.y + pOrX.y,\n        z: this.z + pOrX.z,\n      });\n    }\n  }\n\n  addX(x: number): Vector3 {\n    return new Vector3({\n      x: this.x + x,\n      y: this.y,\n      z: this.z,\n    });\n  }\n\n  addY(y: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: this.y + y,\n      z: this.z,\n    });\n  }\n\n  addZ(z: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: this.y,\n      z: this.z + z,\n    });\n  }\n\n  subtractX(x: number): Vector3 {\n    return new Vector3({\n      x: this.x - x,\n      y: this.y,\n      z: this.z,\n    });\n  }\n\n  subtractY(y: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: this.y - y,\n      z: this.z,\n    });\n  }\n\n  subtractZ(z: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: this.y,\n      z: this.z - z,\n    });\n  }\n\n  // clampY(low: number, high: number): Vector3 {\n  //   let newY = this.y;\n\n  //   if (newY < low) {\n  //     newY = low;\n  //   }\n  //   if (newY > high) {\n  //     newY = high;\n  //   }\n\n  //   return new Vector3({\n  //     x: this.x,\n  //     y: newY,\n  //   });\n  // }\n\n  scale(about: IVector3, amount: IVector3): Vector3 {\n    return new Vector3({\n      x: (this.x - about.x) * amount.x + about.x,\n      y: (this.y - about.y) * amount.y + about.y,\n      z: (this.z - about.z) * amount.z + about.z,\n    });\n  }\n\n  // rotate(origin: Vector3, angle: number): Vector3 {\n  //   angle = angle / (180 / Math.PI);\n\n  //   return new Vector3({\n  //     x:\n  //       Math.cos(angle) * (this.x - origin.x) -\n  //       Math.sin(angle) * (this.y - origin.y) +\n  //       origin.x,\n  //     y:\n  //       Math.sin(angle) * (this.x - origin.x) +\n  //       Math.cos(angle) * (this.y - origin.y) +\n  //       origin.y,\n  //   });\n  // }\n\n  equals(other: IVector3 | undefined): boolean {\n    if (other === undefined) {\n      return false;\n    }\n\n    return (\n      Math.abs(this.x - other.x) < EPSILON &&\n      Math.abs(this.y - other.y) < EPSILON &&\n      Math.abs(this.z - other.z) < EPSILON\n    );\n  }\n\n  multiply(other: IVector3 | number): Vector3 {\n    if (typeof other === 'number') {\n      return new Vector3({\n        x: this.x * other,\n        y: this.y * other,\n        z: this.z * other,\n      });\n    } else {\n      return new Vector3({\n        x: this.x * other.x,\n        y: this.y * other.y,\n        z: this.z * other.z,\n      });\n    }\n  }\n\n  divide(other: IVector3 | number): Vector3 {\n    if (typeof other === 'number') {\n      return new Vector3({\n        x: this.x / other,\n        y: this.y / other,\n        z: this.z / other,\n      });\n    } else {\n      return new Vector3({\n        x: this.x / other.x,\n        y: this.y / other.y,\n        z: this.z / other.z,\n      });\n    }\n  }\n\n  toJSON(): any {\n    return {\n      __type: 'Vector3',\n      x: this.x,\n      y: this.y,\n      z: this.z,\n    };\n  }\n\n  // transform(trans: Vector3, scale: number): Vector3 {\n  //   return new Vector3({\n  //     x: Math.floor((this.x - trans.x) * scale),\n  //     y: Math.floor((this.y - trans.y) * scale),\n  //   });\n  // }\n\n  // normalize(): Vector3 {\n  //   if (this.x === 0 && this.y === 0) {\n  //     return this;\n  //   }\n\n  //   const length = Math.sqrt(this.x * this.x + this.y * this.y);\n\n  //   return new Vector3({\n  //     x: this.x / length,\n  //     y: this.y / length,\n  //   });\n  // }\n\n  pairXY(): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: this.y,\n    });\n  }\n\n  withX(newX: number): Vector3 {\n    return new Vector3({\n      x: newX,\n      y: this.y,\n      z: this.z,\n    });\n  }\n\n  withY(newY: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: newY,\n      z: this.z,\n    });\n  }\n\n  withZ(newZ: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: this.y,\n      z: newZ,\n    });\n  }\n\n  // invertX(): Vector3 {\n  //   return new Vector3({\n  //     x: -this.x,\n  //     y: this.y,\n  //   });\n  // }\n\n  // lerp(other: Vector3, t: number): Vector3 {\n  //   if (t > 1 || t < 0) {\n  //     console.error('Lerp t must be between 0 and 1.');\n  //   }\n  //   if (t === 0) return this;\n  //   if (t === 1) return other;\n\n  //   return this.scale({ x: 0, y: 0 }, { x: 1 - t, y: 1 - t }).add(\n  //     other.scale({ x: 0, y: 0 }, { x: t, y: t })\n  //   );\n  // }\n\n  // lerp2D(other: Vector3, tx: number, ty: number): Vector3 {\n  //   if (tx > 1 || tx < 0 || ty > 1 || ty < 0) {\n  //     console.error('Lerp t must be between 0 and 1.');\n  //   }\n  //   return this.scale({ x: 0, y: 0 }, { x: 1 - tx, y: 1 - ty }).add(\n  //     other.scale({ x: 0, y: 0 }, { x: tx, y: ty })\n  //   );\n  // }\n\n  // coserp(other: Vector3, t: number): Vector3 {\n  //   t = 0.5 * (1 + Math.cos(2 * t * Math.PI));\n\n  //   return this.lerp(other, t);\n  // }\n\n  static Deserialize(obj: any): Vector3 {\n    if (\n      !obj.hasOwnProperty('x') ||\n      !obj.hasOwnProperty('y') ||\n      !obj.hasOwnProperty('z')\n    ) {\n      console.error('Failed deserializing vector3');\n    }\n\n    return new Vector3({\n      x: obj.x,\n      y: obj.y,\n      z: obj.z,\n    });\n  }\n\n  static Serialize(obj: IVector3): string {\n    return JSON.stringify({ x: obj.x, y: obj.y });\n  }\n}\n","let COLORS = {\n  // good colors\n  backgroundBlue: 0x222222,\n  // nodePink: 0xeeaaaa,\n  // nodeLavender: 0xcc88ee,\n  // nodeBlue: 0x99bbff,\n  // nodeAqua: 0xbbccdd,\n  // nodeGrey: 0xddffdd,\n\n  // shitty colors\n  // backgroundBlue: 0xffffff,\n  nodePink: 0x332244,\n  nodeLavender: 0x777777,\n  nodeBlue: 0xdddddd,\n\n  // used for lock nodes\n  nodeAqua: 0xffaaaa,\n  // gateTint: 0xaaaaaa,\n  gateTint: 0xffffff,\n\n  selectedTint: 0xbbbbff,\n  allocatedTint: 0x444444,\n  nodeBorder: 0x666666,\n  nullTint: 0xffffff,\n\n  // colors that dont matter too much\n  tooltipBorderBlack: 0x222222,\n  tooltipFillWhite: 0xeeeeee,\n  white: 0xffffff,\n  grayBlack: 0x1d1d1d,\n  borderBlack: 0x111111,\n  borderWhite: 0x666666,\n  black: 0x000000,\n};\n\n// baseColor = 0xccee88; // bright yellow green\n// baseColor = 0xcccccc; // gray almost invisible\n// baseColor = 0xccccee; // lavender almost invisible\n// baseColor = 0xaacccc; // lavender almost invisible\n// baseColor = 0xdddddd; // grayish white?\n// baseColor = 0xaaaaaa; // dark grayish brown\n// baseColor = 0x777777; // very dark brown\n\nexport default COLORS;\n\nexport function colorToCss(c: number): string {\n  return '#' + c.toString(16);\n}\n","import './GameAreaComponent.css';\n\nimport classnames from 'classnames';\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { KeyedHashMap } from '../../lib/util/data_structures/hash';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport COLORS, { colorToCss } from '../../pixi/colors';\nimport { IntentName, PlayerIntentState } from '../../data/GameState';\n\n/**\n *\n *\n */\nexport const GameAreaComponent = React.memo(GameArea);\n\nexport enum NodeAllocatedStatus {\n  // DEPRECATED\n  TAKEN = 'TAKEN',\n\n  // NOT DEPRECATED\n  VISIBLE = 'VISIBLE',\n  HIDDEN = 'HIDDEN',\n  AVAILABLE = 'AVAILABLE', // availability status regardless of locks, only taking into account connectivity\n  UNREACHABLE = 'UNREACHABLE',\n}\n\nexport enum LockStatus {\n  CLOSED = 'CLOSED',\n  TICKING = 'TICKING',\n  OPEN = 'OPEN',\n}\n\nexport type NodeData = {\n  shortText: string;\n  lockData?: {\n    shortTextTarget: string;\n    shortTextTimer: string;\n    lockStatus: LockStatus;\n  };\n  toolTipText: string;\n  status: NodeAllocatedStatus;\n  id: string;\n};\ntype UpdateStatusCb = (args: {\n  virtualDims: Vector2;\n  newStatus: NodeAllocatedStatus;\n}) => void;\n\nfunction GameArea(props: {\n  hidden: boolean;\n  appSize: Vector2;\n  intent: PlayerIntentState;\n  // virtualSize: Vector2; // in pixels\n  virtualGridDims: Vector2; // in grid units. width x height, width is guaranteed to be half-integer value\n  // this object reference is guaranteed to be stable unless jump cb is called\n\n  jumpOffset?: Vector2; // if non-null, jump callback was recently requested, and this is the recommended jump offset in grid dims\n  virtualGridStatusMap: KeyedHashMap<Vector2, NodeData>;\n  // specify virtual coordinates of the node and the new status to cause an update.\n  updateNodeStatusCb: UpdateStatusCb;\n  onJump: (args: { direction: Vector2 }) => void;\n}) {\n  useEffect(() => {\n    // jumps to a new scroll position based on the newly received Vector2 instance jumpOffset\n    const jumpOffset = props.jumpOffset;\n    console.log({ receivedJumpOffset: jumpOffset }, +new Date());\n    if (!jumpOffset) return;\n    const ref = container.current;\n    if (!ref) return;\n    ref.scrollTo(\n      ref.scrollLeft - jumpOffset.x * gridWidth,\n      ref.scrollTop - jumpOffset.y * gridHeight\n    );\n  }, [props.jumpOffset]);\n  // Approximations for sqrt(3)/2 == ratio of an equilateral triangle's height to its width:\n  // 6/7, 13/15, 26/30, 45/52, 58/67, 84/97, 181/209\n  // for divisibility -- recommend 26/30, 52/60, 104/120, 168/194, 180/208, 232/268, 336/388\n  const gridWidth = 268;\n  const gridHeight = 232;\n\n  const hexCenterRadius = 32;\n  const hexBlockStyle = { width: gridWidth + 'px', height: gridHeight + 'px' };\n  const hexHalfBlockStyle = {\n    width: gridWidth / 2 + 'px',\n    height: gridHeight + 'px',\n  };\n  const hexCenterStyle = {\n    width: hexCenterRadius * 2 + 'px',\n    height: hexCenterRadius * 2 + 'px',\n    // backgroundColor: colorToCss(COLORS.nodePink),\n    // borderColor: colorToCss(COLORS.nodeBorder),\n  };\n  const hexCenterLockStyle = {\n    marginLeft: `-${hexCenterRadius * 2}px`,\n    width: hexCenterRadius * 2 + 'px',\n    height: hexCenterRadius * 5 + 'px',\n    // backgroundColor: colorToCss(COLORS.nodePink),\n    // borderColor: colorToCss(COLORS.nodeBorder),\n  };\n  const hexCenterLockBlockStyle = {\n    // width: hexCenterRadius - 12 + 'px',\n    width: hexCenterRadius * 2 + 'px',\n    height: hexCenterRadius + 'px',\n    marginTop: hexCenterRadius + 'px',\n    backgroundColor: colorToCss(COLORS.nodePink),\n    // borderColor: colorToCss(COLORS.nodeBorder),\n  };\n\n  const handleScroll = useCallback(\n    (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n      // console.log(\"NOW IN handlescroll\");\n      // const scrollRoom = virtualAreaSize.subtract(props.appSize);\n      // const scrollMod = scrollRoom.divide(virtualGrids);\n      // handle scroll\n      let direction = { x: 0, y: 0 };\n      const target = e.target! as Element;\n      let newScrollTop = target.scrollTop;\n      let newScrollLeft = target.scrollLeft;\n      if (target.scrollTop < gridHeight) {\n        newScrollTop += gridHeight * 2;\n        direction.y -= 1;\n      }\n      if (\n        target.scrollTop >\n        (props.virtualGridDims.y - 1) * gridHeight - props.appSize.y\n      ) {\n        newScrollTop -= gridHeight * 2;\n        direction.y += 1;\n      }\n      if (target.scrollLeft < gridWidth * 1.5) {\n        newScrollLeft += gridWidth * 2;\n        direction.x -= 1;\n      }\n      if (\n        target.scrollLeft >\n        (props.virtualGridDims.x - 2) * gridWidth - props.appSize.x\n      ) {\n        newScrollLeft -= gridWidth * 2;\n        direction.x += 1;\n      }\n      // console.log(target);\n      // console.log(target.scrollTop);\n      // console.log(target.scrollLeft);\n\n      if (\n        target.scrollTop !== newScrollTop ||\n        target.scrollLeft !== newScrollLeft\n      ) {\n        console.log('jump!', +new Date());\n        // target.scrollTo(newScrollLeft, newScrollTop);\n        props.onJump({ direction: new Vector2(direction.x, direction.y) });\n      }\n    },\n    [props.appSize.x, props.appSize.y]\n  );\n\n  const container = useRef<HTMLDivElement>(null);\n  const previousContainer = useRef<HTMLDivElement>(null) as any;\n  useEffect(() => {\n    if (\n      container.current != null &&\n      container.current !== previousContainer.current\n    ) {\n      container.current.scrollTop = (props.virtualGridDims.y * gridHeight) / 3;\n      container.current.scrollLeft =\n        ((props.virtualGridDims.x + 0.5) * gridWidth) / 3;\n    }\n    previousContainer.current = container.current;\n  }, [container.current]);\n\n  // control scroll with keyboard\n  useEffect(() => {\n    let lastTime: number | null = null;\n    const SCROLL_INTERVAL_MS = 10;\n    const VELOCITY = 0.5;\n    const action = () => {\n      const ref = container.current;\n      if (!ref) return;\n      let direction = Vector2.Zero;\n      if (props.intent.activeIntent[IntentName.PAN_EAST]) {\n        direction = direction.addX(1);\n      }\n      if (props.intent.activeIntent[IntentName.PAN_WEST]) {\n        direction = direction.addX(-1);\n      }\n      if (props.intent.activeIntent[IntentName.PAN_NORTH]) {\n        direction = direction.addY(1);\n      }\n      if (props.intent.activeIntent[IntentName.PAN_SOUTH]) {\n        direction = direction.addY(-1);\n      }\n      // if (!direction.equals(Vector2.Zero)) {\n      //   // window.alert(\" got direction \" +  direction.toString() + props.intent.toString());\n      //   console.log(\" got direction \", new Date(), direction, props.intent);\n      // }\n      if (lastTime === null) {\n        direction = direction.multiply(SCROLL_INTERVAL_MS); // assume 1 tick\n        lastTime = +new Date();\n      } else {\n        const elapsed = +new Date() - lastTime;\n        if (elapsed > 40) {\n          // This REGULARLY fires with a reported delay of 150-200ms, even when scrolling with mouse\n          // for some reason (react optimization??) mouse scrolling is much smoother than keyboard\n          console.log('WAS SLOW - ' + elapsed.toString());\n        }\n        direction = direction.multiply(elapsed);\n        lastTime = +new Date();\n      }\n      direction = direction.multiply(VELOCITY);\n      // direction = direction.multiply(10);\n      ref.scrollTo(\n        ref.scrollLeft + direction.x,\n        ref.scrollTop - direction.y // scroll is measured from the top left\n      );\n    };\n    const interval = setInterval(action, SCROLL_INTERVAL_MS);\n    action();\n    return () => clearInterval(interval);\n  }, [props.intent.activeIntent, props.intent.newIntent, container.current]);\n\n  /**\n   * See pointer/mouse, over/enter/out/leave, event propagation documentation\n   * https://www.w3schools.com/jquery/tryit.asp?filename=tryjquery_event_mouseenter_mouseover#:~:text=mouseenter%20and%20mouseover.-,The%20mouseover%20event%20triggers%20when%20the%20mouse%20pointer%20enters%20the,moved%20over%20the%20div%20element.\n   * https://stackoverflow.com/questions/4697758/prevent-onmouseout-when-hovering-child-element-of-the-parent-absolute-div-withou\n   * https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n   * https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Examples#example_5_event_propagation\n   * https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation\n   * https://developer.mozilla.org/en-US/docs/Web/API/Event/target\n   * https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n   * https://stackoverflow.com/questions/55546973/react-onmouseenter-event-triggering-on-child-element\n   * https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n   */\n  return (\n    <div\n      ref={container}\n      className=\"game-area\"\n      hidden={props.hidden}\n      style={{\n        width: props.appSize.x,\n        height: props.appSize.y,\n        backgroundColor: colorToCss(COLORS.backgroundBlue),\n      }}\n      onScroll={handleScroll}\n    >\n      <div\n        className=\"virtual-game-area\"\n        style={\n          {\n            // width: virtualAreaSize.x,\n            // height: virtualAreaSize.y,\n          }\n        }\n        onPointerOver={(e: React.PointerEvent) => {\n          // console.log(e);\n        }}\n        onClick={(e: React.MouseEvent) => {\n          // console.log(e);\n        }}\n      >\n        {Array(props.virtualGridDims.y)\n          .fill(0)\n          .map((_, y) => (\n            <Row key={y} rowIdx={y} hexHalfBlockStyle={hexHalfBlockStyle}>\n              {Array(props.virtualGridDims.x)\n                .fill(0)\n                .map((_, x) => {\n                  const nodeData = props.virtualGridStatusMap.get(\n                    new Vector2(x, y)\n                  )!;\n                  return (\n                    <Node\n                      nodeData={nodeData}\n                      key={nodeData?.id ?? `loading${x}`}\n                      status={nodeData.status}\n                      text={nodeData.shortText}\n                      hexBlockStyle={hexBlockStyle}\n                      idx={x}\n                      rowIdx={y}\n                      hexCenterStyle={hexCenterStyle}\n                      hexCenterLockStyle={hexCenterLockStyle}\n                      hexCenterLockBlockStyle={hexCenterLockBlockStyle}\n                      onUpdateStatus={props.updateNodeStatusCb}\n                    />\n                  );\n                })}\n            </Row>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nconst Row = React.memo(RowComponent);\n\nfunction RowComponent({\n  rowIdx,\n  hexHalfBlockStyle,\n  children,\n}: {\n  rowIdx: number;\n  hexHalfBlockStyle: any;\n  children?: React.ReactNode;\n}) {\n  /* https://stackoverflow.com/questions/1015809/how-to-get-floating-divs-inside-fixed-width-div-to-continue-horizontally */\n  const odd = !!(rowIdx % 2);\n\n  return (\n    <div className=\"hex-block-row\">\n      {odd && <div className=\"hex-block\" style={hexHalfBlockStyle} />}\n      {children}\n      {!odd && <div className=\"hex-block\" style={hexHalfBlockStyle} />}\n    </div>\n  );\n}\n\nconst Cell = React.memo(CellComponent);\nfunction CellComponent({\n  idx,\n  rowIdx,\n  children,\n  hexBlockStyle,\n  hexCenterStyle,\n  hexCenterLockStyle,\n  hexCenterLockBlockStyle,\n  onClick,\n  status,\n  text,\n  nodeData,\n}: {\n  idx: number;\n  hexCenterLockBlockStyle: any;\n\n  rowIdx: number;\n  children?: React.ReactNode;\n  hexCenterStyle: any;\n  hexCenterLockStyle: any;\n  hexBlockStyle: any;\n  onClick: React.MouseEventHandler;\n  text?: string;\n  status: NodeAllocatedStatus;\n  nodeData: NodeData;\n}) {\n  const leftLock = { ...hexCenterLockBlockStyle };\n  const rightLock = { ...hexCenterLockBlockStyle };\n\n  const isLocked = !!nodeData.lockData;\n  const fillColor =\n    status === NodeAllocatedStatus.TAKEN\n      ? colorToCss(COLORS.grayBlack)\n      : colorToCss(COLORS.nodePink);\n  const borderColor =\n    status === NodeAllocatedStatus.TAKEN ||\n    status === NodeAllocatedStatus.UNREACHABLE\n      ? colorToCss(COLORS.borderBlack)\n      : colorToCss(COLORS.borderWhite);\n  const lockBorderColor = isLocked\n    ? colorToCss(COLORS.borderBlack)\n    : borderColor;\n\n  return (\n    <div\n      id={`hex-block-${rowIdx}-${idx}`}\n      className=\"hex-block\"\n      style={hexBlockStyle}\n    >\n      <div\n        id={`hex-center-${rowIdx}-${idx}`}\n        onClick={onClick}\n        className=\"hex-center\"\n        style={{\n          ...hexCenterStyle,\n          backgroundColor: fillColor,\n          borderColor: borderColor,\n        }}\n        hidden={status === NodeAllocatedStatus.HIDDEN}\n      >\n        <div\n          style={{\n            display: 'flex',\n            width: hexCenterStyle.width,\n            height: hexCenterStyle.height,\n            alignItems: 'center',\n            justifyContent: 'center',\n            // otherwise the border width screws up centering here\n            marginTop: '-2px',\n            marginLeft: '-2px',\n          }}\n        >\n          <div className=\"tiny-text\">{text}</div>\n        </div>\n        <div\n          className=\"hover-only\"\n          style={{\n            borderStyle: 'solid',\n            marginTop: '-16px',\n            marginLeft: '48px',\n            minWidth: 'max-content',\n            padding: '3px',\n            background: 'rgba(255,255,255,0.3)',\n          }}\n        >\n          {children}\n        </div>\n      </div>\n      {isLocked ? (\n        <div\n          id={`hex-lock-${rowIdx}-${idx}`}\n          hidden={status === NodeAllocatedStatus.HIDDEN}\n          style={{\n            // zIndex: 3,\n            ...hexCenterLockStyle,\n          }}\n        >\n          <div\n            className=\"hex-center-lock-left\"\n            style={{ ...leftLock, borderColor: lockBorderColor }}\n          >\n            <div className=\"tiny-text\">\n              {nodeData.lockData?.shortTextTarget}\n            </div>\n          </div>\n          <div\n            className=\"hex-center-lock-right\"\n            style={{ ...rightLock, borderColor: lockBorderColor }}\n          >\n            <div className=\"tiny-text\">{nodeData.lockData?.shortTextTimer}</div>\n          </div>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nconst Node = React.memo(NodeComponent);\nfunction NodeComponent({\n  idx,\n  rowIdx,\n  children,\n  hexBlockStyle,\n  hexCenterStyle,\n  hexCenterLockStyle,\n  hexCenterLockBlockStyle,\n  status,\n  text,\n  onUpdateStatus,\n  nodeData,\n}: {\n  status: NodeAllocatedStatus;\n  idx: number;\n  hexCenterLockBlockStyle: any;\n  onUpdateStatus: UpdateStatusCb;\n\n  rowIdx: number;\n  children?: React.ReactNode;\n  hexCenterStyle: any;\n  hexCenterLockStyle: any;\n  hexBlockStyle: any;\n  text?: string;\n  nodeData: NodeData;\n}) {\n  const handleClick = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(`clicked`);\n      console.log({ idx, rowIdx, status });\n      onUpdateStatus({\n        virtualDims: new Vector2(idx, rowIdx),\n        newStatus: NodeAllocatedStatus.TAKEN,\n      });\n    },\n    [onUpdateStatus, status, idx, rowIdx]\n  );\n  return (\n    <Cell\n      onClick={handleClick}\n      hexBlockStyle={hexBlockStyle}\n      idx={idx}\n      rowIdx={rowIdx}\n      hexCenterStyle={hexCenterStyle}\n      hexCenterLockStyle={hexCenterLockStyle}\n      hexCenterLockBlockStyle={hexCenterLockBlockStyle}\n      text={text}\n      status={status}\n      nodeData={nodeData}\n    >\n      {status}\n    </Cell>\n  );\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { updateRestTypeNode } from 'typescript';\nimport { GameState, appSizeFromWindowSize } from '../../data/GameState';\nimport { AllocateNodeAction } from '../../game/actions/AllocateNode';\nimport { getCoordNeighbors, getWithinDistance } from '../../game/lib/HexGrid';\nimport { HashMap, KeyedHashMap } from '../../lib/util/data_structures/hash';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { Vector3 } from '../../lib/util/geometry/vector3';\nimport { UpdaterGeneratorType2 } from '../../lib/util/updaterGenerator';\nimport COLORS, { colorToCss } from '../../pixi/colors';\nimport {\n  GameAreaComponent,\n  NodeAllocatedStatus,\n  NodeData,\n} from './GameAreaComponent';\n\nexport const GameAreaStateManager = React.memo(Component);\n\n/**\n * Approximations for sqrt(3)/2 == ratio of an equilateral triangle's height to its width:\n * 6/7, 13/15, 26/30, 45/52, 58/67, 84/97, 181/209\n * for divisibility -- recommend 26/30, 52/60, 104/120, 168/194, 180/208, 232/268, 336/388\n */\nexport const hexGridPx = new Vector2(268, 232);\n\n/**\n * How much bigger the \"virtual\" (i.e. scrollable) game area is than the visible window.\n * Bigger == more elements rendered which are outside the viewport == worse performance,\n * but need to 'jump' the scroll viewport less often.\n * Recommended default is 3.0\n */\nexport const virtualAreaScaleMultiplier = 3.0;\n\nfunction Component(props: {\n  gameState: GameState;\n  updaters: UpdaterGeneratorType2<GameState, GameState>;\n  actions: { allocateNode: AllocateNodeAction };\n  children?: React.ReactNode;\n}) {\n  const { gameState, children } = props;\n\n  const appSize = useMemo(() => {\n    return appSizeFromWindowSize(\n      new Vector2(\n        gameState.windowState.innerWidth,\n        gameState.windowState.innerHeight\n      )\n    );\n  }, [gameState.windowState.innerWidth, gameState.windowState.innerHeight]);\n  const [jumpOffset, setJumpOffset] = useState(new Vector2(0, 0));\n  const virtualGridDims = useMemo(\n    () =>\n      new Vector2(\n        Math.floor(\n          (appSize.x * virtualAreaScaleMultiplier) / hexGridPx.x - 0.5\n        ),\n        Math.floor((appSize.y * virtualAreaScaleMultiplier) / hexGridPx.y)\n      ),\n    [appSize, virtualAreaScaleMultiplier, hexGridPx]\n  );\n  // useEffect(() => console.log({ virtualGridDims }), [virtualGridDims]);\n\n  const virtualDimsToLocation = useCallback(\n    (virtualDims: Vector2): Vector3 => {\n      const virtualCenter = virtualGridDims.divide(2).floor();\n      const offsetFromVirtualCenter = virtualDims.subtract(virtualCenter);\n      let relativeLocation = new Vector2(0, 0);\n      // TODO(bowei):\n      if (offsetFromVirtualCenter.y % 2 === 0) {\n        // calculate the effect of y\n        relativeLocation = new Vector2(-1, -2).multiply(\n          offsetFromVirtualCenter.y / 2\n        );\n      } else if (virtualCenter.y % 2 == 0) {\n        // half block is not in the center row\n        /**\n         * 0: O - O - O\n         * 1:   O - O - O\n         * 2: O - O - O <- virtualCenter.y\n         * 3:   O - O - O <- offsetFromVirtualCenter.y == 1\n         */\n        relativeLocation = new Vector2(0, -1).add(\n          new Vector2(-1, -2).multiply((offsetFromVirtualCenter.y - 1) / 2)\n        );\n      } else {\n        // half block is in the center row\n        /**\n         * 0: O - O - O\n         * 1:   O - O - O <- virtualCenter.y\n         * 2: O - O - O <- offsetFromVirtualCenter.y == 1\n         * 3:   O - O - O\n         */\n        relativeLocation = new Vector2(-1, -1).add(\n          new Vector2(-1, -2).multiply((offsetFromVirtualCenter.y - 1) / 2)\n        );\n      }\n      // now add in the x offset\n      relativeLocation = relativeLocation.addX(offsetFromVirtualCenter.x);\n      return gameState.playerUI.virtualGridLocation.add(\n        Vector3.FromVector2(relativeLocation, 0)\n      );\n    },\n    [gameState.playerUI.virtualGridLocation, virtualGridDims]\n  );\n  // ,\n  //   [gameState.playerUI.virtualGridLocation, virtualGridDims]\n  // );\n\n  const locationToVirtualDims = useCallback(\n    (location: Vector3): Vector2 | undefined => {\n      return undefined;\n    },\n    [gameState.playerUI.virtualGridLocation, virtualGridDims]\n  );\n\n  const virtualGridStatusMap: KeyedHashMap<Vector2, NodeData> = useMemo(() => {\n    const startTime = +new Date();\n    const map = new KeyedHashMap<Vector2, NodeData>();\n    for (let row = 0; row < virtualGridDims.x; row++) {\n      for (let col = 0; col < virtualGridDims.y; col++) {\n        const virtualVec = new Vector2(row, col);\n        const location = virtualDimsToLocation(virtualVec);\n        const maybeStatus = gameState.computed.fogOfWarStatusMap?.get(location);\n        const takenStatus = gameState.playerSave.allocationStatusMap.get(\n          location\n        );\n        const nodeStatus =\n          takenStatus === NodeAllocatedStatus.TAKEN\n            ? NodeAllocatedStatus.TAKEN\n            : maybeStatus || NodeAllocatedStatus.HIDDEN;\n        const id = location.hash();\n        const lockData = gameState.worldGen.lockMap.get(location);\n        const nodeData: NodeData = {\n          shortText: id,\n          toolTipText: nodeStatus.toString(),\n          status: nodeStatus,\n          lockData,\n          id,\n        };\n        map.put(virtualVec, nodeData);\n      }\n    }\n    // console.log({ map });\n    const elapsed = +new Date() - startTime;\n    if (elapsed > 100) {\n      window.alert('compute took ' + elapsed.toString());\n    }\n    return map;\n  }, [\n    gameState.playerSave.allocationStatusMap,\n    gameState.worldGen.lockMap,\n    virtualGridDims,\n    virtualDimsToLocation,\n  ]);\n\n  const handleJump = useCallback(\n    (args: { direction: Vector2 }) => {\n      // direction: if we hit bottom right of screen, direction == (1,1)\n      // console.log({ direction: args.direction });\n      let jumpAmounts = virtualGridDims.multiply(0.45).floor();\n      jumpAmounts = jumpAmounts.withY(Math.floor(jumpAmounts.y / 2) * 2);\n      jumpAmounts = jumpAmounts\n        .clampX(1, virtualGridDims.x - 1)\n        .clampY(2, Math.floor((virtualGridDims.y - 1) / 2) * 2);\n      const jumpOffset = jumpAmounts.multiply(args.direction);\n      // console.log({ jumpOffset });\n      props.updaters.playerUI.virtualGridLocation.enqueueUpdate((it) => {\n        return it\n          .addX(jumpOffset.x)\n          .add(new Vector3(-1, -2, 0).multiply(jumpOffset.y / 2));\n      });\n      setJumpOffset(jumpOffset.multiply(1));\n    },\n    [virtualGridDims]\n  );\n\n  const handleUpdateNodeStatus = useCallback(\n    (args: { virtualDims: Vector2; newStatus: NodeAllocatedStatus }) => {\n      // console.log({ got: 'here' });\n      const { virtualDims, newStatus } = args;\n      const nodeLocation: Vector3 = virtualDimsToLocation(virtualDims);\n      const prevStatus =\n        gameState.computed.fogOfWarStatusMap?.get(nodeLocation) ||\n        NodeAllocatedStatus.HIDDEN;\n      if (newStatus === NodeAllocatedStatus.TAKEN) {\n        if (prevStatus !== NodeAllocatedStatus.AVAILABLE) {\n          console.log('cant do that', prevStatus);\n          return;\n        }\n        const maybeLock = gameState.worldGen.lockMap.get(nodeLocation);\n        if (!!maybeLock) {\n          console.log('is locked', maybeLock);\n          return;\n        }\n      }\n\n      props.actions.allocateNode.enqueueAction({\n        nodeLocation,\n        newStatus: NodeAllocatedStatus.TAKEN,\n      });\n    },\n    [\n      props.updaters,\n      virtualDimsToLocation,\n      gameState.playerSave.allocationStatusMap,\n      gameState.computed.fogOfWarStatusMap,\n      gameState.computed.lockStatusMap,\n      gameState.worldGen.lockMap,\n    ]\n  );\n\n  return (\n    <>\n      <GameAreaComponent\n        hidden={!gameState.playerUI.isPixiHidden}\n        appSize={appSize}\n        intent={gameState.intent}\n        virtualGridDims={virtualGridDims}\n        jumpOffset={jumpOffset}\n        virtualGridStatusMap={virtualGridStatusMap}\n        updateNodeStatusCb={handleUpdateNodeStatus}\n        onJump={handleJump}\n      />\n      {props.children}\n    </>\n  );\n}\n","import React from 'react';\nimport { GameState, IntentName, PlayerIntentState } from '../data/GameState';\nimport { UpdaterGeneratorType2 } from '../lib/util/updaterGenerator';\n\ntype Props = {\n  updaters: UpdaterGeneratorType2<PlayerIntentState, GameState>;\n  intent: PlayerIntentState;\n};\n\ntype State = {\n  keyIntentConfig: keyToIntentMap;\n};\n\n// TODO: enumerate all the keyboard keys we care about\ntype BrowserKeys = string;\n\n/**\n * Holds the mapping of which keyboard keys (as interpreted by the browser)\n * map to which intents, e.g. \"up arrow\" means \"pan left\"\n */\ntype keyToIntentMap = {\n  [key in BrowserKeys]?: IntentName;\n};\n\nconst defaultKeyIntentConfig = {\n  w: IntentName.PAN_NORTH,\n  a: IntentName.PAN_WEST,\n  s: IntentName.PAN_SOUTH,\n  d: IntentName.PAN_EAST,\n  ArrowUp: IntentName.PAN_NORTH,\n  ArrowLeft: IntentName.PAN_WEST,\n  ArrowDown: IntentName.PAN_SOUTH,\n  ArrowRight: IntentName.PAN_EAST,\n  '<': IntentName.TRAVEL_UPSTAIRS,\n  '>': IntentName.TRAVEL_DOWNSTAIRS,\n};\n\n/**\n * Empty react element with listeners for keyboard actions.\n */\nexport class KeyboardListenerComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      keyIntentConfig: defaultKeyIntentConfig,\n    };\n    document.addEventListener('keydown', this.handleKeydown);\n    document.addEventListener('keyup', this.handleKeyup);\n  }\n\n  // NOTE(bowei): does using e.repeat here break when window loses focus??\n  handleKeydown = (e: KeyboardEvent) => {\n    // console.log(\"key down\", new Date());\n    const { keyIntentConfig } = this.state;\n    const key: BrowserKeys = e.key;\n    const configuredIntent = keyIntentConfig[key];\n    if (\n      e.repeat === false &&\n      configuredIntent !== undefined &&\n      configuredIntent !== IntentName.NOOP\n    ) {\n      this.props.updaters.newIntent[configuredIntent].enqueueUpdate(() => {\n        this.props.updaters.newIntent[configuredIntent].enqueueUpdate(\n          () => false\n        );\n        return true;\n      });\n      this.props.updaters.activeIntent[configuredIntent].enqueueUpdate(\n        () => true\n      );\n    }\n  };\n\n  handleKeyup = (e: KeyboardEvent) => {\n    const { keyIntentConfig } = this.state;\n    const key: BrowserKeys = e.key;\n    const configuredIntent = keyIntentConfig[key];\n    if (\n      configuredIntent !== undefined &&\n      configuredIntent !== IntentName.NOOP\n    ) {\n      this.props.updaters.activeIntent[configuredIntent].enqueueUpdate(\n        () => false\n      );\n      this.props.updaters.endedIntent[configuredIntent].enqueueUpdate(() => {\n        this.props.updaters.endedIntent[configuredIntent].enqueueUpdate(\n          () => false\n        );\n        return true;\n      });\n    }\n  };\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeydown);\n    document.removeEventListener('keyup', this.handleKeyup);\n  }\n  render() {\n    return <> </>;\n  }\n}\n","import React from 'react';\nimport { GameState } from './data/GameState';\nimport { Const } from './lib/util/misc';\nimport { UpdaterGeneratorType2 } from './lib/util/updaterGenerator';\n\n// nullable, but should be OK, just remember to populate the context\n// export const GameContext = React.createContext<GameState>(null as any);\n// export const GameUpdatersContext = React.createContext<UpdaterGeneratorType<GameState>>(null as any);\nexport const UseGameStateContext = React.createContext<\n  [Const<GameState>, UpdaterGeneratorType2<GameState>, () => void]\n>([] as any);\n","import * as Pixi from 'pixi.js';\nimport { IVector2 } from '../util/geometry/vector2';\n\nexport function PixiPointFrom(p: IVector2): Pixi.Point {\n  return new Pixi.Point(p.x, p.y);\n}\n","/**\n *\n * @param fn an arbitrary callback which performs some operation with side effects.\n * @returns a tuple: [batchedFn, fireBatch].\n * batchedFn takes the same arguments as fn, but the side effects are delayed until fireBatch is called.\n * if batchedFn is called multiple times, those invocations are stored in order, and then popped off in order when fireBatch is called.\n */\nexport function batchify<A extends any[]>(\n  fn: (...args: A) => void\n): [(...args: A) => void, () => void] {\n  let batch: A[] = [];\n\n  return [\n    (...args: A) => {\n      batch.push(args);\n      // console.log({ stack: new Error().stack, batchSize: batch.length });\n      // console.log({ batchSize: batch.length });\n    },\n    () => {\n      if (batch.length !== 0) {\n        console.log({ fired: batch.length });\n      }\n      for (let a of batch) {\n        fn(...a);\n      }\n      batch = [];\n    },\n  ];\n}\n\n/**\n * Same use case and types as [batchify], however, specifically we expect [fn] to be a setState function which takes value-or-callback\n * as its single argument, and instead of calling [fn] repeatedly for each callback in the batch, we apply the callbacks in the batch\n * sequentially to get a single state update which we then provide to [fn].\n */\nexport function batchifySetState<T>(\n  fn: (arg: T) => void\n): [(arg: T) => void, () => void] {\n  let batch: T[] = [];\n\n  return [\n    (arg: T) => {\n      batch.push(arg);\n      // console.log({ batchSize: batch.length });\n    },\n    () => {\n      if (batch.length === 0) {\n        return;\n      }\n      // console.log({ fired: batch.length });\n      let thisBatch = [...batch];\n      batch = [];\n      (fn as any)((prev: any) => {\n        let next = prev;\n        for (let valueOrCallback of thisBatch) {\n          if (typeof valueOrCallback === 'function') {\n            next = valueOrCallback(next);\n          } else {\n            next = valueOrCallback;\n          }\n        }\n        return next;\n      });\n    },\n  ];\n}\n","type UpdaterFnParam2<T, W> =\n  | ((prev: T, prevWhole: W) => T)\n  | (T extends Function ? never : T); // (T | ((prev: T, prevWhole: W) => T));\ntype UpdaterFn2<T, W> = (arg: UpdaterFnParam2<T, W>) => void;\n\n/**\n * Represent the type which has the same deep object struture as T but instead of values, it has\n * functions on [getUpdater], [enqueueUpdate], and [update] attached to every level of the object structure.\n */\nexport type UpdaterGeneratorType2<T, W = T> = {\n  [k in keyof T]: (T[k] extends { [kkt: string]: any }\n    ? UpdaterGeneratorType2<T[k], W>\n    : {}) & {\n    getUpdater: () => UpdaterFn2<T[k], W>;\n    enqueueUpdate: UpdaterFn2<T[k], W>;\n  };\n} & {\n  getUpdater: () => UpdaterFn2<T, W>;\n  enqueueUpdate: UpdaterFn2<T, W>;\n};\n\n// helper method for the recursion\nfunction updaterGenerator2Helper<T, W>(\n  dataObject: T,\n  dataUpdater: UpdaterFn2<T, W>\n): UpdaterGeneratorType2<T, W> {\n  const updaters: UpdaterGeneratorType2<T, W> = {} as any;\n  updaters.getUpdater = () => dataUpdater;\n  updaters.enqueueUpdate = dataUpdater;\n  if (typeof dataObject !== 'object') return updaters;\n  else {\n    const keys: (keyof T)[] = Object.keys(dataObject) as any;\n    keys.forEach((key: keyof T) => {\n      if (key === 'enqueueUpdate' || key === 'getUpdater' || key === 'update') {\n        throw Error(\n          `Invalid key in updaterGenerator: ${key} conflicts with reserved keywords enqueueUpdate, update, getUpdater.`\n        );\n      }\n      function keyUpdater(\n        newValueOrCallback: UpdaterFnParam2<T[typeof key], W>\n      ) {\n        if (typeof newValueOrCallback === 'function') {\n          dataUpdater((oldData: T, wholeData: W) => {\n            const newKey = (newValueOrCallback as (\n              prev: T[typeof key],\n              whole: W\n            ) => T[typeof key])(oldData[key], wholeData);\n            if (oldData[key] === newKey) {\n              return oldData; // no update detected, no need to update anything\n            } else {\n              const newData = {\n                ...oldData,\n                [key]: newKey,\n              };\n              return newData;\n            }\n          });\n        } else {\n          dataUpdater((oldData, wholeData) => ({\n            ...oldData,\n            [key]: newValueOrCallback,\n          }));\n        }\n      }\n      updaters[key] = (updaterGenerator2Helper<T[typeof key], W>(\n        dataObject[key],\n        keyUpdater\n      ) as unknown) as typeof updaters[typeof key];\n    });\n    return updaters;\n  }\n}\n\n/**\n * Convenience method for generating setState<FancyObject.sub.component>() from setState<FancyObject> callbacks.\n * If used in react, recommended that this be memoized.\n *\n * @generic T should be a data-only object - nested objects are allowed but arrays, sets not supported\n * @param dataObject ANY instance of T, used only for its keys. MUST have all keys present\n * @param setState an updater function, which can be called as: dataUpdater(newT) or\n *   dataUpdater((oldT) => { return newTFromOldT(oldT) }) ; e.g. react setState() function.\n * @return a deep object that has the same keys as T, except each key also has a getUpdater()/set/update member;\n *   the getUpdater() on a subobject of T acts similarly to the [setState] param but to the subobject rather than the whole object;\n *   the whole object is also available as the second argument of the callback\n * e.g. :\n *   let gameStateUpdater = updaterGenerator(skeletonObject, setGameState);\n *   let setName = gameStateUpdater.player.name.getUpdater();\n *   gameStateUpdater.player.name.set(newName);\n *   gameStateUpdater.player.name.update((oldName, wholeObject) => oldName + \" \");\n *\n */\nexport function updaterGenerator2<T>(\n  dataObject: T,\n  setState: UpdaterFn<T>\n): UpdaterGeneratorType2<T> {\n  const dataUpdater2 = (stateCallbackFunction: UpdaterFnParam2<T, T>) => {\n    if (typeof stateCallbackFunction === 'function') {\n      setState((prev: T) => {\n        // if T is a function type already, typescript correctly notifies us that this will fail\n        const next = (stateCallbackFunction as (prev: T, prevWhole: T) => T)(\n          prev,\n          prev\n        );\n        // console.log(\" in updater generator 2\", { next });\n        return next;\n      });\n    } else {\n      setState(stateCallbackFunction);\n    }\n  };\n  return updaterGenerator2Helper<T, T>(dataObject, dataUpdater2);\n}\n\nexport type UpdaterFnParam<T> =\n  | (T extends Function ? never : T)\n  | ((prev: T) => T);\nexport type UpdaterFn<T> = (arg: UpdaterFnParam<T>) => void;\n","import * as Pixi from 'pixi.js';\nimport { batchifySetState } from '../../lib/util/batchify';\nimport { UpdaterFn, updaterGenerator2 } from '../../lib/util/updaterGenerator';\n\ntype Props = {\n  args?: {\n    markForceUpdate?: (self: LifecycleHandlerBase<any, any>) => void;\n    [k: string]: any;\n  };\n  [k: string]: any;\n};\n\ntype State = {};\n\ntype ChildInstructions<\n  ChildInstanceType,\n  ChildPropsType extends Props,\n  ParentPropsType extends Props,\n  ParentStateType extends State\n> = {\n  childClass: new (props: ChildPropsType) => ChildInstanceType;\n  instance?: ChildInstanceType;\n  propsFactory: (\n    parentProps: ParentPropsType,\n    parentState: ParentStateType\n  ) => ChildPropsType;\n};\n\nclass ChildrenArray<P extends Props, S extends State> {\n  private _values: ChildInstructions<\n    LifecycleHandlerBase<any, any>,\n    any,\n    P,\n    S\n  >[] = [];\n\n  public add<CIT extends LifecycleHandlerBase<any, any>, CPT>(\n    c: ChildInstructions<CIT, CPT, P, S>\n  ) {\n    if (\n      this._values.indexOf(c) === -1 ||\n      (c.instance && this.contains(c.instance))\n    ) {\n      // do nohting - its already in here\n    }\n    this._values.push(c);\n  }\n\n  public remove<CIT extends LifecycleHandlerBase<any, any>>(\n    c: CIT\n  ): ChildInstructions<CIT, any, P, S> | undefined {\n    const removed = this._values.splice(\n      this._values.findIndex((it) => it.instance === c),\n      1\n    );\n    if (removed.length === 0) {\n      return undefined;\n    } else {\n      return removed[0] as ChildInstructions<CIT, any, P, S>;\n    }\n  }\n\n  public contains<CIT extends LifecycleHandlerBase<any, any>>(c: CIT): boolean {\n    return this._values.findIndex((it) => it.instance === c) > -1;\n  }\n\n  public get<CIT extends LifecycleHandlerBase<CPT, any>, CPT>(\n    c: CIT\n  ): ChildInstructions<CIT, CPT, P, S> | undefined {\n    return this._values.find((it) => it.instance === c) as\n      | ChildInstructions<CIT, CPT, P, S>\n      | undefined;\n  }\n\n  public clone(): ChildrenArray<P, S> {\n    let cloned = new ChildrenArray<P, S>();\n    cloned._values = [...this._values];\n    return cloned;\n  }\n\n  public forEach(\n    callbackfn: (\n      value: ChildInstructions<LifecycleHandlerBase<any, any>, any, P, S>,\n      index: number,\n      array: ChildInstructions<LifecycleHandlerBase<any, any>, any, P, S>[]\n    ) => void\n  ) {\n    this._values.forEach(callbackfn);\n  }\n}\n\n// export interface LifecycleHandlerBase<P extends Props, S extends State> {\n// // useful for interface merging?? https://stackoverflow.com/questions/44153378/typescript-abstract-optional-method\n// }\n\n/**\n * LifecycleHandlerConstructor <- this should take the usual props, and will return new proxy, new base component(props), the handler object which has the construct() property and that function in it\n */\n// export function LifecycleHandlerConstructor<T>(props:\n// class and interface merging??? https://stackoverflow.com/questions/44153378/typescript-abstract-optional-method\nexport abstract class LifecycleHandlerBase<P extends Props, S extends State> {\n  // public, only to interface with non lifecycleHandler classes that we have yet to refactor\n  public abstract container: Pixi.Container;\n  // public, only to allow useState function below to set this.state\n  public abstract state: S;\n\n  protected _staleProps: P; // NOTE(bowei): need it for args for now; maybe we can extract out args?\n  private _children: ChildrenArray<P, S> = new ChildrenArray();\n  private _childrenToConstruct: ChildrenArray<P, S> = new ChildrenArray();\n  private _childrenToDestruct: ChildrenArray<P, S> = new ChildrenArray();\n  private _forceUpdates: ChildrenArray<P, S> = new ChildrenArray();\n  // private _self!: LifecycleHandlerBase<P, S>;\n\n  constructor(props: P) {\n    this._staleProps = props;\n  }\n\n  protected addChild<CIT extends LifecycleHandlerBase<CPT, any>, CPT>(\n    c: ChildInstructions<CIT, CPT, P, S>\n  ) {\n    this._children.add(c); // make sure children are updated\n    this._childrenToConstruct.add(c); // if not already constructed/added to pixi hierarchy, queue it up\n  }\n\n  protected registerChild<CIT extends LifecycleHandlerBase<CPT, any>, CPT>(\n    c: ChildInstructions<CIT, CPT, P, S>\n  ) {\n    // only add children to updateable, not constructed\n    this._children.add(c);\n  }\n\n  protected removeChild<CIT extends LifecycleHandlerBase<any, any>>(c: CIT) {\n    let childInfo = this._children.remove(c); // make sure children are no longer updated\n    // NOTE(bowei): do we need to call willUnount on the children here??\n    childInfo && this._childrenToDestruct.add(childInfo); // queue it for destruction next update tick\n  }\n\n  private _didConstruct(props: P) {\n    // this._self = this;\n    this._childrenToConstruct.forEach((child) => {\n      if (!child.instance) {\n        child.instance = new child.childClass(\n          child.propsFactory(props, this.state)\n        );\n      }\n      // NOTE(bowei): we are assuming the derived class did NOT manually add child to pixi hierarchy, even if\n      // they constructed the instance themselves (in order to e.g. hold a reference); we do that here\n      this.container.addChild(child.instance.container);\n    });\n    this.renderSelf(props);\n    this.didMount?.();\n  }\n\n  /** callback passed to child - since child is not a pure component, it needs to inform us of updates if otherwise we wouldnt update */\n  protected markForceUpdate = (childInstance: any) => {\n    this._staleProps.args?.markForceUpdate?.(this); // mark us for update in OUR parent\n\n    const childInfo = this._children.get(childInstance);\n    if (childInfo) {\n      this._forceUpdates.add(childInfo);\n    } else {\n      throw new Error(`Error, child ${childInstance} not found in ${this}`);\n    }\n  };\n\n  // cannot be attached to an instance due to typescript\n  // if satic, cannot be called \"useState\" or else react linter complains\n  protected useState<S, T extends { state: S }>(self: T, initialState: S) {\n    const setState: UpdaterFn<S> = (valueOrCallback) => {\n      if (typeof valueOrCallback === 'function') {\n        self.state = (valueOrCallback as (s: S) => S)(self.state);\n      } else {\n        self.state = valueOrCallback;\n      }\n    };\n    const [batchedSetState, fireBatch] = batchifySetState(setState);\n    const stateUpdaters = updaterGenerator2<S>(initialState, batchedSetState);\n\n    return {\n      state: initialState,\n      setState,\n      fireStateUpdaters: fireBatch,\n      stateUpdaters,\n    };\n  }\n\n  // shim while we migrate\n  public update(nextProps: P) {\n    this._update(nextProps);\n  }\n\n  // NOTE(bowei): this is public because the root of component hierarchy needs to be bootstrapped from pixi react bridge\n  public _update(nextProps: P) {\n    // nextProps is guaranteed to be referentially a distinct object (might be shallow copy though)\n    const staleState = { ...this.state };\n    this.fireStateUpdaters?.();\n    this.updateSelf?.(nextProps);\n    if (\n      this.shouldUpdate &&\n      !this.shouldUpdate(this._staleProps, staleState, nextProps, this.state)\n    ) {\n      // we think we don't need to update; however, we still need to\n      // update the chidlren that asked us to forcefully update them\n      let forceUpdates = this._forceUpdates.clone();\n      this._forceUpdates = new ChildrenArray<P, S>();\n      forceUpdates.forEach((childInfo) => {\n        let { instance, propsFactory } = childInfo;\n        instance?._update(propsFactory(nextProps, this.state)); // why are we even calling props factory here?? theres no point... we should just tell the child to use their own stale props, like this:\n        // instance._forceUpdate();\n        // note that children can add themselves into forceupdate next tick as well, if they need to ensure they're continuously in there\n\n        instance && this.didForceUpdateChild?.(instance);\n      });\n      // no need to do anything else -- stale props has not changed\n\n      this.didForceUpdate?.();\n      return;\n    }\n    this.updateChildren?.(nextProps);\n    this._updateChildren(nextProps); // implementation should call children._update in here\n    this.renderSelf(nextProps);\n    this._staleProps = nextProps;\n    new Promise((resolve) => resolve(this.didUpdate?.()));\n  }\n\n  protected updateChildren?(nextProps: P): void;\n\n  // destroy, update, create in that order, so that there's no extra update right before destroy or after create\n  private _updateChildren(nextProps: P) {\n    this._childrenToDestruct.forEach((child) => {\n      if (child.instance) {\n        // should always be true\n        child.instance.willUnmount?.();\n        this.container.removeChild(child.instance.container);\n      }\n    });\n    this._childrenToDestruct = new ChildrenArray();\n\n    this._children.forEach(({ instance, propsFactory }) => {\n      instance?._update(propsFactory(nextProps, this.state));\n    });\n\n    this._childrenToConstruct.forEach((child) => {\n      // here we expect the child instances to be empty, but they could be already constructed, if the derived class needs to keep a reference to it\n      if (!child.instance) {\n        child.instance = new child.childClass(\n          child.propsFactory(nextProps, this.state)\n        );\n      }\n      this.container.addChild(child.instance.container);\n    });\n    this._childrenToConstruct = new ChildrenArray();\n  }\n\n  protected fireStateUpdaters?(): void;\n  protected didMount?(): void;\n  protected updateSelf?(nextProps: P): void;\n  protected shouldUpdate?(\n    staleProps: P,\n    staleState: S,\n    nextProps: P,\n    state: S\n  ): boolean;\n  protected abstract renderSelf(nextProps: P): void;\n  protected didUpdate?(): void;\n  protected didForceUpdate?(): void;\n  public willUnmount(): void {} // TODO(bowei): revert this to protected nullable; however it's needed for shim for now\n  protected didForceUpdateChild?(child: LifecycleHandlerBase<any, any>): void;\n\n  public toString(): string {\n    return 'lifecyclehandler object';\n  }\n}\n\nexport type LifecycleHandlerType<P, S> = LifecycleHandlerBase<P, S>;\nexport const LifecycleHandler = new Proxy(LifecycleHandlerBase, {\n  construct: (target, args, newTarget) => {\n    const instance = Reflect.construct(target, args, newTarget);\n    instance._didConstruct(...args);\n    return instance;\n  },\n});\n\nexport function engageLifecycle<T extends object>(derived: T): T {\n  return new Proxy<T>(derived, {\n    construct: (target, args) => {\n      const instance = new (target as any)(args[0]);\n      instance._didConstruct(args[0]);\n      return instance;\n    },\n  });\n}\n\n/**\n * First render:\n * constructor\n * renderChildren?\n * renderSelf\n * didMount\n *\n * Subsequent updates:\n *\n * fireStateUpdaters\n * updateSelf\n * shouldUpdate(props,state)?\n * updateChildren\n * children._update\n * renderSelf\n * didUpdate\n * staleProps = props\n *\n */\n\ntype ReferenceProps = {\n  updaters: 'stuff';\n  args: { s: 'other stuff' };\n};\ntype ReferenceState = {\n  lalalala: 'hahahah';\n};\n\nexport class Reference extends LifecycleHandler<\n  ReferenceProps,\n  ReferenceState\n> {\n  public container: Pixi.Container;\n  public state: ReferenceState;\n  constructor(props: ReferenceProps) {\n    super(props);\n    this.container = new Pixi.Container();\n    this.state = {\n      lalalala: 'hahahah',\n    };\n  }\n\n  updateSelf(nextProps: ReferenceProps) {}\n  renderSelf(nextProps: ReferenceProps) {}\n  didMount() {}\n  didUpdate() {}\n  shouldUpdate(): boolean {\n    return true;\n  }\n  fireStateUpdaters() {}\n  willUnmount() {}\n}\n","import { HashSet } from '../lib/util/data_structures/hash';\nimport { enumKeys } from '../lib/util/misc';\nimport {\n  ChunkGenConstants,\n  PointNodeRef,\n  ResourceType,\n  WorldGenState,\n} from '../data/GameState';\nimport { Vector2 } from '../lib/util/geometry/vector2';\n\nenum Direction {\n  NORTHWEST = 'NORTHWEST',\n  SOUTHWEST = 'SOUTHWEST',\n  NORTHEAST = 'NORTHEAST',\n  SOUTHEAST = 'SOUTHEAST',\n  EAST = 'EAST',\n  WEST = 'WEST',\n  UP = 'UP',\n  DOWN = 'DOWN',\n}\n\ntype NeighborsMap = { [k in Direction]?: PointNodeRef | undefined };\n\nexport function getNeighbors(\n  selfPointNodeRef: PointNodeRef,\n  worldGen: WorldGenState\n): PointNodeRef[] {\n  let neighborsMap = getNeighborsMap(selfPointNodeRef, worldGen);\n  let neighbors: PointNodeRef[] = [];\n  for (let direction of enumKeys(Direction)) {\n    let it = neighborsMap[direction];\n    if (it) {\n      neighbors.push(it);\n    }\n  }\n  return neighbors;\n}\n\nexport function getNeighborsMap(\n  selfPointNodeRef: PointNodeRef,\n  worldGen: WorldGenState\n): NeighborsMap {\n  let neighbors: NeighborsMap = {};\n\n  let zLevel = worldGen.zLevels[selfPointNodeRef.z]!;\n  let myChunk = zLevel.chunks.get(selfPointNodeRef.chunkCoord)!;\n  // first, the right neighbor:\n  if (selfPointNodeRef.pointNodeCoord.x === ChunkGenConstants.CHUNK_HALF_DIM) {\n    let chunkCoord = selfPointNodeRef.chunkCoord.addX(1);\n    let chunk = zLevel.chunks.get(chunkCoord);\n    if (chunk) {\n      let pointNodeCoord = selfPointNodeRef.pointNodeCoord.withX(\n        -ChunkGenConstants.CHUNK_HALF_DIM\n      );\n      let nbor = chunk.pointNodes.get(pointNodeCoord);\n      if (nbor) {\n        neighbors.EAST = new PointNodeRef({\n          z: selfPointNodeRef.z,\n          chunkCoord,\n          pointNodeCoord,\n          pointNodeId: nbor.id,\n        });\n      }\n    }\n  } else {\n    let pointNodeCoord = selfPointNodeRef.pointNodeCoord.addX(1);\n    let nbor = myChunk.pointNodes.get(pointNodeCoord);\n    if (nbor) {\n      neighbors.EAST = new PointNodeRef({\n        z: selfPointNodeRef.z,\n        chunkCoord: selfPointNodeRef.chunkCoord,\n        pointNodeCoord,\n        pointNodeId: nbor.id,\n      });\n    }\n  }\n  // left neighbor\n  if (selfPointNodeRef.pointNodeCoord.x === -ChunkGenConstants.CHUNK_HALF_DIM) {\n    let chunkCoord = selfPointNodeRef.chunkCoord.addX(-1);\n    let chunk = zLevel.chunks.get(chunkCoord);\n    if (chunk) {\n      let pointNodeCoord = selfPointNodeRef.pointNodeCoord.withX(\n        ChunkGenConstants.CHUNK_HALF_DIM\n      );\n      let nbor = chunk.pointNodes.get(pointNodeCoord);\n      if (nbor) {\n        neighbors.WEST = new PointNodeRef({\n          z: selfPointNodeRef.z,\n          chunkCoord,\n          pointNodeCoord,\n          pointNodeId: nbor.id,\n        });\n      }\n    }\n  } else {\n    let pointNodeCoord = selfPointNodeRef.pointNodeCoord.addX(-1);\n    let nbor = myChunk.pointNodes.get(pointNodeCoord);\n    if (nbor) {\n      neighbors.WEST = new PointNodeRef({\n        z: selfPointNodeRef.z,\n        chunkCoord: selfPointNodeRef.chunkCoord,\n        pointNodeCoord,\n        pointNodeId: nbor.id,\n      });\n    }\n  }\n  // // +y is down\n  // if (selfPointNodeRef.pointNodeCoord.y === ChunkGenConstants.CHUNK_HALF_DIM) {\n  //   let chunkCoord = selfPointNodeRef.chunkCoord.addY(1);\n  //   let chunk = zLevel.chunks.get(chunkCoord);\n  //   if (chunk) {\n  //     let pointNodeCoord = selfPointNodeRef.pointNodeCoord.withY(\n  //       -ChunkGenConstants.CHUNK_HALF_DIM\n  //     );\n  //     let nbor = chunk.pointNodes.get(pointNodeCoord);\n  //     if (nbor) {\n  //       neighbors.SOUTH = new PointNodeRef({\n  //         z: selfPointNodeRef.z,\n  //         chunkCoord,\n  //         pointNodeCoord,\n  //         pointNodeId: nbor.id,\n  //       });\n  //     }\n  //   }\n  // } else {\n  //   let pointNodeCoord = selfPointNodeRef.pointNodeCoord.addY(1);\n  //   let nbor = myChunk.pointNodes.get(pointNodeCoord);\n  //   if (nbor) {\n  //     neighbors.SOUTH = new PointNodeRef({\n  //       z: selfPointNodeRef.z,\n  //       chunkCoord: selfPointNodeRef.chunkCoord,\n  //       pointNodeCoord,\n  //       pointNodeId: nbor.id,\n  //     });\n  //   }\n  // }\n  // // -y is up\n  // if (selfPointNodeRef.pointNodeCoord.y === -ChunkGenConstants.CHUNK_HALF_DIM) {\n  //   let chunkCoord = selfPointNodeRef.chunkCoord.addY(-1);\n  //   let chunk = zLevel.chunks.get(chunkCoord);\n  //   if (chunk) {\n  //     let pointNodeCoord = selfPointNodeRef.pointNodeCoord.withY(\n  //       ChunkGenConstants.CHUNK_HALF_DIM\n  //     );\n  //     let nbor = chunk.pointNodes.get(pointNodeCoord);\n  //     if (nbor) {\n  //       neighbors.NORTH = new PointNodeRef({\n  //         z: selfPointNodeRef.z,\n  //         chunkCoord,\n  //         pointNodeCoord,\n  //         pointNodeId: nbor.id,\n  //       });\n  //     }\n  //   }\n  // } else {\n  //   let pointNodeCoord = selfPointNodeRef.pointNodeCoord.addY(-1);\n  //   let nbor = myChunk.pointNodes.get(pointNodeCoord);\n  //   if (nbor) {\n  //     neighbors.NORTH = new PointNodeRef({\n  //       z: selfPointNodeRef.z,\n  //       chunkCoord: selfPointNodeRef.chunkCoord,\n  //       pointNodeCoord,\n  //       pointNodeId: nbor.id,\n  //     });\n  //   }\n  // }\n\n  // progress zlevels\n  // up is only available if we are the center of our chunk\n  if (selfPointNodeRef.pointNodeCoord.equals(Vector2.Zero)) {\n    let upZLevel = worldGen.zLevels[selfPointNodeRef.z + 1];\n    if (upZLevel) {\n      // use our chunkcoord and divide by CHUNK_DIM\n      let chunkCoord = selfPointNodeRef.chunkCoord;\n      let upChunkCoordX = Math.round(\n        chunkCoord.x / ChunkGenConstants.CHUNK_DIM\n      );\n      let upNodeX = chunkCoord.x - ChunkGenConstants.CHUNK_DIM * upChunkCoordX; // should be between - CHUNK_HALF_DIM and CHUNK_HALF_DIM\n      let upChunkCoordY = Math.round(\n        chunkCoord.y / ChunkGenConstants.CHUNK_DIM\n      );\n      let upNodeY = chunkCoord.y - ChunkGenConstants.CHUNK_DIM * upChunkCoordX; // should be between - CHUNK_HALF_DIM and CHUNK_HALF_DIM\n      let upChunkCoord = new Vector2(upChunkCoordX, upChunkCoordY);\n      let upChunk = upZLevel.chunks.get(upChunkCoord);\n      if (upChunk) {\n        let upNode = new Vector2(upNodeX, upNodeY);\n        let nbor = upChunk.pointNodes.get(upNode);\n        if (nbor) {\n          neighbors.UP = new PointNodeRef({\n            z: selfPointNodeRef.z + 1,\n            chunkCoord: upChunkCoord,\n            pointNodeCoord: upNode,\n            pointNodeId: nbor.id,\n          });\n        }\n      }\n    }\n  }\n  // down\n  let downZLevel = worldGen.zLevels[selfPointNodeRef.z - 1];\n  if (downZLevel) {\n    let chunkCoord = selfPointNodeRef.chunkCoord\n      .multiply(9)\n      .add(selfPointNodeRef.pointNodeCoord);\n    let downChunk = downZLevel.chunks.get(chunkCoord);\n    if (downChunk) {\n      let nbor = downChunk.pointNodes.get(Vector2.Zero);\n      if (nbor) {\n        neighbors.DOWN = new PointNodeRef({\n          z: selfPointNodeRef.z - 1,\n          chunkCoord,\n          pointNodeCoord: Vector2.Zero,\n          pointNodeId: nbor.id,\n        });\n      }\n    }\n  }\n\n  return neighbors;\n}\n\nexport function canAllocate(\n  selfPointNodeRef: PointNodeRef,\n  worldGen: WorldGenState,\n  allocatedPointNodeSet: HashSet<PointNodeRef>,\n  hasActiveQuest: boolean\n): 'yes' | 'already allocated' | 'no active quest' | 'not connected' {\n  if (allocatedPointNodeSet.contains(selfPointNodeRef)) {\n    return 'already allocated';\n  }\n  // if (hasActiveQuest === false) {\n  //   return \"no active quest\"\n  // }\n\n  // check if any of our neighbors are allocated\n  const neighbors = getNeighbors(selfPointNodeRef, worldGen);\n\n  let connected = false;\n  for (let nbor of neighbors) {\n    if (allocatedPointNodeSet.contains(nbor)) {\n      connected = true;\n    }\n  }\n  if (connected) {\n    return 'yes';\n  }\n\n  return 'not connected';\n}\n","import {\n  ComputedState,\n  GameState,\n  ResourceModifier,\n  ResourceNontrivialType,\n  ResourceType,\n  ResourceTypeAndModifier,\n} from '../data/GameState';\nimport { NodeType } from '../data/WorldGenState';\nimport { HashMap } from '../lib/util/data_structures/hash';\nimport { enumKeys } from '../lib/util/misc';\n\nexport function computePlayerResourceNodesAggregated(\n  gameState: GameState\n): HashMap<ResourceTypeAndModifier, number> {\n  let playerResourceNodesAggregated = new HashMap<\n    ResourceTypeAndModifier,\n    number\n  >();\n\n  for (let pointNodeRef of gameState.playerSave.allocatedPointNodeHistory) {\n    let pointNodeGen = gameState.worldGen.zLevels[pointNodeRef.z]!.chunks.get(\n      pointNodeRef.chunkCoord\n    )!.pointNodes.get(pointNodeRef.pointNodeCoord)!;\n    if (pointNodeGen.nodeType === NodeType.Nothing) {\n      continue;\n    }\n\n    let resourceTypeAndModifier = new ResourceTypeAndModifier({\n      type: pointNodeGen.resourceType,\n      modifier: pointNodeGen.resourceModifier,\n    });\n\n    playerResourceNodesAggregated.put(\n      resourceTypeAndModifier,\n      (playerResourceNodesAggregated.get(resourceTypeAndModifier) || 0) +\n        pointNodeGen.resourceAmount\n    );\n  }\n  return playerResourceNodesAggregated;\n}\n\nexport function computePlayerResourceAmounts(\n  gameState: GameState\n): ComputedState {\n  let amounts: { [k in ResourceType]?: number } = {};\n\n  let playerResourceNodesAggregated = computePlayerResourceNodesAggregated(\n    gameState\n  );\n\n  // Do the +flat, %increased, etc. calculations here\n  for (let key of enumKeys(ResourceNontrivialType)) {\n    // iterate throu\n    let amount =\n      playerResourceNodesAggregated.get(\n        new ResourceTypeAndModifier({\n          type: key,\n          modifier: ResourceModifier.Flat,\n        })\n      ) || 0;\n    amount *=\n      1 +\n      0.01 *\n        (playerResourceNodesAggregated.get(\n          new ResourceTypeAndModifier({\n            type: key,\n            modifier: ResourceModifier.Increased0,\n          })\n        ) || 0);\n    amount = Math.floor(amount);\n    amount +=\n      playerResourceNodesAggregated.get(\n        new ResourceTypeAndModifier({\n          type: key,\n          modifier: ResourceModifier.AfterIncreased0,\n        })\n      ) || 0;\n    amount *=\n      1 +\n      0.01 *\n        (playerResourceNodesAggregated.get(\n          new ResourceTypeAndModifier({\n            type: key,\n            modifier: ResourceModifier.Increased1,\n          })\n        ) || 0);\n    amount = Math.floor(amount);\n    amount +=\n      playerResourceNodesAggregated.get(\n        new ResourceTypeAndModifier({\n          type: key,\n          modifier: ResourceModifier.AfterIncreased1,\n        })\n      ) || 0;\n    amounts[key] = amount;\n  }\n\n  return {\n    playerResourceAmounts: amounts as { [k in ResourceType]: number },\n    playerResourceNodesAggregated,\n  };\n}\n","import {\n  GameState,\n  PlayerSaveState,\n  PointNodeRef,\n  ResourceType,\n} from '../data/GameState';\nimport { NodeType } from '../data/WorldGenState';\nimport { canAllocate } from './Neighbors';\n\nexport function doTryAllocate(\n  prev: PlayerSaveState,\n  prevGameState: GameState,\n  selfPointNodeRef: PointNodeRef\n): [PlayerSaveState, boolean] {\n  if (\n    canAllocate(\n      selfPointNodeRef,\n      prevGameState.worldGen,\n      prevGameState.playerSave.allocatedPointNodeSet,\n      prevGameState.playerSave.activeQuest !== undefined\n    ) === 'yes' &&\n    checkEfficiencyGate(selfPointNodeRef, prevGameState)\n  ) {\n    // do the change\n    const nextSet = prev.allocatedPointNodeSet.clone();\n    nextSet.put(selfPointNodeRef);\n    const nextHistory = [...prev.allocatedPointNodeHistory];\n    nextHistory.push(selfPointNodeRef);\n    return [\n      {\n        ...prev,\n        allocatedPointNodeHistory: nextHistory,\n        allocatedPointNodeSet: nextSet,\n      },\n      true,\n    ];\n  } else {\n    return [prev, false];\n  }\n}\n\nexport function afterMaybeSpendingSp(\n  prev: PlayerSaveState,\n  prevGameState: GameState\n): PlayerSaveState {\n  let next = { ...prev };\n  if (next.spSpentThisQuest !== undefined) {\n    next.spSpentThisQuest += 1;\n  }\n\n  // update quest progress history?\n  if (next.activeQuest) {\n    let resourceType = next.activeQuest.resourceType;\n    let amount =\n      prevGameState.computed.playerResourceAmounts?.[resourceType] || 0;\n    next.questProgressHistory.push(amount);\n  }\n  return next;\n}\n\nexport function checkEfficiencyGate(\n  selfPointNodeRef: PointNodeRef,\n  gameState: GameState\n) {\n  const self = gameState.worldGen.zLevels[selfPointNodeRef.z].chunks\n    .get(selfPointNodeRef.chunkCoord)\n    ?.pointNodes.get(selfPointNodeRef.pointNodeCoord)!;\n\n  if (self.nodeType !== NodeType.EfficiencyGate) {\n    return true;\n  } else {\n    let resourceType = self.efficiencyGateInfo.thresholdResourceType;\n    let amount = gameState.computed.playerResourceAmounts?.[resourceType] || 0;\n    if (\n      amount >= self.efficiencyGateInfo.thresholdResourceAmount &&\n      gameState.playerSave.allocatedPointNodeHistory.length <=\n        self.efficiencyGateInfo.timeUntilLocked\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n","import { GameState, PointNodeRef } from '../data/GameState';\nimport { UpdaterGeneratorType2 } from '../lib/util/updaterGenerator';\nimport { computePlayerResourceAmounts } from './ComputeState';\nimport { afterMaybeSpendingSp, doTryAllocate } from './OnAllocation';\n\nexport function selectOrReselectNode(\n  updaters: UpdaterGeneratorType2<GameState>,\n  selfPointNodeRef: PointNodeRef\n) {\n  let justTriedToAllocate = false;\n  let justSpentSp = false;\n  let justFailedToAllocate = false;\n\n  // update selected to ourselves\n  updaters.playerUI.selectedPointNode.enqueueUpdate((prev, gameState) => {\n    if (prev?.pointNodeId === selfPointNodeRef.pointNodeId) {\n      // console.log('just selected: ', this);\n      justTriedToAllocate = true;\n    }\n    return selfPointNodeRef;\n  });\n\n  // if we tried to allocate ourselves, see if we can\n  updaters.playerSave.enqueueUpdate((prev, prevGameState) => {\n    if (justTriedToAllocate) {\n      justTriedToAllocate = false;\n      let [next, succeeded] = doTryAllocate(\n        prev,\n        prevGameState,\n        selfPointNodeRef\n      );\n      if (succeeded) {\n        justSpentSp = true;\n        return next;\n      } else {\n        justFailedToAllocate = true;\n        return prev;\n      }\n    }\n    return prev;\n  });\n\n  // TODO(bowei): if we spent sp, remember to update quest status!!\n  updaters.computed.enqueueUpdate((prev, prevGameState) => {\n    if (justSpentSp) {\n      // this.state.justSpentSp = false;\n      // console.log(\"just spent SP!\");\n      let it = computePlayerResourceAmounts(prevGameState);\n      // console.log({ x });\n      return it;\n    }\n    return prev;\n  });\n\n  updaters.playerSave.enqueueUpdate((prev, prevGameState) => {\n    if (justSpentSp) {\n      justSpentSp = false;\n      // console.log(\"just spent SP!\");\n      return afterMaybeSpendingSp(prev, prevGameState);\n    }\n    return prev;\n  });\n\n  // if we failed to allocate, shift the active tab so the player can see why\n  updaters.playerUI.activeTab.enqueueUpdate((prev, prevGameState) => {\n    if (justFailedToAllocate) {\n      justFailedToAllocate = false;\n      return 1;\n    }\n    return prev;\n  });\n}\n","import * as Pixi from 'pixi.js';\nimport { RenderedChunkConstants } from './ChunkComponent';\nimport { UpdaterGeneratorType2 } from '../../lib/util/updaterGenerator';\nimport {\n  GameState,\n  PointNodeGen,\n  PointNodeRef,\n  ResourceModifier,\n  ResourceType,\n} from '../../data/GameState';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { PixiPointFrom } from '../../lib/pixi/pixify';\nimport { multiplyColor } from '../../lib/util/misc';\nimport { TooltippableAreaComponent } from './TooltippableAreaComponent';\nimport { engageLifecycle, LifecycleHandlerBase } from './LifecycleHandler';\nimport { selectOrReselectNode } from '../../game/OnSelectOrReselectNode';\nimport { RootComponentState } from './RootComponent';\nimport { PointNodeTextureSet } from '../textures/PointNodeTexture';\nimport COLORS from '../colors';\nimport { NodeType, ResourceNontrivialType } from '../../data/WorldGenState';\n\ntype Props = {\n  delta: number;\n  args: {\n    pointNodeTexture: PointNodeTextureSet;\n    position: Vector2;\n    markForceUpdate: (childInstance: any) => void;\n  };\n  selfPointNodeRef: PointNodeRef;\n  updaters: UpdaterGeneratorType2<GameState>;\n  tooltipUpdaters: UpdaterGeneratorType2<RootComponentState>['tooltip'];\n  pointNodeGen: PointNodeGen;\n  isSelected: boolean;\n  isAllocated: boolean;\n};\n\ntype State = {\n  numClicks: number; // debug\n  descriptionText: string;\n};\n\nclass PointNodeComponent extends LifecycleHandlerBase<Props, State> {\n  public container: Pixi.Container;\n  public state: State;\n\n  public sprite: Pixi.Sprite;\n  public halfwayCenterSprite: Pixi.Sprite;\n  public centerSprite: Pixi.Sprite;\n  public topHalfSprite: Pixi.Sprite;\n  public hitArea: Pixi.IHitArea;\n\n  public tooltippableArea?: TooltippableAreaComponent;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      numClicks: 0,\n      descriptionText: '',\n    };\n    this.updateSelf(props); // initialize the description text properly\n    this.container = new Pixi.Container();\n\n    let defaultTexture = props.args.pointNodeTexture.find((it) => {\n      return it.cropFraction >= 0.99;\n    })?.texture;\n    this.container.sortableChildren = true;\n    this.sprite = new Pixi.Sprite(defaultTexture);\n    this.sprite.anchor.x = 0.5;\n    this.sprite.anchor.y = 0.5;\n    this.sprite.zIndex = -2;\n    this.container.addChild(this.sprite);\n\n    this.topHalfSprite = new Pixi.Sprite(\n      props.args.pointNodeTexture.find((it) => {\n        return it.cropFraction >= 0.499;\n      })?.texture\n    );\n    this.topHalfSprite.anchor.x = 0.5;\n    this.topHalfSprite.anchor.y = 0.5;\n    this.topHalfSprite.zIndex = -1;\n    // this.topHalfSprite.alpha = 0;\n    if (props.pointNodeGen.nodeType === NodeType.EfficiencyGate) {\n      // adding this drops FPS from 90 static/50 moving to 70 static/40 moving, even when alpha off, so we only add it for the nodes that need it\n      this.container.addChild(this.topHalfSprite);\n    }\n\n    const mask = new Pixi.Graphics();\n    mask.beginFill(COLORS.black);\n    mask.drawRect(\n      0,\n      0,\n      this.topHalfSprite.width,\n      this.topHalfSprite.height / 2\n    );\n    mask.pivot.x = this.topHalfSprite.width / 2;\n    mask.pivot.y = this.topHalfSprite.height / 2;\n    mask.zIndex = 30;\n    // this.container.addChild(mask);\n    // this.topHalfSprite.mask = mask; // DO NOT DO THIS, masking many masks is extremely slow: https://forums.rpgmakerweb.com/index.php?threads/games-optimisations-tips.92717/\n\n    this.centerSprite = new Pixi.Sprite(defaultTexture);\n    this.centerSprite.anchor.x = 0.5;\n    this.centerSprite.anchor.y = 0.5;\n    this.centerSprite.scale = PixiPointFrom(new Vector2(0.5, 0.5));\n    this.centerSprite.zIndex = 1;\n    this.centerSprite.alpha = 0; // TESTING\n    // this.container.addChild(this.centerSprite);\n\n    this.halfwayCenterSprite = new Pixi.Sprite(defaultTexture);\n    this.halfwayCenterSprite.anchor.x = 0.5;\n    this.halfwayCenterSprite.anchor.y = 0.5;\n    this.halfwayCenterSprite.scale = PixiPointFrom(new Vector2(0.75, 0.75));\n    this.halfwayCenterSprite.zIndex = 0;\n    // disable this sprite for now - causes a fairly significant fps hit, until we get around to holding less nodes on the page at once\n    this.halfwayCenterSprite.alpha = 0;\n    // this.container.addChild(this.halfwayCenterSprite);\n\n    this.container.interactive = true;\n    // NOTE(bowei): ive tested, the following 2 settings don't significantly affect FPS\n    this.container.buttonMode = true;\n    this.hitArea = new Pixi.Rectangle(\n      -RenderedChunkConstants.NODE_HITAREA_PX / 2,\n      -RenderedChunkConstants.NODE_HITAREA_PX / 2,\n      RenderedChunkConstants.NODE_HITAREA_PX,\n      RenderedChunkConstants.NODE_HITAREA_PX\n    );\n    // note: hitarea breaks child onhover: https://github.com/pixijs/pixi.js/issues/5837\n    this.container.hitArea = this.hitArea;\n\n    // const tooltippableAreaPropsFactory = (p: Props, s: State) => {\n    //   let nodeDescription: string = \"Nothing (empty node)\";\n    //   if (p.pointNodeGen.resourceType !== ResourceType.Nothing) {\n    //     nodeDescription = `${p.pointNodeGen.resourceAmount} ${p.pointNodeGen.resourceModifier} ${p.pointNodeGen.resourceType}`;\n    //   }\n    //   return {\n    //     args: {\n    //       markForceUpdate: this.markForceUpdate,\n    //     },\n    //     text: nodeDescription,\n    //     hitArea: this.hitArea, // TODO(bowei): move into state???\n    //   }\n    // }\n    // this.tooltippableArea = new TooltippableAreaComponent(tooltippableAreaPropsFactory(props, this.state));\n    // this.container.addChild(this.tooltippableArea.container);\n    // this.addChild({\n    //   childClass: TooltippableAreaComponent,\n    //   instance: this.tooltippableArea,\n    //   propsFactory: tooltippableAreaPropsFactory,\n    // });\n  }\n\n  protected updateSelf(props: Props) {\n    let nodeDescription: string = 'Nothing (empty node)';\n    if (props.pointNodeGen.nodeType === NodeType.EfficiencyGate) {\n      nodeDescription = `Unlocks at 300 Mana0 in 14 or fewer allocations`; // TODO\n    } else if (props.pointNodeGen.nodeType !== NodeType.Nothing) {\n      nodeDescription = `${props.pointNodeGen.resourceAmount} ${props.pointNodeGen.resourceModifier} ${props.pointNodeGen.resourceType}`;\n    }\n    this.state.descriptionText = nodeDescription;\n  }\n\n  protected renderSelf(props: Props) {\n    this.container.position = PixiPointFrom(props.args.position);\n    let tint: number;\n    let centerTint: number;\n    if (props.isSelected) {\n      tint = COLORS.selectedTint;\n      centerTint = COLORS.selectedTint;\n    } else {\n      tint = COLORS.nullTint;\n      centerTint = COLORS.nullTint;\n    }\n    if (props.isAllocated) {\n      tint = COLORS.allocatedTint;\n    } else {\n    }\n\n    let baseColor: number = 0;\n    let topHalfColor: number = 0;\n    if (props.pointNodeGen.nodeType === NodeType.Nothing) {\n      baseColor = COLORS.nodeBlue; // blue that mixes in with bg\n    } else if (props.pointNodeGen.nodeType === NodeType.EfficiencyGate) {\n      baseColor = COLORS.nodeAqua; // bg color = abcdef\n      topHalfColor = multiplyColor(COLORS.nodeAqua, COLORS.gateTint); // grayish white\n    } else if (\n      props.pointNodeGen.resourceType === ResourceNontrivialType.Mana0\n    ) {\n      if (props.pointNodeGen.resourceModifier === ResourceModifier.Flat) {\n        baseColor = COLORS.nodePink;\n      } else if (\n        props.pointNodeGen.resourceModifier === ResourceModifier.Increased0\n      ) {\n        baseColor = COLORS.nodeLavender;\n      }\n    }\n    // switch (props.pointNodeGen.resourceType) {\n    //   case ResourceType.Nothing:\n    //     baseColor = 0x99bbff; // blue that mixes in with bg\n    //     break;\n    //   case ResourceType.Mana0:\n    //     baseColor = 0xeeaaaa; // red\n    //     break;\n    //   case ResourceType.Mana1:\n    //     baseColor = 0xbb7733; // brown?\n    //     break;\n    //   case ResourceType.Mana2:\n    //     baseColor = 0x44aa44; // green\n    //     break;\n    // }\n\n    this.sprite.tint = multiplyColor(baseColor, tint);\n    this.centerSprite.tint = multiplyColor(baseColor, centerTint);\n    this.topHalfSprite.tint = multiplyColor(topHalfColor, tint);\n\n    // TESTING\n    let textureToFind = Math.floor(Math.random() * 9) / 8 - 0.001;\n    this.topHalfSprite.texture = props.args.pointNodeTexture.find(\n      (it) => it.cropFraction >= textureToFind\n    )?.texture!;\n\n    // NOTE(bowei): careful, we dont want to set the scale of our tooltip to be bigger\n    if (props.selfPointNodeRef.pointNodeCoord.equals(Vector2.Zero)) {\n      this.container.scale = PixiPointFrom(new Vector2(1.25, 1.25));\n    }\n  }\n\n  protected shouldUpdate(\n    staleProps: Props,\n    staleState: State,\n    props: Props,\n    state: State\n  ): boolean {\n    for (let key of Object.keys(staleProps) as (keyof Props)[]) {\n      if (key === 'delta' || key === 'args' || key === 'updaters') {\n        continue;\n      }\n      if (staleProps[key] !== props[key]) {\n        console.log(`node shouldUpdate differed in ${key}, returning true`);\n        return true;\n      }\n      if (key === 'selfPointNodeRef') {\n        if (staleProps[key]?.hash() !== props[key]?.hash()) {\n          console.log(`node shouldUpdate differed in ${key}, returning true`);\n          return true;\n        } else {\n          continue;\n        }\n      }\n    }\n    return false;\n  }\n\n  protected didMount() {\n    const { updaters } = this._staleProps; // we assume this will never change\n\n    //     this.container.addListener('pointerover', (event: Pixi.InteractionEvent) => {\n    //       this.state.pointerover = event;\n    //     })\n    //     this.container.addListener('pointerout', () => {\n    //       this.state.pointerover = undefined;\n    //     })\n    //\n\n    this.container.addListener(\n      'pointerdown',\n      (event: Pixi.InteractionEvent) => {\n        this._staleProps.args.markForceUpdate(this);\n        this.state.numClicks++;\n        selectOrReselectNode(updaters, this._staleProps.selfPointNodeRef);\n        // event.stopPropagation();\n      }\n    );\n\n    this.container.addListener(\n      'pointerover',\n      (event: Pixi.InteractionEvent) => {\n        // this._staleProps.args.markForceUpdate(this);\n\n        // source: https://www.iwm-tuebingen.de/iwmbrowser/lib/pixi/tooltip.js\n        const localPosition = event.data.getLocalPosition(this.container);\n        const position = new Vector2(\n          this.container.worldTransform.tx,\n          this.container.worldTransform.ty\n        );\n        // const position = new Vector2(this.container.worldTransform.tx, this.container.worldTransform.ty);\n\n        this._staleProps.tooltipUpdaters.enqueueUpdate((prev) => {\n          const next = {\n            ...prev,\n            visible: true,\n            text: this.state.descriptionText,\n            position: position.add(localPosition),\n          };\n          // console.log({ next });\n          return next;\n        });\n      }\n    );\n\n    this.container.addListener('pointerout', (event: Pixi.InteractionEvent) => {\n      // this._staleProps.args.markForceUpdate(this);\n\n      this._staleProps.tooltipUpdaters.enqueueUpdate((prev) => {\n        const next = { ...prev, visible: false, text: '' };\n        return next;\n      });\n    });\n\n    this.container.addListener(\n      'pointermove',\n      (event: Pixi.InteractionEvent) => {\n        // this._staleProps.args.markForceUpdate(this);\n\n        // source: https://www.iwm-tuebingen.de/iwmbrowser/lib/pixi/tooltip.js\n        const localPosition = event.data.getLocalPosition(this.container);\n        const position = new Vector2(\n          this.container.worldTransform.tx,\n          this.container.worldTransform.ty\n        );\n\n        this._staleProps.tooltipUpdaters.position.enqueueUpdate(\n          position.add(localPosition)\n        );\n      }\n    );\n  }\n\n  public toString(): string {\n    return 'PointNodeCompoent ' + this._staleProps.selfPointNodeRef.toString();\n  }\n}\n\nconst wrapped = engageLifecycle(PointNodeComponent);\n// eslint-disable-next-line\ntype wrapped = PointNodeComponent;\nexport { wrapped as PointNodeComponent };\nexport type { Props as PointNodeComponentProps };\n","import * as Pixi from 'pixi.js';\nimport { HashSet, KeyedHashMap } from '../../lib/util/data_structures/hash';\nimport {\n  ChunkGen,\n  ChunkGenConstants,\n  ChunkRef,\n  GameState,\n  PointNodeRef,\n} from '../../data/GameState';\nimport {\n  PointNodeComponent,\n  PointNodeComponentProps,\n} from './PointNodeComponent';\nimport { UpdaterGeneratorType2 } from '../../lib/util/updaterGenerator';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { PixiPointFrom } from '../../lib/pixi/pixify';\nimport { engageLifecycle, LifecycleHandlerBase } from './LifecycleHandler';\nimport { RootComponentState } from './RootComponent';\nimport { PointNodeTextureSet } from '../textures/PointNodeTexture';\n\nexport class RenderedChunkConstants {\n  //   public static SPACING_PX: number = 24;\n  //   public static CHUNK_SPACING_PX: number = (ChunkGenConstants.CHUNK_DIM + 0.5) * RenderedChunkConstants.SPACING_PX;\n  //   public static NODE_SIZE_PX: number = 14;\n  //   public static NODE_HITAREA_PX: number = 18;\n  public static SPACING_PX: number = 36;\n  public static CHUNK_SPACING_PX: number =\n    (ChunkGenConstants.CHUNK_DIM + 0.0) * RenderedChunkConstants.SPACING_PX;\n  public static NODE_SIZE_PX: number = 22;\n  public static NODE_HITAREA_PX: number =\n    RenderedChunkConstants.NODE_SIZE_PX + 4;\n  public static NODE_ROUNDED_PX: number = 4;\n}\n\ntype Props = {\n  delta: number;\n  args: {\n    pointNodeTexture: PointNodeTextureSet;\n    markForceUpdate: (childInstance: any) => void;\n  };\n  selfChunkRef: ChunkRef;\n  updaters: UpdaterGeneratorType2<GameState>;\n  tooltipUpdaters: UpdaterGeneratorType2<RootComponentState>['tooltip'];\n  position: Vector2;\n  chunkGen: ChunkGen;\n  selectedPointNode: PointNodeRef | undefined;\n  allocatedPointNodeSubset: HashSet<PointNodeRef>;\n};\n\ntype State = {};\n\nclass ChunkComponent2 extends LifecycleHandlerBase<Props, State> {\n  public container: Pixi.Container;\n  public state: State;\n\n  public children: KeyedHashMap<PointNodeRef, PointNodeComponent>;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {};\n    this.container = new Pixi.Container();\n    this.children = new KeyedHashMap();\n\n    this.resyncChildren(props);\n  }\n\n  protected renderSelf(props: Props) {\n    this.container.position = PixiPointFrom(props.position);\n  }\n\n  protected shouldUpdate(\n    prevProps: Props,\n    prevState: State,\n    props: Props,\n    state: State\n  ): boolean {\n    // return true;\n    for (let key of Object.keys(prevProps) as (keyof Props)[]) {\n      if (key === 'delta' || key === 'args' || key === 'updaters') {\n        continue;\n      }\n      if (key === 'position') {\n        if (!prevProps[key].equals(props[key])) {\n          console.log(`chunk shouldUpdate differed in ${key}, returning true`);\n          return true;\n        } else {\n          continue;\n        }\n      }\n      if (key === 'selectedPointNode') {\n        if (prevProps[key]?.hash() !== props[key]?.hash()) {\n          console.log(`chunk shouldUpdate differed in ${key}, returning true`);\n          return true;\n        } else {\n          continue;\n        }\n      }\n      if (key === 'selfChunkRef') {\n        if (prevProps[key]?.hash() !== props[key]?.hash()) {\n          console.log(`chunk shouldUpdate differed in ${key}, returning true`);\n          return true;\n        } else {\n          continue;\n        }\n      }\n      if (key === 'allocatedPointNodeSubset') {\n        // subsets could be different objects but have the same contents\n        if (!prevProps[key].equals(props[key])) {\n          // console.log(`prevProps: ${JSON.stringify(prevProps[key])}`);\n          // console.log(`props: ${JSON.stringify(props[key])}`);\n          console.log(`chunk shouldUpdate differed in ${key}, returning true`);\n          return true;\n        } else {\n          continue;\n        }\n      }\n      if (prevProps[key] !== props[key]) {\n        console.log(`chunk shouldUpdate differed in ${key}, returning true`);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private resyncChildren(props: Props) {\n    let childrenToDelete = this.children.clone(); // track which children need to be destroyed according to new props\n    console.log(`chunk component upsert children got here`);\n    // console.log(`chunk component upsert children has ${this.children.size()} children`);\n\n    for (let [\n      pointNodeCoord,\n      pointNodeGen,\n    ] of props.chunkGen.pointNodes.entries()) {\n      const pointNodeRef = new PointNodeRef({\n        z: props.selfChunkRef.z,\n        chunkCoord: props.selfChunkRef.chunkCoord,\n        pointNodeCoord: pointNodeCoord,\n        pointNodeId: pointNodeGen.id,\n      });\n      let childPropsFactory = (\n        props: Props,\n        state: State\n      ): PointNodeComponentProps => {\n        return {\n          delta: props.delta,\n          args: {\n            pointNodeTexture: props.args.pointNodeTexture,\n            markForceUpdate: this.markForceUpdate,\n            position: pointNodeRef.pointNodeCoord.multiply(\n              RenderedChunkConstants.SPACING_PX\n            ),\n          },\n          selfPointNodeRef: pointNodeRef,\n          updaters: props.updaters,\n          tooltipUpdaters: props.tooltipUpdaters,\n          pointNodeGen,\n          isSelected:\n            props.selectedPointNode?.pointNodeId === pointNodeRef.pointNodeId,\n          isAllocated: props.allocatedPointNodeSubset.contains(pointNodeRef),\n        };\n      };\n      const childKey = pointNodeRef;\n\n      let childComponent = this.children.get(childKey);\n      if (childComponent) {\n        // childComponent.update(childPropsFactory(props, this.state));\n        childrenToDelete.remove(childKey);\n      } else {\n        childComponent = new PointNodeComponent(\n          childPropsFactory(props, this.state)\n        );\n        this.children.put(pointNodeRef, childComponent);\n        // this.container.addChild(childComponent.container);\n        this.addChild({\n          childClass: PointNodeComponent,\n          instance: childComponent,\n          propsFactory: childPropsFactory,\n        });\n      }\n    }\n    console.log(\n      `chunk component to delete has ${childrenToDelete.size()} children`\n    );\n    for (let [childKey, childComponent] of childrenToDelete.entries()) {\n      // childComponent.willUnmount();\n      this.children.remove(childKey);\n      // this.container.removeChild(childComponent.container);\n      this.removeChild(childComponent);\n    }\n  }\n\n  protected updateChildren(props: Props) {\n    this.resyncChildren(props);\n  }\n\n  protected didForceUpdateChild(instance: LifecycleHandlerBase<any, any>) {\n    // IMPORTANT! this is intended to raise the child that asked for a force update to the top so it isn't covered\n    // by other sibling pixi containers. however this code doesnt work well during the update call, for some reason (not sure why)\n    this.container.removeChild(instance.container);\n    this.container.addChild(instance.container);\n  }\n}\n\nconst wrapped = engageLifecycle(ChunkComponent2);\n// eslint-disable-next-line\ntype wrapped = ChunkComponent2;\nexport { wrapped as ChunkComponent };\nexport type { Props as ChunkComponentProps };\n","import { HashMap, KeyedHashMap } from './data_structures/hash';\nimport { Const } from './misc';\n\n/**\n * Class representing a value which is only computed when used.\n *\n * Usage: const lazy = new Lazy(() => thingThatReturnsSomething()).\n * Then thingThatReturnsSomething() will only get called on the first time lazy.get() is called.\n * On the second and subsequent times, lazy.get() will return the same object - the factory method is not called again.\n */\nexport class Lazy<T> {\n  private _wasConstructed: boolean = false;\n  private _value: T | undefined = undefined;\n  private _factory: () => T;\n\n  constructor(\n    factory: () => T\n    // structure?: T extends { [key: string]: any } ? T : void\n  ) {\n    this._factory = factory;\n  }\n  public get(): T {\n    // T might have undefined as a valid value\n    if (this._value !== undefined || this._wasConstructed === true) {\n      return this._value!;\n    } else {\n      this._value = this._factory();\n      this._wasConstructed = true;\n      return this._value;\n    }\n  }\n  public wasConstructed(): boolean {\n    return this._wasConstructed;\n  }\n  // public async getAsync(): Promise<T> {\n  //   if (this._value !== undefined || this._wasConstructed === true) {\n  //     return Promise.resolve(this._value!);\n  //   } else {\n  //     return new Promise<T>((resolve, reject) => {\n  //       this._value = this._factory();\n  //       this._wasConstructed = true;\n  //       resolve(this._value);\n  //     });\n  //   }\n  // }\n}\n\nexport function LazyProxy<\n  T extends { [key: string]: any } | { [i: number]: any }\n>(factory: () => T): Const<T> {\n  return (new Proxy(new Lazy(factory), {\n    get: (target, property, receiver) => {\n      if (property === 'toJSON') {\n        return () => {\n          if (target.wasConstructed()) {\n            return target.get();\n          } else {\n            return '[Object Lazy]';\n          }\n        };\n      }\n      const targetValue = target.get();\n      return Reflect.get(targetValue, property);\n    },\n    ownKeys: (target) => {\n      const targetValue = target.get();\n      return Reflect.ownKeys(targetValue);\n    },\n    getOwnPropertyDescriptor: (target, property) => {\n      /**\n       * https://stackoverflow.com/questions/40352613/why-does-object-keys-and-object-getownpropertynames-produce-different-output\n       */\n\n      return Object.getOwnPropertyDescriptor(target.get(), property);\n    },\n    has: (target, property) => {\n      // This is called when iterating over array i.e. array.forEach()\n      return property in target.get();\n    },\n  }) as unknown) as Const<T>;\n}\n\n/**\n * Similar to HashMap, except it allows setting a factory function to be used for missing keys.\n * Also memoizes the result.\n *\n * NOTE: this assume hash() is a strong test for equality, i.e. 2 objects are considered equal if and only if their hashes are the same!!!\n */\nexport class LazyHashMap<K extends { hash(): string }, V> {\n  protected _values: KeyedHashMap<K, V>;\n  protected _factory: (k: K) => V;\n\n  constructor(factory: (k: K) => V) {\n    this._values = new KeyedHashMap();\n    this._factory = factory;\n  }\n\n  // setFactory(factory: (k: K) => V) : LazyHashMap<K, V> {\n  //   this._factory = factory;\n  //   return this;\n  // }\n\n  put(key: K, value: V) {\n    this._values.put(key, value);\n  }\n\n  // remove(key: K): void {\n  //   this._values.remove(key);\n  // }\n\n  peek(key: K): V | undefined {\n    return this._values.get(key);\n  }\n\n  get(key: K): V {\n    if (this._values.contains(key)) {\n      return this._values.get(key)!;\n    } else {\n      const value = this._factory(key);\n      this._values.put(key, value);\n      return value;\n    }\n  }\n\n  precompute(key: K) {\n    if (this._values.contains(key)) {\n      return;\n    } else {\n      const value = this._factory(key);\n      this._values.put(key, value);\n    }\n  }\n\n  // returns true if the key was already instantiated\n  contains(key: K): boolean {\n    return this._values.contains(key);\n  }\n\n  values(): V[] {\n    return this._values.values();\n  }\n\n  keys(): K[] {\n    return this._values.keys();\n  }\n\n  entries(): [K, V][] {\n    return this._values.entries();\n  }\n\n  // *[Symbol.iterator]() {\n  //   // construct a new iterator. note that as usual editing the object during iteration is not supported\n  //   for (let key of Object.keys(this._values)) {\n  //     yield key;\n  //   }\n  // }\n\n  // hashes only the keys - use HashableHashMap if you know that the value type here is also hashable\n  // hashKeyset(): string {\n  //   const hashes: number[] = Object.keys(this._values).map(s => hashCode(s));\n  //   let code: number = hashes.reduce((pv, cv) => pv + cv);\n  //   return code.toString();\n  // }\n\n  size(): number {\n    return this._values.size();\n  }\n\n  clone(): LazyHashMap<K, V> {\n    let n = new LazyHashMap<K, V>(this._factory);\n    n._values = this._values.clone();\n    return n;\n  }\n}\n/*\nexport class LazyHashSet<K extends { hash(): string }> {\n  private _values: LazyHashMap<K, boolean>;\n\n  constructor(factory: (k: K) => boolean, initialValues: K[] = []) {\n    this._values = new LazyHashMap<K, boolean>(factory);\n\n    for (const value of initialValues) {\n      this.put(value);\n    }\n  }\n\n  // remove(key: K): void {\n  //   this._values.remove(key);\n  // }\n\n  put(key: K): void {\n    this._values.put(key, true);\n  }\n\n  get(key: K): boolean {\n    return this._values.get(key) !== undefined;\n  }\n\n  contains(key: K): boolean {\n    return this._values.contains(key);\n  }\n\n  values(): K[] {\n    return this._values.values();\n  }\n\n  // hash(): string {\n  //   return this._values.hashKeyset();\n  // }\n\n  clone(): HashSet<K> {\n    let n = new HashSet<K>();\n    n._values = this._values.clone();\n    return n;\n  }\n\n  size(): number {\n    return this._values.size();\n  }\n\n  equals(other: HashSet<K> | undefined | null) {\n    if (other === undefined || other === null) {\n      return false;\n    }\n\n    if (this.size() !== other.size()) {\n      return false;\n    }\n\n    for (let k of this.values()) {\n      if (!other.contains(k)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // *[Symbol.iterator]() {\n  //   // construct a new iterator. note that as usual\n  //   for (let key of Object.keys(this._values)) {\n  //     yield key;\n  //   }\n  // }\n}\n*/\n","import * as Pixi from 'pixi.js';\nimport { GameState } from '../../data/GameState';\nimport {\n  computeQuestEfficiencyPercent,\n  remapQuestEfficiencyToDisplayable,\n} from '../../game/EfficiencyCalculator';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { Const } from '../../lib/util/misc';\nimport { EfficiencyBarComponent } from './EfficiencyBarComponent';\nimport { FpsComponent } from './FpsComponent';\nimport { engageLifecycle, LifecycleHandlerBase } from './LifecycleHandler';\nimport { ReticleComponent } from './ReticleComponent';\nimport { TooltipComponent, TooltipInfo } from './TooltipComponent';\n\ntype Props = {\n  args: {\n    renderer: Pixi.Renderer;\n    markForceUpdate: (childInstance: any) => void;\n  };\n  delta: number;\n  gameState: Const<GameState>;\n  appSize: Vector2;\n  tick: number;\n  tooltip: TooltipInfo;\n};\n\ntype State = {};\n\nclass FixedCameraStageComponent extends LifecycleHandlerBase<Props, State> {\n  public container: Pixi.Container;\n  public state: State;\n\n  constructor(props: Props) {\n    super(props);\n    this.container = new Pixi.Container();\n    this.container.sortableChildren = true;\n    this.state = {};\n  }\n\n  protected renderSelf(props: Props) {}\n}\n\nconst wrapped = engageLifecycle(FixedCameraStageComponent);\n// eslint-disable-next-line\ntype wrapped = FixedCameraStageComponent;\nexport { wrapped as FixedCameraStageComponent };\nexport type { Props as FixedCameraStageComponentProps };\n","import * as Pixi from 'pixi.js';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { ChunkGenConstants, GameState, IntentName } from '../../data/GameState';\nimport {\n  generatePointNodeTexture,\n  PointNodeTextureSet,\n} from '../textures/PointNodeTexture';\nimport { ZLevelGenFactory } from '../../game/WorldGenStateFactory';\nimport { Const } from '../../lib/util/misc';\nimport { Lazy } from '../../lib/util/lazy';\nimport { UpdaterGeneratorType2 } from '../../lib/util/updaterGenerator';\nimport { ZLevelComponent, ZLevelComponentProps } from './ZLevelComponent';\nimport { engageLifecycle, LifecycleHandlerBase } from './LifecycleHandler';\nimport { FixedCameraStageComponent } from './FixedCameraStageComponent';\nimport { TooltipInfo } from './TooltipComponent';\nimport COLORS from '../colors';\n\ntype State = {\n  pointNodeTexture: Lazy<PointNodeTextureSet>;\n  tick: number;\n  playerCurrentZ: number;\n  tooltip: TooltipInfo;\n};\n\ntype Props = {\n  args: {\n    renderer: Pixi.Renderer;\n    markForceUpdate: (childInstance: any) => void;\n  };\n  updaters: UpdaterGeneratorType2<GameState>;\n  delta: number;\n  gameState: Const<GameState>;\n  appSize: Vector2;\n};\n\nclass RootComponent2 extends LifecycleHandlerBase<Props, State> {\n  public container: Pixi.Container;\n  public state: State;\n  private stateUpdaters: UpdaterGeneratorType2<State>;\n  protected fireStateUpdaters: () => void;\n\n  /* children */\n  // Contains HUD, and other entities that don't move when game camera moves\n  private fixedCameraStage: FixedCameraStageComponent;\n  // Contains game entities that move when game camera pans/zooms. Highly encouraged to have further subdivions.\n  private actionStage: Pixi.Container;\n  // Contains a few entities that doesn't move when game camera moves, but located behind action stage entities, e.g. static backgrounds\n  private backdropStage: Pixi.Container;\n  // public keyboard: KeyboardState;\n  private backdrop: Pixi.Graphics;\n\n  constructor(props: Props) {\n    super(props);\n    this.container = new Pixi.Container();\n    this.container.sortableChildren = true;\n    ({\n      state: this.state,\n      stateUpdaters: this.stateUpdaters,\n      fireStateUpdaters: this.fireStateUpdaters,\n    } = this.useState<State, RootComponent2>(this, {\n      pointNodeTexture: new Lazy(() =>\n        generatePointNodeTexture(props.args.renderer)\n      ),\n      tick: 0,\n      playerCurrentZ: 0,\n      tooltip: {\n        visible: false,\n        position: undefined,\n        text: '',\n      },\n    }));\n\n    const fixedCameraStagePropsFactory = (props: Props, state: State) => {\n      return {\n        args: {\n          renderer: props.args.renderer,\n          markForceUpdate: this.markForceUpdate,\n        },\n        delta: props.delta,\n        gameState: props.gameState,\n        appSize: props.appSize,\n        tick: state.tick,\n        tooltip: { ...state.tooltip },\n      };\n    };\n    this.fixedCameraStage = new FixedCameraStageComponent(\n      fixedCameraStagePropsFactory(props, this.state)\n    );\n    this.addChild({\n      childClass: FixedCameraStageComponent,\n      instance: this.fixedCameraStage,\n      propsFactory: fixedCameraStagePropsFactory,\n    });\n\n    this.actionStage = new Pixi.Sprite();\n    this.actionStage.zIndex = 0;\n    this.actionStage.sortableChildren = true;\n    this.container.addChild(this.actionStage);\n\n    this.backdropStage = new Pixi.Sprite();\n    this.backdropStage.zIndex = -1;\n    this.backdropStage.sortableChildren = true;\n    this.container.addChild(this.backdropStage);\n\n    this.backdrop = new Pixi.Graphics();\n    this.backdropStage.addChild(this.backdrop);\n    this.backdrop.beginFill(COLORS.backgroundBlue, 1);\n    // backdrop.alpha = 0.5; // if alpha == 0, Pixi does not register this as a hittable area\n    this.backdrop.interactive = true;\n    // backdrop.interactiveChildren = true; // not sure what this does\n    this.backdrop.drawRect(0, 0, props.appSize.x, props.appSize.y);\n  }\n\n  protected updateSelf(props: Props) {\n    this.state.tick++;\n  }\n\n  protected renderSelf(props: Props) {\n    this.backdrop.width = props.appSize.x;\n    this.backdrop.height = props.appSize.y;\n  }\n\n  protected didMount() {\n    const { updaters } = this._staleProps;\n  }\n\n  protected didUpdate() {\n    const { updaters } = this._staleProps;\n  }\n}\n\nconst wrapped = engageLifecycle(RootComponent2);\n// eslint-disable-next-line\ntype wrapped = RootComponent2;\nexport { wrapped as RootComponent };\nexport type { Props as RootComponentProps, State as RootComponentState };\n","import * as Pixi from 'pixi.js';\nimport COLORS from '../colors';\nimport { RenderedChunkConstants } from '../components/ChunkComponent';\n\nexport type PointNodeTextureSet = {\n  cropFraction: number;\n  texture: Pixi.Texture;\n}[];\n\nexport function generatePointNodeTexture(\n  renderer: Pixi.Renderer\n): PointNodeTextureSet {\n  // generate sprite textures for 0 to 100% vertical cropped in increments of 1/8\n  let textureSet: PointNodeTextureSet = [];\n  for (let i = 0; i <= 8; i++) {\n    const cropFraction = i / 8;\n    let g = new Pixi.Graphics();\n    g.beginFill(COLORS.white);\n    g.drawRoundedRect(\n      -RenderedChunkConstants.NODE_SIZE_PX / 2,\n      -RenderedChunkConstants.NODE_SIZE_PX / 2,\n      RenderedChunkConstants.NODE_SIZE_PX,\n      RenderedChunkConstants.NODE_SIZE_PX,\n      RenderedChunkConstants.NODE_ROUNDED_PX\n    );\n    let mask = new Pixi.Graphics();\n    mask.beginFill(COLORS.black);\n    mask.drawRect(\n      -RenderedChunkConstants.NODE_SIZE_PX / 2,\n      -RenderedChunkConstants.NODE_SIZE_PX / 2,\n      RenderedChunkConstants.NODE_SIZE_PX,\n      RenderedChunkConstants.NODE_SIZE_PX * cropFraction\n    );\n    g.mask = mask;\n    // g.x = 200;\n    // g.y = 200;\n    // this.app.stage.addChild(g);\n    // let texture = renderer.generateTexture(g, Pixi.SCALE_MODES.NEAREST, 1);\n    let texture = renderer.generateTexture(g, Pixi.SCALE_MODES.LINEAR, 1);\n    // const sprite = new Pixi.Sprite(texture);\n    // sprite.x = 300;\n    // sprite.y = 300;\n    // this.app.stage.addChild(sprite);\n    textureSet.push({\n      cropFraction,\n      texture,\n    });\n  }\n  return textureSet;\n}\n","import * as Pixi from 'pixi.js';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { GameState, WindowState } from '../data/GameState';\n// eslint-disable-next-line\nimport { assertOnlyCalledOnce, Const } from '../lib/util/misc';\nimport { RootComponent } from './components/RootComponent';\nimport { UpdaterGeneratorType2 } from '../lib/util/updaterGenerator';\nimport COLORS from './colors';\nimport createBunnyExample from './BunnyExample';\n\ntype Props = {\n  args: {\n    fireBatch: () => void;\n    isSecondConstructorCall: boolean;\n  };\n  updaters: UpdaterGeneratorType2<GameState>; // aka updaters\n  gameState: Const<GameState>;\n};\n\ntype State = {\n  appSize: Vector2;\n  originalAppSize: Vector2;\n};\n\nfunction appSizeFromWindowSize(window?: Const<Vector2>): Vector2 {\n  return new Vector2({\n    x: Math.min(1920, (window?.x || Infinity) - 24),\n    y: Math.min(1080, (window?.y || Infinity) - 24),\n  });\n}\n\n/**\n * Pixi side of a pixi-react bridge. This class owns a pixi application and receives props updates from react by way of rerender().\n * Those props updates do not apply immediately but are queued up and apply all at once on the next tick in the baseGameLoop().\n * Kicks off the pixi component lifecycle handling by updating props on Pixi RootComponent.\n */\nexport class PixiReactBridge {\n  public app!: Pixi.Application;\n\n  state!: State;\n  props!: Props;\n\n  rootComponent: RootComponent | undefined;\n  onTick!: (d: number) => void;\n\n  /**\n   * NOTE: for lifecycle convenience, we allow initializing with essentially empty props, and to finish the initialization\n   * lazily at the first rerender() call\n   * NOTE: this causes an annoying flash since we don't know the initial window size\n   */\n  constructor(props?: Props, isSecondConstructorCall: boolean = false) {\n    // verify that we are not loading this twice when we expect to load it only once -- bad for performance!!\n    if (!(props?.args?.isSecondConstructorCall || isSecondConstructorCall)) {\n      // assertOnlyCalledOnce(\"Pixi react bridge constructor\"); // annoying with react hot reload, disable for now}\n    }\n\n    let appSize = new Vector2(800, 600);\n    this.state = {\n      appSize,\n      originalAppSize: appSize,\n    };\n\n    this.app = new Pixi.Application({\n      width: this.state.appSize.x,\n      height: this.state.appSize.y,\n      antialias: true, // both about the same FPS, i get around 30 fps on 1600 x 900\n      transparent: true, // true -> better fps?? https://github.com/pixijs/pixi.js/issues/5580\n      resolution: window.devicePixelRatio || 1, // lower -> more FPS but uglier\n      // resolution: 0.5,\n      // resolution: 2,\n      autoDensity: true,\n      powerPreference: 'low-power', // the only valid one for webgl\n      backgroundColor: COLORS.white, // immaterial - we recommend setting color in backdrop graphics\n    });\n\n    // test\n    // createBunnyExample({ parent: this.app.stage, ticker: this.app.ticker, x: this.app.screen.width / 2, y: this.app.screen.height / 2 });\n  }\n\n  public pause() {\n    this.app.ticker.remove(this.onTick);\n  }\n  public destroy() {\n    this.app.destroy(true, {\n      children: true,\n      texture: true,\n      baseTexture: true,\n    });\n  }\n\n  public didMount() {\n    this.onTick = (delta) => this.baseGameLoop(delta);\n    this.onTick = this.onTick.bind(this);\n    this.app.ticker.add(this.onTick);\n  }\n\n  /**\n   * Please only call once!!\n   * Usage: const container = useRef<HTMLDivElement>(null); useEffect(() => { application.register(container.current!); }, []);\n   */\n  public register(curr: HTMLDivElement) {\n    curr.appendChild(this.app.view);\n  }\n\n  updateSelf(props: Props) {\n    this.state.appSize = appSizeFromWindowSize(\n      new Vector2(\n        props.gameState.windowState.innerWidth,\n        props.gameState.windowState.innerHeight\n      )\n    );\n    // console.log({ tick: props.gameState.tick });\n    props.updaters.tick.enqueueUpdate((it) => it + 1);\n  }\n\n  // shim, called from react, possibly many times , possibly at any time, including during the baseGameLoop below\n  // props should be a referentially distinct object from props the last time this was called\n  rerender(props: Props) {\n    // console.log(\"base app rerender called\", { playerUI: props.gameState.playerUI });\n    this.props = props;\n    if (!this.rootComponent) {\n      // finish initialization\n      this.rootComponent = new RootComponent({\n        args: {\n          renderer: this.app.renderer,\n          markForceUpdate: () => {},\n        },\n        updaters: this.props.updaters,\n        delta: 0,\n        gameState: this.props.gameState,\n        appSize: this.state.appSize,\n      });\n      this.app.stage.addChild(this.rootComponent.container);\n\n      this.renderSelf(this.props);\n\n      // test\n      // createBunnyExample({ parent: this.app.stage, ticker: this.app.ticker, x: this.app.screen.width / 2, y: this.app.screen.height / 2 });\n      this.didMount();\n    }\n  }\n\n  renderSelf(props: Props) {\n    this.app.renderer.resize(this.state.appSize.x, this.state.appSize.y);\n  }\n\n  baseGameLoop(delta: number) {\n    if (this.props.gameState.playerUI.isPixiHidden) {\n      this.updateSelf(this.props);\n      // console.log('skipping update since pixi is not visible');\n      this.props.args.fireBatch(); // fire enqueued game state updates, which should come back from react in the rerender()\n      return; // skip update loop if pixi is hidden\n    }\n    // assume props is up to date\n    this.updateSelf(this.props);\n    // send props downwards\n    this.rootComponent?.update({\n      args: {\n        renderer: this.app.renderer,\n        markForceUpdate: () => {},\n      },\n      updaters: this.props.updaters,\n      delta,\n      gameState: this.props.gameState,\n      appSize: this.state.appSize,\n    });\n\n    this.renderSelf(this.props);\n    this.props.args.fireBatch(); // fire enqueued game state updates, which should come back from react in the rerender()\n  }\n}\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { UseGameStateContext } from '../contexts';\nimport { PixiReactBridge } from '../pixi/PixiReactBridge';\nimport { WindowState } from '../data/GameState';\nimport { Lazy } from '../lib/util/lazy';\n\nconst initialApplication = new Lazy(() => new PixiReactBridge());\n\n/**\n * React side of a pixi-react bridge. This react component owns the div which own the canvas element,\n * and send rerender props updates to pixi application when react causes state to be updated.\n */\nexport function PixiWrapperComponent(props: { hidden: boolean }) {\n  const [application, setApplication] = useState(initialApplication.get());\n  const container = useRef<HTMLDivElement>(null);\n  const [gameState, gameStateUpdaters, fireBatchedSetGameState] = useContext(\n    UseGameStateContext\n  );\n\n  useEffect(() => {\n    // remove old application if it exists\n    for (let i = container.current!.childNodes.length - 1; i >= 0; i--) {\n      container.current!.removeChild(container.current!.childNodes[i]);\n    }\n    // add the application\n    container.current!.appendChild(application.app.view);\n  }, [application]);\n\n  // Trigger component render on first load and also when game state is updated\n  application.rerender({\n    args: {\n      fireBatch: fireBatchedSetGameState,\n      isSecondConstructorCall: false,\n    },\n    updaters: gameStateUpdaters,\n    gameState,\n  });\n\n  return (\n    <>\n      <div ref={container} hidden={props.hidden} style={{}} />\n    </>\n  );\n}\n","import React from 'react';\nimport UAParser from 'ua-parser-js';\nimport {\n  GameState,\n  IntentName,\n  PlayerIntentState,\n  WindowState,\n} from '../data/GameState';\nimport { UpdaterGeneratorType2 } from '../lib/util/updaterGenerator';\n\ntype Props = {\n  updaters: UpdaterGeneratorType2<WindowState, GameState>;\n};\n\ntype State = {};\n\n// TODO(bowei): on mobile, for either ios or android, when in portrait locked orientation, we want to serve a landscape\n// experience - similar to a native app which is landscape locked.\n// (on mobile in already landscape orientation, and in all desktop, serve ordinary orientation.)\n// also note that android webapp supports manifest.json setting orientation, but not in the browser\n// FOR NOW - ignore this\n// https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Managing_screen_orientation\n// https://stackoverflow.com/questions/14360581/force-landscape-orientation-mode\nconst browser = new UAParser().getBrowser();\nlet forceRotate = false;\nif (\n  browser.name === 'Mobile Safari' &&\n  window.innerWidth < window.innerHeight\n) {\n  forceRotate = true;\n}\n//     <div className={classnames({ App: true, \"force-landscape\": forceRotate })}>\n/*\n.force-landscape {\n  transform: rotate(90deg);\n}\n*/\n\n/**\n * Empty react element with listeners for window changes.\n */\nexport class WindowListenerComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  // NOTE(bowei): does using e.repeat here break when window loses focus??\n  handleWindowResize = (e: any) => {\n    this.props.updaters.enqueueUpdate((old) => {\n      // console.log(\"executing window state update in window onresize in app\");\n      old.innerWidth = window.innerWidth;\n      old.innerHeight = window.innerHeight;\n      return { ...old };\n    });\n  };\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowResize);\n  }\n  render() {\n    return <> </>;\n  }\n}\n","import { HashSet } from '../../lib/util/data_structures/hash';\nimport { IVector3, Vector3 } from '../../lib/util/geometry/vector3';\n\nexport enum Direction {\n  NORTHWEST = 'NORTHWEST',\n  SOUTHWEST = 'SOUTHWEST',\n  NORTHEAST = 'NORTHEAST',\n  SOUTHEAST = 'SOUTHEAST',\n  EAST = 'EAST',\n  WEST = 'WEST',\n  UP = 'UP',\n  DOWN = 'DOWN',\n}\n\n/**\n * Moving 1 unit of grid on a z level corresponds to moving this many units of grid in the same direction on the z level below.\n */\nconst PER_Z_SCALE_FACTOR = 6;\n\n/**\n *   2   3\n * 4 - O - 1\n *   6   5\n * x-axis is along 0 -> 1\n * y-axis is along 0 -> 2\n * z-axis is vertical\n *\n * @param base 0\n */\nexport function getCoordNeighbors(\n  base: Vector3\n): { [d in Direction]?: Vector3 } {\n  let neighbors: { [d in Direction]?: Vector3 } = {} as any;\n\n  neighbors.EAST = base.addX(1);\n  neighbors.WEST = base.addX(-1);\n  neighbors.NORTHWEST = base.addY(1);\n  neighbors.SOUTHEAST = base.addY(-1);\n  neighbors.NORTHEAST = base.add(1, 1, 0);\n  neighbors.SOUTHWEST = base.add(-1, -1, 0);\n\n  neighbors.DOWN = base\n    .multiply(new Vector3(PER_Z_SCALE_FACTOR, PER_Z_SCALE_FACTOR, 1))\n    .addZ(-1);\n\n  if (base.x % PER_Z_SCALE_FACTOR === 0 && base.y % PER_Z_SCALE_FACTOR === 0) {\n    neighbors.UP = base\n      .divide(new Vector3(PER_Z_SCALE_FACTOR, PER_Z_SCALE_FACTOR, 1))\n      .addZ(1);\n  }\n\n  return neighbors;\n}\n\nexport type IReadonlySet<K> = {\n  contains: (k: K) => boolean;\n};\n\n/**\n *\n * @param base\n * @param maxDistance\n * @param minDistance\n * @returns all vector3 coords that are <= maxDistance and >= minDistance.\n */\nexport function getWithinDistance(\n  base: Vector3,\n  maxDistance: number,\n  minDistance?: number,\n  disallowedSet?: IReadonlySet<Vector3>\n): Vector3[] {\n  let touched: HashSet<Vector3> = new HashSet();\n  let disallowedButTouched: HashSet<Vector3> = new HashSet();\n  touched.put(base);\n  const byDist: Vector3[][] = [[base]];\n\n  for (let d = 1; d <= maxDistance; d++) {\n    byDist.push([]);\n    for (let vec of byDist[d - 1]) {\n      const considering = Object.values(getCoordNeighbors(vec));\n      for (const n of considering) {\n        if (!n) continue;\n        if (touched.get(n)) continue;\n\n        if (disallowedSet?.contains(n)) {\n          disallowedButTouched.put(n);\n        } else {\n          touched.put(n);\n          byDist[d].push(n);\n        }\n      }\n    }\n  }\n\n  let result: Vector3[] = [];\n  for (let dd = minDistance || 0; dd <= maxDistance; dd++) {\n    result = result.concat(byDist[dd]);\n  }\n  result = result.concat(disallowedButTouched.values());\n  return result;\n}\n","import { LockStatus } from '../components/GameArea/GameAreaComponent';\nimport {\n  WorldGenState,\n  ChunkGen,\n  PointNodeGen,\n  ChunkGenConstants,\n  ZLevelGen,\n  ResourceType,\n  ResourceModifier,\n  ResourceNontrivialType,\n} from '../data/GameState';\nimport { LockData } from '../data/PlayerSaveState';\nimport { NodeType } from '../data/WorldGenState';\nimport { HashSet, KeyedHashMap } from '../lib/util/data_structures/hash';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { Vector3 } from '../lib/util/geometry/vector3';\nimport { INTMAX32, squirrel3 } from '../lib/util/random';\n\nexport type WorldGenStateConfig = any;\n\nexport class WorldGenStateFactory {\n  public config: WorldGenStateConfig;\n\n  constructor(config: WorldGenStateConfig) {\n    this.config = config;\n  }\n\n  public create(): WorldGenState {\n    throw Error();\n  }\n}\n\nexport type ZLevelGenConfig = any;\n\nexport class ZLevelGenFactory {\n  public config: ZLevelGenConfig;\n  public chunkGenFactory: ChunkGenFactory;\n\n  constructor(config: ZLevelGenConfig) {\n    this.config = config;\n    this.chunkGenFactory = new ChunkGenFactory({});\n  }\n\n  public create(args: {\n    seed: number;\n    z: number;\n    startingChunks?: number;\n  }): ZLevelGen {\n    const id = squirrel3(args.seed + args.z);\n    const chunks: KeyedHashMap<Vector2, ChunkGen> = new KeyedHashMap();\n\n    const max = args.startingChunks || 3;\n    // TODO(bowei): generate more chunks??\n    for (let i = -max; i <= max; i++) {\n      for (let j = -max; j <= max; j++) {\n        let location = new Vector2(i, j);\n        chunks.put(\n          location,\n          this.chunkGenFactory.create({ seed: id, location, z: args.z })\n        );\n      }\n    }\n\n    return { id, chunks };\n  }\n}\n\nexport type ChunkGenConfig = any;\n\nexport class ChunkGenFactory {\n  public config: ChunkGenConfig;\n  public pointNodeGenFactory: PointNodeGenFactory;\n\n  constructor(config: ChunkGenConfig) {\n    this.config = config;\n    this.pointNodeGenFactory = new PointNodeGenFactory({});\n  }\n\n  public create(args: {\n    seed: number;\n    location: Vector2;\n    z: number;\n  }): ChunkGen {\n    const id = squirrel3(\n      args.seed + squirrel3(args.seed + args.location.x) + args.location.y\n    );\n    const pointNodes: KeyedHashMap<Vector2, PointNodeGen> = new KeyedHashMap();\n\n    let droppedNodes: HashSet<Vector2> = new HashSet();\n    for (\n      let i = -ChunkGenConstants.CHUNK_HALF_DIM;\n      i <= ChunkGenConstants.CHUNK_HALF_DIM;\n      i++\n    ) {\n      for (\n        let j = -ChunkGenConstants.CHUNK_HALF_DIM;\n        j <= ChunkGenConstants.CHUNK_HALF_DIM;\n        j++\n      ) {\n        if (i === 0 && j === 0) {\n          continue;\n        }\n        // 4 way symmetry plz\n        if (\n          squirrel3(id + i * ChunkGenConstants.CHUNK_DIM + j) / INTMAX32 <\n          ChunkGenConstants.DROP_NODES_CHANCE / 4\n        ) {\n          droppedNodes.put(new Vector2(i, j));\n          droppedNodes.put(new Vector2(j, -i));\n          droppedNodes.put(new Vector2(-i, -j));\n          droppedNodes.put(new Vector2(-j, i));\n        }\n      }\n    }\n\n    for (\n      let i = -ChunkGenConstants.CHUNK_HALF_DIM;\n      i <= ChunkGenConstants.CHUNK_HALF_DIM;\n      i++\n    ) {\n      for (\n        let j = -ChunkGenConstants.CHUNK_HALF_DIM;\n        j <= ChunkGenConstants.CHUNK_HALF_DIM;\n        j++\n      ) {\n        let loc = new Vector2(i, j);\n        if (!droppedNodes.get(loc)) {\n          pointNodes.put(\n            loc,\n            this.pointNodeGenFactory.create({\n              seed: id,\n              location: loc,\n              chunk: args.location,\n              z: args.z,\n            })\n          );\n        }\n      }\n    }\n\n    return { id, pointNodes };\n  }\n}\n\ntype PointNodeGenConfig = {};\n\nexport class PointNodeGenFactory {\n  public config: PointNodeGenConfig;\n\n  constructor(config: PointNodeGenConfig) {\n    this.config = config;\n  }\n\n  public create(args: {\n    seed: number;\n    location: Vector2;\n    chunk: Vector2;\n    z: number;\n  }): PointNodeGen {\n    const id = squirrel3(\n      args.seed + squirrel3(args.seed + args.location.x) + args.location.y\n    );\n\n    let randomFloat = squirrel3(id + 1) / INTMAX32;\n    let resourceType: ResourceNontrivialType = ResourceNontrivialType.Mana2;\n    let nodeType: NodeType = NodeType.Nothing;\n    if (randomFloat < 0.0) {\n      nodeType = NodeType.Nothing;\n    } else if (randomFloat < 0.15) {\n      nodeType = NodeType.Basic;\n      resourceType = ResourceNontrivialType.Mana0;\n    } else if (randomFloat < 0.35) {\n      nodeType = NodeType.EfficiencyGate;\n      resourceType = ResourceNontrivialType.Mana0; // TODO: more types here??\n    } else if (randomFloat < -0.35) {\n      nodeType = NodeType.Basic;\n      resourceType = ResourceNontrivialType.Mana1;\n    } else if (randomFloat < -0.6) {\n      nodeType = NodeType.Basic;\n      resourceType = ResourceNontrivialType.Mana2;\n    } else {\n      nodeType = NodeType.Nothing;\n    }\n    // override for root node\n    if (\n      args.location.equals(Vector2.Zero) &&\n      args.chunk.equals(Vector2.Zero) &&\n      args.z === 0\n    ) {\n      nodeType = NodeType.Nothing;\n    }\n\n    randomFloat = squirrel3(id + 2) / INTMAX32;\n    let resourceModifier: ResourceModifier;\n    if (randomFloat < 0.55) {\n      resourceModifier = ResourceModifier.Flat;\n    } else if (randomFloat < -0.7) {\n      resourceModifier = ResourceModifier.AfterIncreased0;\n    } else if (randomFloat < -0.7) {\n      resourceModifier = ResourceModifier.AfterIncreased1;\n    } else if (randomFloat < 1.95) {\n      resourceModifier = ResourceModifier.Increased0;\n    } else {\n      resourceModifier = ResourceModifier.Increased1;\n    }\n\n    let resourceAmount = 0;\n    if (\n      resourceModifier === ResourceModifier.Flat ||\n      resourceModifier === ResourceModifier.AfterIncreased0 ||\n      resourceModifier === ResourceModifier.AfterIncreased1\n    ) {\n      // ([0..3] x 3) * 20 + 60 == 150 +/- 90\n      randomFloat = Math.floor((squirrel3(id + 3) / INTMAX32) * 4);\n      randomFloat += Math.floor((squirrel3(id + 4) / INTMAX32) * 4); // base is 20 ish?\n      randomFloat += Math.floor((squirrel3(id + 5) / INTMAX32) * 4); // base is 20 ish?\n      resourceAmount = randomFloat * 20 + 60;\n    } else {\n      // 3 + [0..1] x 4 == 5% +/- 2\n      randomFloat = Math.floor((squirrel3(id + 3) / INTMAX32) * 2); // base is 20 ish?\n      randomFloat += Math.floor((squirrel3(id + 4) / INTMAX32) * 2); // base is 20 ish?\n      randomFloat += Math.floor((squirrel3(id + 5) / INTMAX32) * 2); // base is 20 ish?\n      randomFloat += Math.floor((squirrel3(id + 6) / INTMAX32) * 3); // base is 20 ish?\n      resourceAmount = randomFloat + 3;\n    }\n\n    if (nodeType === NodeType.Nothing) {\n      return {\n        id,\n        nodeType,\n      };\n    } else if (nodeType === NodeType.EfficiencyGate) {\n      let thresholdResourceType = ResourceNontrivialType.Mana0;\n      let thresholdResourceAmount = 300;\n      let timeUntilLocked = 14;\n      return {\n        id,\n        resourceAmount,\n        resourceModifier,\n        resourceType,\n        nodeType,\n        efficiencyGateInfo: {\n          thresholdResourceAmount,\n          thresholdResourceType,\n          timeUntilLocked,\n        },\n      };\n    } else {\n      return {\n        id,\n        resourceAmount,\n        resourceModifier,\n        resourceType,\n        nodeType,\n      };\n    }\n  }\n}\n\ntype LockFactoryConfig = {};\n\nexport class LockFactory {\n  public config: LockFactoryConfig;\n\n  constructor(config: LockFactoryConfig) {\n    this.config = config;\n  }\n\n  public create(args: {\n    seed: number;\n    location: Vector3;\n  }): LockData | undefined {\n    const id = squirrel3(\n      args.seed +\n        args.location.x +\n        args.location.y +\n        squirrel3(args.seed + args.location.x + args.location.z)\n    );\n    const p = id / INTMAX32;\n\n    let lockData: LockData = {\n      shortTextTarget: '1🟢',\n      shortTextTimer: '2⌛',\n      lockStatus: LockStatus.TICKING,\n    };\n    // locks occur at frequency 0.4\n    if (p < 0.4) {\n      return lockData;\n    }\n\n    return undefined;\n  }\n}\n","import {\n  LockStatus,\n  NodeAllocatedStatus,\n} from '../components/GameArea/GameAreaComponent';\nimport {\n  GameState,\n  PointNodeRef,\n  noIntent,\n  WindowState,\n} from '../data/GameState';\nimport { LockData } from '../data/PlayerSaveState';\nimport {\n  HashMap,\n  HashSet,\n  KeyedHashMap,\n} from '../lib/util/data_structures/hash';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { Vector3 } from '../lib/util/geometry/vector3';\nimport { assertOnlyCalledOnce } from '../lib/util/misc';\nimport { Lazy, LazyHashMap } from '../lib/util/lazy';\nimport { computePlayerResourceAmounts } from './ComputeState';\nimport {\n  getCoordNeighbors,\n  getWithinDistance,\n  IReadonlySet,\n} from './lib/HexGrid';\nimport { LockFactory, ZLevelGenFactory } from './WorldGenStateFactory';\n\nexport type GameStateConfig = any;\n\nexport class GameStateFactory {\n  public config: GameStateConfig;\n\n  constructor(config: GameStateConfig) {\n    this.config = config;\n  }\n\n  public create(seed: number | undefined | null = undefined): GameState {\n    if (seed === undefined) {\n      // assertOnlyCalledOnce(\"GameStateFactory.create\");\n    }\n    const mySeed = seed || 0x19283;\n\n    const zLevel = new ZLevelGenFactory({}).create({\n      seed: mySeed,\n      z: 0,\n      startingChunks: 0,\n    });\n    const origin = new Vector2(0, 0);\n    const firstId = zLevel.chunks.get(origin)?.pointNodes.get(origin)?.id!;\n    const pointNodeRef: PointNodeRef = new PointNodeRef({\n      z: 0,\n      chunkCoord: origin,\n      pointNodeId: firstId,\n      pointNodeCoord: origin,\n    });\n\n    const windowState: WindowState = {\n      orientation: 'original',\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight,\n    };\n\n    const lockFactory = new LockFactory({});\n    const lockDataMap = new LazyHashMap<Vector3, LockData | undefined>((k) =>\n      lockFactory.create({ seed: mySeed, location: k })\n    );\n\n    const gameState: GameState = {\n      tick: 0,\n      worldGen: {\n        seed: mySeed,\n        // deprecated\n        zLevels: { 0: zLevel },\n        lockMap: lockDataMap,\n      },\n      playerSave: {\n        // justAllocated: undefined,\n        activeQuest: undefined,\n        spSpentThisQuest: undefined,\n        questProgressHistory: [],\n        questInitialAmount: 0,\n        questsCompleted: [],\n        allocatedPointNodeSet: new HashSet([pointNodeRef]),\n        allocatedPointNodeHistory: [pointNodeRef],\n        score: 0,\n\n        allocationStatusMap: new KeyedHashMap<Vector3, NodeAllocatedStatus>([\n          [Vector3.Zero, NodeAllocatedStatus.TAKEN],\n        ]),\n      },\n      playerUI: {\n        selectedPointNode: undefined,\n        activeTab: 0,\n        isPixiHidden: true,\n        virtualGridLocation: Vector3.Zero,\n      },\n      computed: {},\n      intent: {\n        activeIntent: noIntent,\n        newIntent: noIntent,\n        endedIntent: noIntent,\n      },\n      windowState,\n    };\n    gameState.computed = { ...computePlayerResourceAmounts(gameState) };\n    gameState.computed.lockStatusMap = new HashMap();\n    gameState.computed.fogOfWarStatusMap = new HashMap();\n\n    /**\n     * Initialize fog of war and visible locks\n     */\n    // let prevMap = gameState.playerSave.allocationStatusMap;\n    // first precompute the nearby lock states\n    getWithinDistance(Vector3.Zero, 3).forEach((n) => {\n      gameState.worldGen.lockMap.precompute(n);\n    });\n    // fill in lock statuses with computed statuses\n    {\n      let prevMap = gameState.computed.lockStatusMap;\n      let nodeLocation = Vector3.Zero;\n      const prevGameState = gameState;\n\n      for (let [\n        location,\n        lockData,\n      ] of prevGameState.worldGen.lockMap.entries()) {\n        if (lockData) {\n          // compute lock status\n          const newStatus = LockStatus.TICKING;\n          prevMap.put(location, newStatus);\n        }\n      }\n    }\n    // now fog of war flow vision based on computed lock statuses\n    {\n      let prevMap = gameState.computed.fogOfWarStatusMap;\n      let nodeLocation = Vector3.Zero;\n      let newStatus = NodeAllocatedStatus.TAKEN;\n      const prevGameState = gameState;\n\n      prevMap.put(nodeLocation, NodeAllocatedStatus.VISIBLE);\n\n      getWithinDistance(nodeLocation, 1).forEach((n) => {\n        prevMap.put(n, NodeAllocatedStatus.AVAILABLE);\n      });\n\n      // make sure we make use of lock state\n      // getWithinDistance(nodeLocation, 3).forEach((n) => {\n      // const validLocks = prevGameState.worldGen.lockMap\n      const validLocks: IReadonlySet<Vector3> = {\n        // TODO(bowei): optimize this?\n        contains: (v: Vector3) => {\n          // const maybeLock = prevGameState.worldGen.lockMap.get(v);\n          const maybeLock = prevGameState.computed.lockStatusMap?.get(v);\n          if (maybeLock && maybeLock !== LockStatus.OPEN) {\n            return true;\n          }\n          return false;\n        },\n      };\n      getWithinDistance(nodeLocation, 3, 0, validLocks).forEach((n) => {\n        if (\n          (prevMap.get(n) || NodeAllocatedStatus.HIDDEN) ===\n          NodeAllocatedStatus.HIDDEN\n        ) {\n          // NOTE(bowei): fuck, this doesnt cause a update to be propagated... i guess it's fine though\n          // prevGameState.worldGen.lockMap.precompute(n);\n          prevMap.put(n, NodeAllocatedStatus.UNREACHABLE);\n        }\n      });\n    }\n\n    return gameState;\n  }\n}\n","import {\n  LockStatus,\n  NodeAllocatedStatus,\n} from '../../components/GameArea/GameAreaComponent';\nimport { GameState } from '../../data/GameState';\nimport { Vector3 } from '../../lib/util/geometry/vector3';\nimport { UpdaterGeneratorType2 } from '../../lib/util/updaterGenerator';\nimport { getWithinDistance, IReadonlySet } from '../lib/HexGrid';\n\nexport interface AllocateNodeInput {\n  nodeLocation: Vector3;\n  newStatus: NodeAllocatedStatus.TAKEN;\n}\n\nexport class AllocateNodeAction {\n  updaters: UpdaterGeneratorType2<GameState, GameState>;\n\n  constructor(updaters: UpdaterGeneratorType2<GameState, GameState>) {\n    this.updaters = updaters;\n  }\n\n  enqueueAction(input: AllocateNodeInput) {\n    const { nodeLocation, newStatus } = input;\n\n    this.updaters.playerSave.allocationStatusMap.enqueueUpdate((prevMap) => {\n      prevMap.put(nodeLocation, newStatus);\n      return prevMap.clone();\n    });\n\n    // before updating Fog of war, first unlock any locks\n    this.updaters.computed.lockStatusMap?.enqueueUpdate(\n      (prevMap, prevGameState) => {\n        if (!prevMap) {\n          return prevMap;\n        }\n\n        for (let [\n          location,\n          lockData,\n        ] of prevGameState.worldGen.lockMap.entries()) {\n          if (lockData) {\n            // TODO: compute lock status\n            const newStatus = LockStatus.TICKING;\n            prevMap.put(location, newStatus);\n          }\n        }\n\n        return prevMap.clone();\n      }\n    );\n\n    this.updaters.computed.fogOfWarStatusMap?.enqueueUpdate(\n      (prevMap, prevGameState) => {\n        if (!prevMap) {\n          return prevMap;\n        }\n        prevMap.put(nodeLocation, NodeAllocatedStatus.VISIBLE);\n\n        getWithinDistance(nodeLocation, 1).forEach((n) => {\n          prevMap.put(n, NodeAllocatedStatus.AVAILABLE);\n        });\n\n        // make sure we make use of lock state\n        // getWithinDistance(nodeLocation, 3).forEach((n) => {\n        // const validLocks = prevGameState.worldGen.lockMap\n        const validLocks: IReadonlySet<Vector3> = {\n          // TODO(bowei): optimize this?\n          contains: (v: Vector3) => {\n            // const maybeLock = prevGameState.worldGen.lockMap.get(v);\n            const maybeLock = prevGameState.computed.lockStatusMap?.get(v);\n            if (maybeLock && maybeLock !== LockStatus.OPEN) {\n              return true;\n            }\n            return false;\n          },\n        };\n        getWithinDistance(nodeLocation, 3, 0, validLocks).forEach((n) => {\n          if (\n            (prevMap.get(n) || NodeAllocatedStatus.HIDDEN) ===\n            NodeAllocatedStatus.HIDDEN\n          ) {\n            // NOTE(bowei): fuck, this doesnt cause a update to be propagated... i guess it's fine though\n            // prevGameState.worldGen.lockMap.precompute(n);\n            prevMap.put(n, NodeAllocatedStatus.UNREACHABLE);\n          }\n        });\n\n        return prevMap.clone();\n      }\n    );\n  }\n}\n","import './App.css';\n\nimport classnames from 'classnames';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { DebugOverlayComponent } from './components/DebugOverlayComponent';\nimport { GameAreaComponent } from './components/GameArea/GameAreaComponent';\nimport { GameAreaStateManager } from './components/GameArea/GameAreaStateManager';\nimport { KeyboardListenerComponent } from './components/KeyboardListenerComponent';\nimport { PixiWrapperComponent } from './components/PixiWrapperComponent';\nimport { WindowListenerComponent } from './components/WindowListenerComponent';\nimport { UseGameStateContext } from './contexts';\nimport { GameState, appSizeFromWindowSize } from './data/GameState';\nimport { GameStateFactory } from './game/GameStateFactory';\nimport { batchifySetState } from './lib/util/batchify';\nimport { Vector2 } from './lib/util/geometry/vector2';\nimport { Lazy } from './lib/util/lazy';\nimport {\n  UpdaterGeneratorType2,\n  updaterGenerator2,\n} from './lib/util/updaterGenerator';\nimport COLORS, { colorToCss } from './pixi/colors';\nimport { AllocateNodeAction } from './game/actions/AllocateNode';\n\nconst initialGameState: Lazy<GameState> = new Lazy(() =>\n  new GameStateFactory({}).create()\n);\n\n/**\n * Root react component.\n * In charge of creating game state, and hooking up the game display, pixi, keyboard control, and window event listeners.\n */\nfunction App() {\n  const [gameState, setGameState] = useState<GameState>(function factory() {\n    return initialGameState.get();\n  });\n\n  let [batchedSetGameState, fireBatch] = useMemo(\n    () => batchifySetState(setGameState),\n    [setGameState]\n  );\n  let updaters = useMemo(\n    () => updaterGenerator2(initialGameState.get(), batchedSetGameState),\n    [batchedSetGameState]\n  );\n  const appSize = useMemo(() => {\n    return appSizeFromWindowSize(\n      new Vector2(\n        gameState.windowState.innerWidth,\n        gameState.windowState.innerHeight\n      )\n    );\n  }, [gameState.windowState.innerWidth, gameState.windowState.innerHeight]);\n  //*/\n  const gameStateContextValue = useMemo(() => {\n    return [gameState, updaters, fireBatch] as [\n      GameState,\n      UpdaterGeneratorType2<GameState, GameState>,\n      () => void\n    ];\n  }, [gameState, updaters, fireBatch]);\n\n  // const gameAreaStateManager: any | null = null;\n  // gameAreaStateManager?.makeProps({ gameState, appSize });\n\n  return (\n    <div className={classnames({ App: true })}>\n      <div className=\"entire-area\">\n        <UseGameStateContext.Provider value={gameStateContextValue}>\n          <PixiWrapperComponent hidden={gameState.playerUI.isPixiHidden} />\n        </UseGameStateContext.Provider>\n        <GameAreaStateManager\n          gameState={gameState}\n          updaters={updaters}\n          actions={{ allocateNode: new AllocateNodeAction(updaters) }}\n        >\n          {/*<GameAreaComponent\n            hidden={!gameState.playerUI.isPixiHidden}\n            appSize={appSize}\n          />*/}\n        </GameAreaStateManager>\n      </div>\n\n      <div className=\"debug-overlay\">\n        <DebugOverlayComponent\n          tick={gameState.tick}\n          windowState={gameState.windowState}\n        />\n      </div>\n      <div className=\"button-zone\">\n        <button\n          className=\"button-pixi-toggle\"\n          style={{}}\n          onClick={() => {\n            updaters.playerUI.isPixiHidden.enqueueUpdate((it) => !it);\n          }}\n        >\n          Toggle pixi\n        </button>\n      </div>\n\n      <KeyboardListenerComponent\n        intent={gameState.intent}\n        updaters={updaters.intent}\n      ></KeyboardListenerComponent>\n      <WindowListenerComponent\n        updaters={updaters.windowState}\n      ></WindowListenerComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import crypto from 'crypto';\n\n/**\n * NOTE(bowei): we use a hash function that is NOT md5 -\n * Either https://github.com/sublee/squirrel3-python/blob/master/squirrel3.py or https://github.com/svaarala/duktape/blob/master/misc/splitmix64.c works fine and is much faster\n * Reference: https://www.youtube.com/watch?v=e4b--cyXEsM or https://www.youtube.com/watch?v=LWFzPP8ZbdU\n * TODO(bowei): port bigint to wasm for faster 64bit operations\n */\n\n// NOTE(bowei): untested\nexport function splitmix64(seed: bigint, i: bigint) {\n  let z: bigint = seed + i * BigInt('0x9e3779b97f4a7c15');\n  z = (z ^ (z >> BigInt(30))) * BigInt('0xBF58476D1CE4E5B9');\n  z = (z ^ (z >> BigInt(27))) * BigInt(0x94d049bb133111eb);\n  return z ^ (z >> BigInt(31));\n}\n\nexport const INTMAX32 = 2 ** 32;\nexport function squirrel3(i: number) {\n  let n = (i + INTMAX32) % INTMAX32;\n  n = Math.imul(n, 0xb5297a4d);\n  n ^= n >>> 8;\n  n += 0x68e31da4;\n  n ^= n << 8;\n  n = Math.imul(n, 0x1b56c4e9);\n  n ^= n >>> 8;\n  return (n + INTMAX32) % INTMAX32;\n}\nexport const PRIME32 = 0x3233f2cd; // not used ; useful for hashing integers; a 32 bit prime\n\n/**\n * Md5 is 16 bytes, or max int of 256 ** 16 = 2 ** 128\n */\nexport class HashState {\n  private seed!: Buffer;\n\n  /**\n   * HashState().step(\"foo\") is equivalent to HashState(\"foo\")\n   */\n  constructor(seed?: string) {\n    const buffer = crypto\n      .createHash('md5')\n      .update((seed || '').toString())\n      .digest();\n    this.seed = buffer;\n  }\n\n  public peekRandom(): number {\n    const buffer = crypto.createHash('md5').update(this.seed).digest();\n    return Number(this.bufferToBigInt(buffer) % BigInt(2 ** 32)) % 2 ** 32;\n  }\n\n  // increment the seed linearly by 1\n  public step(numSteps: number = 1) {\n    this.seed = this.bigIntToBuffer(this.bufferToBigInt(this.seed) + BigInt(1));\n  }\n\n  public stepSeed(seed: string) {\n    const buffer = crypto.createHash('md5').update(seed.toString()).digest();\n    this.seed = this.bigIntToBuffer(\n      this.bufferToBigInt(this.seed) + this.bufferToBigInt(buffer)\n    );\n  }\n\n  private bigIntToBuffer(b: bigint): Buffer {\n    let buf = Buffer.alloc(16);\n    let val = b;\n    for (let i = 0; i < 16; i++) {\n      buf[i] = Number(val % BigInt(256));\n      val = val / BigInt(256);\n    }\n    return buf;\n  }\n\n  private bufferToBigInt(b: Buffer): bigint {\n    let val = BigInt(0);\n    for (let i = 0; i < 16; i++) {\n      val = val * BigInt(256) + BigInt(b[i]);\n    }\n    return val;\n  }\n\n  public random(): number {\n    this.step();\n    return this.peekRandom();\n  }\n}\n"],"sourceRoot":""}