{"version":3,"sources":["lib/util/fpsTracker.ts","components/DebugOverlayComponent.tsx","lib/util/epsilon_math.ts","lib/util/misc.ts","lib/util/geometry/vector2.ts","data/PointNodeRef.ts","data/WorldGenState.ts","data/GameState.ts","lib/util/geometry/vector3.ts","game/worldGen/nodeContents/NodeContentsFactory.ts","lib/util/randomHelpers.ts","game/worldGen/nodeContents/NodeContentsRendering.ts","lib/util/data_structures/hash.ts","pixi/colors.ts","components/GameArea/GameAreaCell.tsx","components/GameArea/GameAreaComponent.tsx","components/GameArea/GameAreaStateManager.tsx","components/GameArea/locationUtils.tsx","components/GameArea/computeVirtualNodeDataMap.tsx","components/KeyboardListenerComponent.tsx","contexts.ts","lib/pixi/pixify.ts","lib/util/batchify.ts","lib/util/updaterGenerator.ts","pixi/components/LifecycleHandler.ts","game/Neighbors.ts","game/ComputeState.ts","game/OnAllocation.ts","game/OnSelectOrReselectNode.ts","pixi/components/PointNodeComponent.ts","pixi/components/ChunkComponent.ts","lib/util/lazy.ts","pixi/components/FixedCameraStageComponent.ts","pixi/components/StrategicHexGridComponent.ts","pixi/components/RootComponent.ts","pixi/textures/PointNodeTexture.ts","pixi/textures/SimpleTextures.ts","pixi/PixiReactBridge.ts","components/PixiWrapperComponent.tsx","components/WindowListenerComponent.tsx","game/lib/HexGrid.ts","game/worldGen/WorldGenStateFactory.ts","game/actions/AllocateNode.ts","game/GameStateFactory.ts","components/Sidebar.tsx","components/Tabs.tsx","App.tsx","serviceWorker.ts","index.tsx","lib/util/random.ts"],"names":["FpsTracker","frameTimestampsInTicks","frameTimestampsInTime","this","push","ticksSinceLastUpdate","lastFrameTime","length","logRowsToKeep","slice","Date","getTime","ticksDiff","framesPerTick","timeDiff","framesPerMilli","getFps","toFixed","getUps","DebugOverlayComponent","props","pixiFpsTracker","useRef","useEffect","current","tick","className","windowState","innerWidth","innerHeight","ReactFps","getFpsString","useState","counter","setCounter","reactFpsTracker","timer","setTimeout","it","clearTimeout","fpsString","useMemo","EPSILON","Util","list","fn","lowestT","lowestValue","item","value","obj","highestT","highestValue","low","high","Math","floor","random","array","key","sort","a","b","str","mapObj","re","RegExp","Object","keys","join","replace","matched","toLowerCase","func","timeoutId","waitMilliseconds","options","isImmediate","result","args","doLater","undefined","apply","shouldCallNow","d","monthName","getMonth","getDate","getHours","substr","getMinutes","getSeconds","arr","concat","string","intersperse","character","repeat","multiplyColor","color1","color2","reds","blues","greens","out","round","enumKeys","enm","Vector2","propsOrX","x","y","_x","_y","toString","p","abs","max","dx","dy","sqrt","newX","newY","about","amount","origin","angle","PI","cos","sin","other","__type","trans","scale","t","console","error","add","tx","ty","lerp","highX","highY","lowX","lowY","RandRange","hasOwnProperty","JSON","stringify","Zero","One","NodeType","ResourceNontrivialType","ResourceModifier","IntentName","PointNodeRef","z","chunkCoord","pointNodeCoord","pointNodeId","ChunkGenConstants","CHUNK_HALF_DIM","CHUNK_DIM","DROP_NODES_CHANCE","noIntent","reduce","object","appSizeFromWindowSize","window","min","Infinity","ResourceTypeAndModifier","type","modifier","Vector3","_z","pOrX","newZ","Attribute","Modifier","randomSwitch","randInt","weights","behaviors","INTMAX32","newRandInt","squirrel3","unusedWeight","values","pv","cv","entries","weight","Error","randomValue","randomUniform","increment","inclusive","numBuckets","ceil","WEIGHTS","DECISION_0","EMPTY","NO_SPEND","SPEND","DECISION_1","SINGLE","DOUBLE","NodeContentsFactory","config","attribute","RED0","RED1","RED2","DEL0","DEL1","DEL2","FLAT","INCREASED","formula","plus","numDice","parseInt","split","numPips","val","i","randomDice","lines","createSingle","seed","location","equals","createNoSpend","base","condition","AttributeSymbolMap","AttributeDescriptionMap","nodeContentsLineToString","line","HashSet","initialValues","_values","HashMap","put","remove","get","contains","n","clone","size","k","hash","KeyedHashMap","_kvalues","map","s","hashCode","h","imul","charCodeAt","COLORS","backgroundBlue","nodePink","nodeLavender","nodeBlue","nodeAqua","gateTint","selectedTint","allocatedTint","nodeBorder","nullTint","tooltipBorderBlack","tooltipFillWhite","white","grayBlack","borderBlack","borderWhite","black","colorToCss","c","GameAreaCell","React","memo","GameAreaCellComponent","idx","rowIdx","onUpdateStatus","nodeData","isCursored","onUpdateCursored","handleClick","useCallback","e","stopPropagation","preventDefault","virtualDims","newStatus","NodeAllocatedStatus","TAKEN","status","handleClickQuestionMark","Cell","onClickCenter","onClickQuestionMark","LockStatus","CellComponent","isLocked","lockData","classnames","UNREACHABLE","onClick","hidden","HIDDEN","shortText","shortTextTarget","shortTextTimer","toolTipText","GameAreaComponent","GameArea","container","previousContainer","gridWidth","hexGridPx","gridHeight","document","documentElement","style","setProperty","hexCenterRadius","appSize","jumpOffset","ref","scrollTo","scrollLeft","scrollTop","handleScroll","direction","target","newScrollTop","newScrollLeft","virtualGridDims","onJump","keyboardScrollDirection","lastTime","action","multiply","elapsed","log","interval","setInterval","clearInterval","onScroll","Array","fill","_","Row","virtualCoords","virtualGridStatusMap","updateNodeStatusCb","cursoredVirtualNode","setCursoredVirtualNode","id","virtualDimsToLocation","RowComponent","children","odd","GameAreaStateManager","Component","gameState","setJumpOffset","virtualGridLocation","virtualCenter","divide","offsetFromVirtualCenter","subtract","relativeLocation","addX","FromVector2","virtualCoordsToLocation","playerUI","locationToVirtualDims","offsetFromVirtualGridLocation","relativeVirtualCoords","locationToVirtualCoords","allocationStatusMap","nodeContentsMap","lockMap","fogOfWarStatusMap","startTime","row","col","virtualVec","maybeStatus","nodeStatus","nodeContents","shortText1","shortText2","fullText","alert","computeVirtualNodeDataMap","playerSave","worldGen","computed","handleJump","jumpAmounts","withY","clampX","clampY","updaters","enqueueUpdate","handleUpdateNodeStatus","nodeLocation","prevStatus","AVAILABLE","maybeLock","actions","allocateNode","enqueueAction","lockStatusMap","cursoredVirtualNodeCoords","cursoredNodeLocation","3","2","v","prev","updated","isSidebarOpen","newIntent","intent","newLocation","MOVE_CURSOR_EAST","MOVE_CURSOR_WEST","MOVE_CURSOR_NORTHEAST","MOVE_CURSOR_NORTHWEST","addY","MOVE_CURSOR_SOUTHEAST","MOVE_CURSOR_SOUTHWEST","MOVE_CURSOR_SOUTH","MOVE_CURSOR_NORTH","INTERACT_WITH_NODE","activeIntent","PAN_EAST","PAN_WEST","PAN_NORTH","PAN_SOUTH","isPixiHidden","defaultKeyIntentConfig","ArrowUp","ArrowLeft","ArrowDown","ArrowRight","j","l","m","TOGGLE_STRATEGIC_VIEW","TOGGLE_SIDEBAR","q","w","TRAVEL_UPSTAIRS","TRAVEL_DOWNSTAIRS","KeyboardListenerComponent","handleKeydown","configuredIntent","state","keyIntentConfig","NOOP","handleKeyup","endedIntent","addEventListener","removeEventListener","UseGameStateContext","createContext","PixiPointFrom","Pixi","batchifySetState","batch","arg","thisBatch","next","valueOrCallback","updaterGenerator2Helper","dataObject","dataUpdater","forEach","newValueOrCallback","oldData","wholeData","newKey","updaterGenerator2","setState","stateCallbackFunction","ChildrenArray","indexOf","instance","removed","splice","findIndex","find","cloned","callbackfn","LifecycleHandlerBase","_staleProps","_children","_childrenToConstruct","_childrenToDestruct","_forceUpdates","markForceUpdate","childInstance","childInfo","child","childClass","propsFactory","addChild","renderSelf","didMount","self","initialState","batchedSetState","fireStateUpdaters","stateUpdaters","nextProps","_update","staleState","updateSelf","shouldUpdate","forceUpdates","didForceUpdateChild","didForceUpdate","updateChildren","_updateChildren","Promise","resolve","didUpdate","willUnmount","removeChild","engageLifecycle","derived","Proxy","construct","_didConstruct","Direction","newTarget","Reflect","computePlayerResourceAmounts","amounts","playerResourceNodesAggregated","allocatedPointNodeHistory","pointNodeRef","pointNodeGen","zLevels","chunks","pointNodes","nodeType","Nothing","resourceTypeAndModifier","resourceType","resourceModifier","resourceAmount","computePlayerResourceNodesAggregated","Flat","Increased0","AfterIncreased0","Increased1","AfterIncreased1","playerResourceAmounts","getNeighbors","selfPointNodeRef","neighborsMap","neighbors","zLevel","myChunk","chunk","withX","nbor","EAST","WEST","upZLevel","upChunkCoordX","upNodeX","upChunkCoordY","upNodeY","upChunkCoord","upChunk","upNode","UP","downZLevel","downChunk","DOWN","getNeighborsMap","doTryAllocate","prevGameState","allocatedPointNodeSet","hasActiveQuest","connected","canAllocate","activeQuest","EfficiencyGate","efficiencyGateInfo","thresholdResourceType","thresholdResourceAmount","timeUntilLocked","checkEfficiencyGate","nextSet","nextHistory","selectOrReselectNode","justTriedToAllocate","justSpentSp","justFailedToAllocate","selectedPointNode","spSpentThisQuest","questProgressHistory","afterMaybeSpendingSp","activeTab","wrapped","sprite","halfwayCenterSprite","centerSprite","topHalfSprite","hitArea","tooltippableArea","numClicks","descriptionText","defaultTexture","pointNodeTexture","cropFraction","texture","sortableChildren","anchor","zIndex","mask","beginFill","drawRect","width","height","pivot","alpha","interactive","buttonMode","RenderedChunkConstants","NODE_HITAREA_PX","nodeDescription","tint","centerTint","position","isSelected","isAllocated","baseColor","topHalfColor","Mana0","textureToFind","staleProps","addListener","event","localPosition","data","getLocalPosition","worldTransform","tooltipUpdaters","visible","text","SPACING_PX","CHUNK_SPACING_PX","NODE_SIZE_PX","NODE_ROUNDED_PX","resyncChildren","prevProps","prevState","childrenToDelete","chunkGen","selfChunkRef","childPropsFactory","delta","allocatedPointNodeSubset","childKey","childComponent","PointNodeComponent","Lazy","factory","_wasConstructed","_value","_factory","LazyHashMap","graphics","hexGrid","textures","circle","virtualLocation","nodeVisibleStatus","nodeAllocatedStatus","rect","fixedCameraStage","actionStage","backdropStage","strategicHexGrid","backdrop","renderer","textureSet","g","drawRoundedRect","generateTexture","LINEAR","generatePointNodeTexture","simpleTexture","drawCircle","square","generateSimpleTextures","playerCurrentZ","tooltip","fixedCameraStagePropsFactory","FixedCameraStageComponent","strategicHexGridPropsFactory","StrategicHexGridComponent","PixiReactBridge","app","rootComponent","onTick","isSecondConstructorCall","originalAppSize","antialias","transparent","resolution","devicePixelRatio","autoDensity","powerPreference","backgroundColor","ticker","destroy","baseTexture","baseGameLoop","bind","curr","appendChild","view","futureProps","RootComponent","stage","resize","fireBatch","update","initialApplication","PixiWrapperComponent","application","useContext","gameStateUpdaters","fireBatchedSetGameState","childNodes","rerender","UAParser","getBrowser","name","WindowListenerComponent","handleWindowResize","old","getCoordNeighbors","NORTHWEST","SOUTHEAST","NORTHEAST","SOUTHWEST","getWithinDistance","maxDistance","minDistance","disallowedSet","touched","disallowedButTouched","byDist","vec","considering","dd","ZLevelGenFactory","chunkGenFactory","ChunkGenFactory","startingChunks","create","pointNodeGenFactory","PointNodeGenFactory","droppedNodes","loc","randomFloat","Mana2","Basic","Mana1","LockFactory","lockStatus","TICKING","AllocateNodeAction","input","prevMap","VISIBLE","OPEN","precompute","GameStateFactory","mySeed","firstId","orientation","lockFactory","lockDataMap","nodeContentsFactory","0","questInitialAmount","questsCompleted","score","validLocks","Sidebar","setSidebarHidden","Tabs","labels","onChange","label","Tab","active","initialGameState","App","setGameState","batchedSetGameState","gameStateContextValue","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f6696c4c.chunk.js","sourcesContent":["const logRowsToKeep: number = 60; // last 1 seconds, at 60 fps\n\n/**\n * See https://www.npmjs.com/package/pixi-fps https://github.com/jkanchelov/pixi-fps\n */\nexport class FpsTracker {\n  private frameTimestampsInTicks: any[] = [];\n  private frameTimestampsInTime: any[] = [];\n\n  constructor() {\n    this.frameTimestampsInTicks.push(0);\n    // this.frameTimestampsInTime.push((new Date()).getTime());\n  }\n\n  /**\n   * @param ticksSinceLastUpdate should be the delta in ticks since the last update - will probably be a decimal close to 1\n   */\n  public tick(ticksSinceLastUpdate: number) {\n    let lastFrameTime = this.frameTimestampsInTicks[\n      this.frameTimestampsInTicks.length - 1\n    ];\n    this.frameTimestampsInTicks.push(lastFrameTime + ticksSinceLastUpdate);\n\n    // rotate logs\n    if (this.frameTimestampsInTicks.length > logRowsToKeep + 60) {\n      this.frameTimestampsInTicks = this.frameTimestampsInTicks.slice(60);\n    }\n\n    // do the same but track real time\n    this.frameTimestampsInTime.push(new Date().getTime());\n    if (this.frameTimestampsInTime.length > logRowsToKeep + 60) {\n      this.frameTimestampsInTime = this.frameTimestampsInTime.slice(60);\n    }\n  }\n\n  // [0, 3, 4] -> 30 fps\n  public getUps(): number {\n    let ticksDiff =\n      this.frameTimestampsInTicks[this.frameTimestampsInTicks.length - 1] -\n      this.frameTimestampsInTicks[0];\n    let framesDiff = this.frameTimestampsInTicks.length - 1;\n\n    let framesPerTick = framesDiff / ticksDiff;\n    if (!framesPerTick) {\n      return 60;\n    }\n\n    return framesPerTick * 60;\n  }\n\n  public getFps(): number {\n    let timeDiff =\n      this.frameTimestampsInTime[this.frameTimestampsInTime.length - 1] -\n      this.frameTimestampsInTime[0];\n    let framesDiff = this.frameTimestampsInTime.length - 1;\n\n    let framesPerMilli = framesDiff / timeDiff;\n    if (!framesPerMilli) {\n      return 60;\n    }\n\n    return framesPerMilli * 1000;\n  }\n\n  public getFpsString(): string {\n    let fpsNumber = this.getFps();\n\n    return fpsNumber.toFixed(1);\n  }\n\n  public getUpsString(): string {\n    let upsNumber = this.getUps();\n\n    return upsNumber.toFixed(1);\n  }\n}\n","import './DebugOverlayComponent.css';\n\nimport classnames from 'classnames';\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport COLORS, { colorToCss } from '../pixi/colors';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { FpsTracker } from '../lib/util/fpsTracker';\nimport { WindowState } from '../data/GameState';\n\n/**\n * Small overlay in the top left which displays window dimensions and fps.\n */\nexport function DebugOverlayComponent(props: {\n  tick: number;\n  windowState: WindowState;\n}) {\n  const pixiFpsTracker = useRef(new FpsTracker());\n  useEffect(() => {\n    pixiFpsTracker.current.tick(0);\n  }, [props.tick]);\n\n  return (\n    <div className=\"text\">\n      <div>\n        {props.windowState.innerWidth}x{props.windowState.innerHeight}\n      </div>\n      <ReactFps />\n      <div>UPS: {pixiFpsTracker.current.getFpsString()}</div>\n    </div>\n  );\n}\n\nfunction ReactFps() {\n  const [counter, setCounter] = useState(0);\n  const reactFpsTracker = useRef(new FpsTracker());\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setCounter((it) => it + 1);\n      reactFpsTracker.current.tick(0);\n    }, 5);\n    return () => clearTimeout(timer);\n  }, [counter]);\n\n  const fpsString = useMemo(() => reactFpsTracker.current.getFpsString(), [\n    counter,\n  ]);\n\n  return <div>RPS: {fpsString}</div>;\n}\n","export const EPSILON = 0.0000001;\n\nexport const epsEqual = (x: number, y: number) => {\n  return Math.abs(x - y) < EPSILON;\n};\n\nexport const epsGreaterThan = (x: number, y: number) => {\n  return x + EPSILON - y > 0;\n};\n\nexport const epsLessThan = (x: number, y: number) => {\n  return x - EPSILON - y < 0;\n};\n","let lastUsedId = 0;\n\nexport const getUniqueID = () => {\n  return lastUsedId++;\n};\n\nexport class Util {\n  static MinBy<T>(list: T[], fn: (T: T) => number): T | null {\n    let lowestT: T | null = null;\n    let lowestValue: number | null = null;\n\n    for (const item of list) {\n      const value = fn(item);\n\n      if (lowestValue === null || value < lowestValue) {\n        lowestT = item;\n        lowestValue = value;\n      }\n    }\n\n    return lowestT;\n  }\n\n  static MinByAndValue<T>(\n    list: T[],\n    fn: (T: T) => number\n  ): { obj: T; value: number } | null {\n    let lowestT: T | null = null;\n    let lowestValue: number | null = null;\n\n    for (const item of list) {\n      const value = fn(item);\n\n      if (lowestValue === null || value < lowestValue) {\n        lowestT = item;\n        lowestValue = value;\n      }\n    }\n\n    return lowestT === null || lowestValue === null\n      ? null\n      : { obj: lowestT, value: lowestValue };\n  }\n\n  static MaxBy<T>(list: T[], fn: (T: T) => number): T | null {\n    let highestT: T | null = null;\n    let highestValue: number | null = null;\n\n    for (const item of list) {\n      const value = fn(item);\n\n      if (highestValue === null || value > highestValue) {\n        highestT = item;\n        highestValue = value;\n      }\n    }\n\n    return highestT;\n  }\n\n  static RandRange(low: number, high: number): number {\n    return Math.floor(Math.random() * (high - low) + low);\n  }\n\n  public static SortByKey<T>(array: T[], key: (x: T) => number): T[] {\n    return array.sort((a, b) => {\n      return key(a) - key(b);\n    });\n  }\n\n  public static ReplaceAll(\n    str: string,\n    mapObj: { [key: string]: string }\n  ): string {\n    const re = new RegExp(Object.keys(mapObj).join('|'), 'gi');\n\n    return str.replace(re, (matched) => {\n      return mapObj[matched.toLowerCase()];\n    });\n  }\n\n  public static Debounce<F extends (...args: any[]) => void>(\n    func: F,\n    waitMilliseconds = 50,\n    options = {\n      isImmediate: false,\n    }\n  ): F {\n    let timeoutId: any; // types are different on node vs client, so we have to use any.\n\n    const result = (...args: any[]) => {\n      const doLater = () => {\n        timeoutId = undefined;\n        if (!options.isImmediate) {\n          func.apply(this, args);\n        }\n      };\n\n      const shouldCallNow = options.isImmediate && timeoutId === undefined;\n\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId);\n      }\n\n      timeoutId = setTimeout(doLater, waitMilliseconds);\n\n      if (shouldCallNow) {\n        func.apply(this, args);\n      }\n    };\n\n    return result as any;\n  }\n\n  public static FormatDate(d: Date): string {\n    const monthName = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ][d.getMonth()];\n\n    return `${monthName} ${d.getDate()}, ${('00' + d.getHours()).substr(-2)}:${(\n      '00' + d.getMinutes()\n    ).substr(-2)}:${('00' + d.getSeconds()).substr(-2)}`;\n  }\n\n  public static FlattenByOne<T>(arr: T[][]): T[] {\n    let result: T[] = [];\n\n    for (const obj of arr) {\n      result = result.concat(obj);\n    }\n\n    return result;\n  }\n\n  public static PadString(\n    string: string,\n    length: number,\n    intersperse = '',\n    character = ' '\n  ) {\n    return string + intersperse + character.repeat(length - string.length);\n  }\n}\n\n/**\n * A deep readonly type - given an object type, all subobjects and their subobjects are also marked as readonly.\n */\nexport type Const<T> = T extends Function\n  ? T\n  : {\n      readonly [P in keyof T]: T[P] extends { [k: string]: any }\n        ? Const<T[P]>\n        : T[P];\n    };\n\nconst assertOnlyCalledOnceData: { [k: string]: [string, number] } = {};\n\n/**\n * Asserts that a function is not called more than twice. Useful for debugging react lifecycle which may be creating more objects than you realize, impacting performance.\n * @param id identifier\n */\nexport function assertOnlyCalledOnce(id: string | number) {\n  let k = id.toString();\n  if (assertOnlyCalledOnceData[k] !== undefined) {\n    if (assertOnlyCalledOnceData[k][1] === 1) {\n      assertOnlyCalledOnceData[k][1] = 2;\n    } else {\n      throw new Error(\n        'Error, called more than twice with same id: ' +\n          k +\n          ' , callback the first time was : ' +\n          assertOnlyCalledOnceData[k]\n      );\n    }\n  } else {\n    const stacktrace = new Error().stack!;\n    assertOnlyCalledOnceData[k] = [stacktrace, 1];\n  }\n}\n\n/**\n * Multiplies colors (0xFFFFFF === 1). use for applying tints manually.\n * @param color1 A base color\n * @param color2 A tint\n */\nexport function multiplyColor(color1: number, color2: number): number {\n  let reds = [color1 & 0xff0000, color2 & 0xff0000];\n  let blues = [color1 & 0x0000ff, color2 & 0x0000ff];\n  let greens = [color1 & 0x00ff00, color2 & 0x00ff00];\n  let out = Math.round(((reds[0] / 0x010000) * reds[1]) / 0xffffff) * 0x010000;\n  out += Math.round(((greens[0] / 0x000100) * greens[1]) / 0x00ff00) * 0x000100;\n  out += Math.round((blues[0] * blues[1]) / 0x0000ff);\n  return out;\n}\n\nexport function enumKeys<T extends string>(enm: { [key in T]: T }): T[] {\n  return Object.keys(enm) as T[];\n}\n\n// export function enumKeys<T extends string>(enm: { [key: string]: string }) : T[] {\n//   return Object.keys(enm) as T[];\n// }\n","import { EPSILON } from '../epsilon_math';\nimport { Util } from '../misc';\n\nexport interface IVector2 {\n  x: number;\n  y: number;\n}\n\nexport class Vector2 {\n  private _x: number;\n  private _y: number;\n\n  public get x(): number {\n    return this._x;\n  }\n  public get y(): number {\n    return this._y;\n  }\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(props: { x: number; y: number });\n  constructor(\n    propsOrX: { x: number; y: number } | number = { x: 0, y: 0 },\n    y?: number\n  ) {\n    if (typeof propsOrX === 'number') {\n      this._x = propsOrX;\n      this._y = y!;\n    } else {\n      this._x = propsOrX.x;\n      this._y = propsOrX.y;\n    }\n  }\n\n  public get half(): Vector2 {\n    return new Vector2({ x: this.x / 2, y: this.y / 2 });\n  }\n\n  public static Zero: Vector2 = new Vector2(0, 0);\n  public static One: Vector2 = new Vector2(1, 1);\n\n  static IsVector2(x: any): x is Vector2 {\n    return x instanceof Vector2;\n  }\n\n  static Random(highX: number, highY: number, lowX = 0, lowY = 0) {\n    return new Vector2({\n      x: Util.RandRange(lowX, highX),\n      y: Util.RandRange(lowY, highY),\n    });\n  }\n\n  hash(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return `[${this.x}, ${this.y}]`;\n  }\n\n  invert(): Vector2 {\n    return new Vector2({\n      x: -this.x,\n      y: -this.y,\n    });\n  }\n\n  round(): Vector2 {\n    return new Vector2({\n      x: Math.round(this.x),\n      y: Math.round(this.y),\n    });\n  }\n\n  floor(): Vector2 {\n    return new Vector2({\n      x: Math.floor(this.x),\n      y: Math.floor(this.y),\n    });\n  }\n\n  taxicabDistance(p: Vector2): number {\n    return Math.abs(p.x - this.x) + Math.abs(p.y - this.y);\n  }\n\n  diagonalDistance(p: IVector2): number {\n    return Math.max(Math.abs(p.x - this.x), Math.abs(p.y - this.y));\n  }\n\n  distance(p: IVector2): number {\n    let dx = Math.abs(p.x - this.x);\n    let dy = Math.abs(p.y - this.y);\n\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  translate(p: { x: number; y: number }): Vector2 {\n    return new Vector2({\n      x: this.x + p.x,\n      y: this.y + p.y,\n    });\n  }\n\n  subtract(p: { x: number; y: number }): Vector2 {\n    return new Vector2({\n      x: this.x - p.x,\n      y: this.y - p.y,\n    });\n  }\n\n  add(p: { x: number; y: number }): Vector2 {\n    return new Vector2({\n      x: this.x + p.x,\n      y: this.y + p.y,\n    });\n  }\n\n  addX(x: number): Vector2 {\n    return new Vector2({\n      x: this.x + x,\n      y: this.y,\n    });\n  }\n\n  addY(y: number): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: this.y + y,\n    });\n  }\n\n  subtractX(x: number): Vector2 {\n    return new Vector2({\n      x: this.x - x,\n      y: this.y,\n    });\n  }\n\n  subtractY(y: number): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: this.y - y,\n    });\n  }\n\n  clampX(low: number, high: number): Vector2 {\n    let newX = this.x;\n\n    if (newX < low) {\n      newX = low;\n    }\n    if (newX > high) {\n      newX = high;\n    }\n\n    return new Vector2({\n      x: newX,\n      y: this.y,\n    });\n  }\n\n  clampY(low: number, high: number): Vector2 {\n    let newY = this.y;\n\n    if (newY < low) {\n      newY = low;\n    }\n    if (newY > high) {\n      newY = high;\n    }\n\n    return new Vector2({\n      x: this.x,\n      y: newY,\n    });\n  }\n\n  scale(\n    about: { x: number; y: number },\n    amount: { x: number; y: number }\n  ): Vector2 {\n    return new Vector2({\n      x: (this.x - about.x) * amount.x + about.x,\n      y: (this.y - about.y) * amount.y + about.y,\n    });\n  }\n\n  rotate(origin: Vector2, angle: number): Vector2 {\n    angle = angle / (180 / Math.PI);\n\n    return new Vector2({\n      x:\n        Math.cos(angle) * (this.x - origin.x) -\n        Math.sin(angle) * (this.y - origin.y) +\n        origin.x,\n      y:\n        Math.sin(angle) * (this.x - origin.x) +\n        Math.cos(angle) * (this.y - origin.y) +\n        origin.y,\n    });\n  }\n\n  equals(other: Vector2 | undefined): boolean {\n    if (other === undefined) {\n      return false;\n    }\n\n    return (\n      Math.abs(this.x - other.x) < EPSILON &&\n      Math.abs(this.y - other.y) < EPSILON\n    );\n  }\n\n  multiply(other: Vector2 | number): Vector2 {\n    if (typeof other === 'number') {\n      return new Vector2({\n        x: this.x * other,\n        y: this.y * other,\n      });\n    } else {\n      return new Vector2({\n        x: this.x * other.x,\n        y: this.y * other.y,\n      });\n    }\n  }\n\n  divide(other: Vector2 | number): Vector2 {\n    if (typeof other === 'number') {\n      return new Vector2({\n        x: this.x / other,\n        y: this.y / other,\n      });\n    } else {\n      return new Vector2({\n        x: this.x / other.x,\n        y: this.y / other.y,\n      });\n    }\n  }\n\n  toJSON(): any {\n    return {\n      __type: 'Vector2',\n      x: this.x,\n      y: this.y,\n    };\n  }\n\n  transform(trans: Vector2, scale: number): Vector2 {\n    return new Vector2({\n      x: Math.floor((this.x - trans.x) * scale),\n      y: Math.floor((this.y - trans.y) * scale),\n    });\n  }\n\n  normalize(): Vector2 {\n    if (this.x === 0 && this.y === 0) {\n      return this;\n    }\n\n    const length = Math.sqrt(this.x * this.x + this.y * this.y);\n\n    return new Vector2({\n      x: this.x / length,\n      y: this.y / length,\n    });\n  }\n\n  withX(newX: number): Vector2 {\n    return new Vector2({\n      x: newX,\n      y: this.y,\n    });\n  }\n\n  withY(newY: number): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: newY,\n    });\n  }\n\n  invertX(): Vector2 {\n    return new Vector2({\n      x: -this.x,\n      y: this.y,\n    });\n  }\n\n  lerp(other: Vector2, t: number): Vector2 {\n    if (t > 1 || t < 0) {\n      console.error('Lerp t must be between 0 and 1.');\n    }\n    if (t === 0) return this;\n    if (t === 1) return other;\n\n    return this.scale({ x: 0, y: 0 }, { x: 1 - t, y: 1 - t }).add(\n      other.scale({ x: 0, y: 0 }, { x: t, y: t })\n    );\n  }\n\n  lerp2D(other: Vector2, tx: number, ty: number): Vector2 {\n    if (tx > 1 || tx < 0 || ty > 1 || ty < 0) {\n      console.error('Lerp t must be between 0 and 1.');\n    }\n    return this.scale({ x: 0, y: 0 }, { x: 1 - tx, y: 1 - ty }).add(\n      other.scale({ x: 0, y: 0 }, { x: tx, y: ty })\n    );\n  }\n\n  coserp(other: Vector2, t: number): Vector2 {\n    t = 0.5 * (1 + Math.cos(2 * t * Math.PI));\n\n    return this.lerp(other, t);\n  }\n\n  static Deserialize(obj: any): Vector2 {\n    if (!obj.hasOwnProperty('x') || !obj.hasOwnProperty('y')) {\n      console.error('Failed deserializing point');\n    }\n\n    return new Vector2({\n      x: obj.x,\n      y: obj.y,\n    });\n  }\n\n  static Serialize(obj: Vector2): string {\n    return JSON.stringify({ x: obj.x, y: obj.y });\n  }\n}\n","import { Vector2 } from '../lib/util/geometry/vector2';\n\nexport class PointNodeRef {\n  public z: number;\n  public chunkCoord: Vector2;\n  public pointNodeCoord: Vector2;\n  public pointNodeId: number;\n\n  constructor(args: {\n    z: number;\n    chunkCoord: Vector2;\n    pointNodeCoord: Vector2;\n    pointNodeId: number;\n  }) {\n    this.z = args.z;\n    this.chunkCoord = args.chunkCoord;\n    this.pointNodeCoord = args.pointNodeCoord;\n    this.pointNodeId = args.pointNodeId;\n  }\n\n  public hash(): string {\n    return (\n      this.pointNodeId.toString() +\n      this.z.toString() +\n      this.chunkCoord.toString() +\n      this.pointNodeCoord.toString()\n    );\n  }\n\n  public toString(): string {\n    return (\n      this.z +\n      ',' +\n      this.chunkCoord.toString() +\n      ',' +\n      this.pointNodeCoord.toString()\n    );\n  }\n}\n\nexport class ChunkRef {\n  public z: number;\n  public chunkCoord: Vector2;\n  public chunkId: number;\n\n  constructor(args: { z: number; chunkCoord: Vector2; chunkId: number }) {\n    this.z = args.z;\n    this.chunkCoord = args.chunkCoord;\n    this.chunkId = args.chunkId;\n  }\n\n  public hash(): string {\n    return (\n      this.chunkId.toString() + this.z.toString() + this.chunkCoord.toString()\n    );\n  }\n}\n","import { NodeContents } from '../game/worldGen/nodeContents/NodeContentsFactory';\nimport { KeyedHashMap } from '../lib/util/data_structures/hash';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { Vector3 } from '../lib/util/geometry/vector3';\nimport { LazyHashMap } from '../lib/util/lazy';\nimport { LockData } from './PlayerSaveState';\n\nexport type WorldGenState = {\n  // DEPRECATED\n  zLevels: { [z: number]: ZLevelGen };\n\n  // NOT DEPRECATED\n  seed: number;\n  /**\n   * What sort of locks are generated. Does not store the live status of the locks.\n   */\n  lockMap: LazyHashMap<Vector3, LockData | undefined>;\n\n  /**\n   * Data about each node.\n   */\n  nodeContentsMap: LazyHashMap<Vector3, NodeContents>;\n};\n\nexport type ZLevelGen = {\n  id: number;\n  chunks: KeyedHashMap<Vector2, ChunkGen>;\n};\n\nexport type ChunkGen = {\n  id: number;\n  pointNodes: KeyedHashMap<Vector2, PointNodeGen>;\n};\n\nexport class ChunkGenConstants {\n  public static CHUNK_DIM = 9; // each chunk is a DIM x DIM grid of nodes, centered on a single node\n  public static CHUNK_HALF_DIM = (ChunkGenConstants.CHUNK_DIM - 1) / 2;\n  public static DROP_NODES_CHANCE = 0.0; // before generating edges, how many of the nodes to throw out\n}\n\nexport type PointNodeGen = {\n  id: number;\n} & (\n  | {\n      nodeType: NodeType.Basic;\n      // more data to be generated here - size, color, etc.\n      resourceType: ResourceNontrivialType;\n      resourceModifier: ResourceModifier;\n      resourceAmount: number;\n    }\n  | {\n      nodeType: NodeType.Nothing;\n    }\n  | {\n      nodeType: NodeType.EfficiencyGate;\n      resourceType: ResourceNontrivialType;\n      resourceModifier: ResourceModifier;\n      resourceAmount: number;\n\n      efficiencyGateInfo: {\n        thresholdResourceType: ResourceType;\n        thresholdResourceAmount: number;\n        timeUntilLocked: number;\n      };\n    }\n);\n\nexport enum NodeType {\n  Basic = 'Basic',\n  Nothing = 'Nothing',\n  EfficiencyGate = 'EfficiencyGate',\n}\n\nexport enum ResourceNontrivialType {\n  Mana0 = 'Mana0',\n  Mana1 = 'Mana1',\n  Mana2 = 'Mana2',\n}\n\nexport type ResourceType = ResourceNontrivialType;\n// // eslint-disable-next-line\n// export const ResourceType = {\n//   Nothing: \"Nothing\",\n//   EfficiencyGate: \"EfficiencyGate\",\n//   ...ResourceNontrivialType,\n// };\n\nexport enum ResourceModifier {\n  Flat = 'Flat',\n  Increased0 = '% increased',\n  AfterIncreased0 = 'added after % increased',\n  Increased1 = '% increased multiplier',\n  AfterIncreased1 = 'added after % increased multiplier',\n}\n","import {\n  LockStatus,\n  NodeAllocatedStatus,\n} from '../components/GameArea/GameAreaComponent';\nimport { HashMap } from '../lib/util/data_structures/hash';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { Vector3 } from '../lib/util/geometry/vector3';\nimport { LazyHashMap } from '../lib/util/lazy';\nimport { Const, enumKeys } from '../lib/util/misc';\nimport { PlayerSaveState } from './PlayerSaveState';\nimport { PointNodeRef } from './PointNodeRef';\nimport {\n  ResourceModifier,\n  ResourceNontrivialType,\n  ResourceType,\n  WorldGenState,\n} from './WorldGenState';\n\nexport { PointNodeRef, ChunkRef } from './PointNodeRef';\nexport type { PlayerSaveState, Quest } from './PlayerSaveState';\nexport type {\n  WorldGenState,\n  ChunkGen,\n  ZLevelGen,\n  PointNodeGen,\n  ResourceType,\n} from './WorldGenState';\nexport {\n  ChunkGenConstants,\n  ResourceModifier,\n  ResourceNontrivialType,\n} from './WorldGenState';\n\n/**\n * Data owned by the master \"App\" component, to be made available as props to ALL subcomponents (both pixi and react); react uses context providers to make this easier\n * 1. world generation data, stuff that was computed off of the random seed and is stored so we can do logic off of it,\n *   but can be deleted/recomputed any time.\n *   May or may not be persisted to disk - unimportant apart from the random seed.\n * 2. data about player activity in the game e.g. which nodes were allocated, what quest stage they are on\n *   Must be persisted to disk - this is essentially the player's \"save file\"\n * 3. data about player activity that only influences the UI, e.g. which node was selected, but affects UI across\n *   very far away pixi/react components.\n *   Should be persisted to disk - will help the player \"remember their place\" in the game, but not a big deal if lost.\n * 4. data about the window display - should never be persisted to disk.\n * 5. data that is computed from other data - no need to persist to disk.\n *\n * Does NOT include UI data which is only relevant to a small part of the component hierarchy - e.g. how many seconds since last tap.\n * That data should belong in state owned by subcomponents.\n */\nexport type GameState = {\n  tick: number;\n  worldGen: WorldGenState;\n  playerSave: PlayerSaveState;\n  playerUI: PlayerUIState;\n  computed: ComputedState;\n  intent: PlayerIntentState;\n  windowState: WindowState;\n};\n\n/**\n * Player intents == what they want to do when they press certain mouse/keyboard keys. This is decoupled\n * from their actual keyboard keys to make remapping easier.\n */\nexport type PlayerIntentState = {\n  activeIntent: Intent;\n  newIntent: Intent;\n  endedIntent: Intent;\n};\n\nexport type Intent = {\n  [name in IntentName]: boolean;\n};\n\nexport enum IntentName {\n  // Default intent - does nothing\n  NOOP = 'NOOP',\n\n  PAN_NORTH = 'PAN_NORTH',\n  PAN_SOUTH = 'PAN_SOUTH',\n  PAN_WEST = 'PAN_WEST',\n  PAN_EAST = 'PAN_EAST',\n  TRAVEL_UPSTAIRS = 'TRAVEL_UPSTAIRS',\n  TRAVEL_DOWNSTAIRS = 'TRAVEL_DOWNSTAIRS',\n\n  TOGGLE_STRATEGIC_VIEW = 'TOGGLE_STRATEGIC_VIEW',\n  TOGGLE_SIDEBAR = 'TOGGLE_SIDEBAR',\n\n  MOVE_CURSOR_WEST = 'MOVE_CURSOR_WEST',\n  MOVE_CURSOR_EAST = 'MOVE_CURSOR_EAST',\n  MOVE_CURSOR_NORTH = 'MOVE_CURSOR_NORTH',\n  MOVE_CURSOR_SOUTH = 'MOVE_CURSOR_SOUTH',\n  MOVE_CURSOR_NORTHWEST = 'MOVE_CURSOR_NORTHWEST',\n  MOVE_CURSOR_NORTHEAST = 'MOVE_CURSOR_NORTHEAST',\n  MOVE_CURSOR_SOUTHWEST = 'MOVE_CURSOR_SOUTHWEST',\n  MOVE_CURSOR_SOUTHEAST = 'MOVE_CURSOR_SOUTHEAST',\n\n  INTERACT_WITH_NODE = 'INTERACT_WITH_NODE',\n}\n\nexport const noIntent = enumKeys(IntentName).reduce((object: Intent, key) => {\n  object[key] = false;\n  return object;\n}, {} as Intent);\n\n/**\n * current window settings -- allows for dynamic resizing and also rotation on mobile web\n */\nexport type WindowState = {\n  orientation: 'original' | 'rotated'; // rotated === we are forcing landscape-in-portrait\n  innerWidth: number;\n  innerHeight: number;\n};\n\n/**\n * given the dimensions of the entire html window, computes the size of the intended play area -- leaves a 24px border\n */\nexport function appSizeFromWindowSize(window?: Const<Vector2>): Vector2 {\n  return new Vector2({\n    x: Math.min(1920, (window?.x || Infinity) - 24),\n    y: Math.min(1080, (window?.y || Infinity) - 24),\n  });\n}\n\nexport type ComputedState = {\n  // DEPRECATED\n  playerResourceAmounts?: { [k in ResourceType]: number };\n  playerResourceNodesAggregated?: HashMap<ResourceTypeAndModifier, number>;\n\n  // NOT DEPRECATED\n  fogOfWarStatusMap?: HashMap<Vector3, NodeAllocatedStatus>;\n  lockStatusMap?: HashMap<Vector3, LockStatus | undefined>;\n};\n\nexport class ResourceTypeAndModifier {\n  public type: ResourceNontrivialType;\n  public modifier: ResourceModifier;\n\n  constructor(args: {\n    type: ResourceNontrivialType;\n    modifier: ResourceModifier;\n  }) {\n    this.type = args.type;\n    this.modifier = args.modifier;\n  }\n\n  public hash(): string {\n    return this.type.toString() + ',' + this.modifier.toString();\n  }\n}\n\nexport type PlayerUIState = {\n  // DEPRECATED\n  selectedPointNode: PointNodeRef | undefined;\n  activeTab: number;\n\n  // NOT DEPRECATED\n  isPixiHidden: boolean;\n  /**\n   * Determines where in the universe the user has scrolled to.\n   */\n  virtualGridLocation: Vector3;\n  /**\n   * Which, if any, node is highlighted with a selection cursor\n   */\n  cursoredNodeLocation: Vector3 | undefined;\n  /**\n   * state of the sidebar component\n   */\n  isSidebarOpen: boolean;\n\n  // WIP?\n  virtualApproximateScroll?: Vector2;\n  strategicGridLocation?: Vector3;\n};\n","import { EPSILON } from '../epsilon_math';\nimport { Util } from '../misc';\nimport { IVector2, Vector2 } from './vector2';\n\nexport interface IVector3 {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport class Vector3 {\n  private _x: number;\n  private _y: number;\n  private _z: number;\n\n  public get x(): number {\n    return this._x;\n  }\n  public get y(): number {\n    return this._y;\n  }\n  public get z(): number {\n    return this._z;\n  }\n\n  constructor();\n  constructor(x: number, y: number, z: number);\n  constructor(props: IVector3);\n  constructor(\n    propsOrX: IVector3 | number = { x: 0, y: 0, z: 0 },\n    y?: number,\n    z?: number\n  ) {\n    if (typeof propsOrX === 'number') {\n      this._x = propsOrX;\n      this._y = y!;\n      this._z = z!;\n    } else {\n      this._x = propsOrX.x;\n      this._y = propsOrX.y;\n      this._z = propsOrX.z;\n    }\n  }\n\n  // public get half(): Vector3 {\n  //   return new Vector3({ x: this.x / 2, y: this.y / 2 });\n  // }\n\n  public static Zero: Vector3 = new Vector3(0, 0, 0);\n  public static One: Vector3 = new Vector3(1, 1, 1);\n\n  static IsVector3(x: any): x is Vector3 {\n    return x instanceof Vector3;\n  }\n\n  static FromVector2(p: IVector2, z: number = 0) {\n    return new Vector3(p.x, p.y, z);\n  }\n\n  // static Random(highX: number, highY: number, lowX = 0, lowY = 0) {\n  //   return new Vector3({\n  //     x: Util.RandRange(lowX, highX),\n  //     y: Util.RandRange(lowY, highY),\n  //   });\n  // }\n\n  hash(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return `[${this.x}, ${this.y}, ${this.z}]`;\n  }\n\n  // invert(): Vector3 {\n  //   return new Vector3({\n  //     x: -this.x,\n  //     y: -this.y,\n  //   });\n  // }\n\n  // round(): Vector3 {\n  //   return new Vector3({\n  //     x: Math.round(this.x),\n  //     y: Math.round(this.y),\n  //   });\n  // }\n\n  // floor(): Vector3 {\n  //   return new Vector3({\n  //     x: Math.floor(this.x),\n  //     y: Math.floor(this.y),\n  //   });\n  // }\n\n  // taxicabDistance(p: Vector3): number {\n  //   return Math.abs(p.x - this.x) + Math.abs(p.y - this.y);\n  // }\n\n  // diagonalDistance(p: IVector3): number {\n  //   return Math.max(Math.abs(p.x - this.x), Math.abs(p.y - this.y));\n  // }\n\n  // distance(p: IVector3): number {\n  //   let dx = Math.abs(p.x - this.x);\n  //   let dy = Math.abs(p.y - this.y);\n\n  //   return Math.sqrt(dx * dx + dy * dy);\n  // }\n\n  // translate(p: { x: number; y: number }): Vector3 {\n  //   return new Vector3({\n  //     x: this.x + p.x,\n  //     y: this.y + p.y,\n  //   });\n  // }\n\n  subtract(p: IVector3): Vector3 {\n    return new Vector3({\n      x: this.x - p.x,\n      y: this.y - p.y,\n      z: this.z - p.z,\n    });\n  }\n\n  add(pOrX: IVector3 | number, y?: number, z?: number): Vector3 {\n    if (typeof pOrX === 'number') {\n      return new Vector3({\n        x: this.x + pOrX,\n        y: this.y + y!,\n        z: this.z + z!,\n      });\n    } else {\n      return new Vector3({\n        x: this.x + pOrX.x,\n        y: this.y + pOrX.y,\n        z: this.z + pOrX.z,\n      });\n    }\n  }\n\n  addX(x: number): Vector3 {\n    return new Vector3({\n      x: this.x + x,\n      y: this.y,\n      z: this.z,\n    });\n  }\n\n  addY(y: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: this.y + y,\n      z: this.z,\n    });\n  }\n\n  addZ(z: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: this.y,\n      z: this.z + z,\n    });\n  }\n\n  subtractX(x: number): Vector3 {\n    return new Vector3({\n      x: this.x - x,\n      y: this.y,\n      z: this.z,\n    });\n  }\n\n  subtractY(y: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: this.y - y,\n      z: this.z,\n    });\n  }\n\n  subtractZ(z: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: this.y,\n      z: this.z - z,\n    });\n  }\n\n  // clampY(low: number, high: number): Vector3 {\n  //   let newY = this.y;\n\n  //   if (newY < low) {\n  //     newY = low;\n  //   }\n  //   if (newY > high) {\n  //     newY = high;\n  //   }\n\n  //   return new Vector3({\n  //     x: this.x,\n  //     y: newY,\n  //   });\n  // }\n\n  scale(about: IVector3, amount: IVector3): Vector3 {\n    return new Vector3({\n      x: (this.x - about.x) * amount.x + about.x,\n      y: (this.y - about.y) * amount.y + about.y,\n      z: (this.z - about.z) * amount.z + about.z,\n    });\n  }\n\n  // rotate(origin: Vector3, angle: number): Vector3 {\n  //   angle = angle / (180 / Math.PI);\n\n  //   return new Vector3({\n  //     x:\n  //       Math.cos(angle) * (this.x - origin.x) -\n  //       Math.sin(angle) * (this.y - origin.y) +\n  //       origin.x,\n  //     y:\n  //       Math.sin(angle) * (this.x - origin.x) +\n  //       Math.cos(angle) * (this.y - origin.y) +\n  //       origin.y,\n  //   });\n  // }\n\n  equals(other: IVector3 | undefined): boolean {\n    if (other === undefined) {\n      return false;\n    }\n\n    return (\n      Math.abs(this.x - other.x) < EPSILON &&\n      Math.abs(this.y - other.y) < EPSILON &&\n      Math.abs(this.z - other.z) < EPSILON\n    );\n  }\n\n  multiply(other: IVector3 | number): Vector3 {\n    if (typeof other === 'number') {\n      return new Vector3({\n        x: this.x * other,\n        y: this.y * other,\n        z: this.z * other,\n      });\n    } else {\n      return new Vector3({\n        x: this.x * other.x,\n        y: this.y * other.y,\n        z: this.z * other.z,\n      });\n    }\n  }\n\n  divide(other: IVector3 | number): Vector3 {\n    if (typeof other === 'number') {\n      return new Vector3({\n        x: this.x / other,\n        y: this.y / other,\n        z: this.z / other,\n      });\n    } else {\n      return new Vector3({\n        x: this.x / other.x,\n        y: this.y / other.y,\n        z: this.z / other.z,\n      });\n    }\n  }\n\n  toJSON(): any {\n    return {\n      __type: 'Vector3',\n      x: this.x,\n      y: this.y,\n      z: this.z,\n    };\n  }\n\n  // transform(trans: Vector3, scale: number): Vector3 {\n  //   return new Vector3({\n  //     x: Math.floor((this.x - trans.x) * scale),\n  //     y: Math.floor((this.y - trans.y) * scale),\n  //   });\n  // }\n\n  // normalize(): Vector3 {\n  //   if (this.x === 0 && this.y === 0) {\n  //     return this;\n  //   }\n\n  //   const length = Math.sqrt(this.x * this.x + this.y * this.y);\n\n  //   return new Vector3({\n  //     x: this.x / length,\n  //     y: this.y / length,\n  //   });\n  // }\n\n  pairXY(): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: this.y,\n    });\n  }\n\n  withX(newX: number): Vector3 {\n    return new Vector3({\n      x: newX,\n      y: this.y,\n      z: this.z,\n    });\n  }\n\n  withY(newY: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: newY,\n      z: this.z,\n    });\n  }\n\n  withZ(newZ: number): Vector3 {\n    return new Vector3({\n      x: this.x,\n      y: this.y,\n      z: newZ,\n    });\n  }\n\n  // invertX(): Vector3 {\n  //   return new Vector3({\n  //     x: -this.x,\n  //     y: this.y,\n  //   });\n  // }\n\n  // lerp(other: Vector3, t: number): Vector3 {\n  //   if (t > 1 || t < 0) {\n  //     console.error('Lerp t must be between 0 and 1.');\n  //   }\n  //   if (t === 0) return this;\n  //   if (t === 1) return other;\n\n  //   return this.scale({ x: 0, y: 0 }, { x: 1 - t, y: 1 - t }).add(\n  //     other.scale({ x: 0, y: 0 }, { x: t, y: t })\n  //   );\n  // }\n\n  // lerp2D(other: Vector3, tx: number, ty: number): Vector3 {\n  //   if (tx > 1 || tx < 0 || ty > 1 || ty < 0) {\n  //     console.error('Lerp t must be between 0 and 1.');\n  //   }\n  //   return this.scale({ x: 0, y: 0 }, { x: 1 - tx, y: 1 - ty }).add(\n  //     other.scale({ x: 0, y: 0 }, { x: tx, y: ty })\n  //   );\n  // }\n\n  // coserp(other: Vector3, t: number): Vector3 {\n  //   t = 0.5 * (1 + Math.cos(2 * t * Math.PI));\n\n  //   return this.lerp(other, t);\n  // }\n\n  static Deserialize(obj: any): Vector3 {\n    if (\n      !obj.hasOwnProperty('x') ||\n      !obj.hasOwnProperty('y') ||\n      !obj.hasOwnProperty('z')\n    ) {\n      console.error('Failed deserializing vector3');\n    }\n\n    return new Vector3({\n      x: obj.x,\n      y: obj.y,\n      z: obj.z,\n    });\n  }\n\n  static Serialize(obj: IVector3): string {\n    return JSON.stringify({ x: obj.x, y: obj.y });\n  }\n}\n","import { Vector2 } from '../../../lib/util/geometry/vector2';\nimport { Vector3 } from '../../../lib/util/geometry/vector3';\nimport { INTMAX32, squirrel3 } from '../../../lib/util/random';\nimport {\n  randomDice,\n  randomSwitch,\n  randomUniform,\n  randomValue,\n} from '../../../lib/util/randomHelpers';\n\ntype NodeContentsFactoryConfig = {};\n\nexport interface NodeContents {\n  lines: NodeContentsLine[];\n\n  condition?: NodeContentsCondition;\n}\n\nexport interface NodeContentsCondition {\n  type: 'SPEND';\n  attribute: Attribute;\n  amount: number;\n}\n\nexport interface NodeContentsLine {\n  amount: number;\n  attribute: Attribute;\n  modifier: Modifier;\n}\n\nexport enum Attribute {\n  RED0 = 'RED0',\n  RED1 = 'RED1',\n  RED2 = 'RED2',\n  DEL0 = 'DEL0',\n  DEL1 = 'DEL1',\n  DEL2 = 'DEL2',\n}\n\nexport enum Modifier {\n  FLAT = 'FLAT',\n  INCREASED = 'INCREASED',\n}\n\nconst WEIGHTS = {\n  DECISION_0: {\n    EMPTY: 800,\n    NO_SPEND: 100,\n    SPEND: 10,\n  },\n  DECISION_1: {\n    SINGLE: 500,\n    DOUBLE: 100,\n  },\n};\n\nexport class NodeContentsFactory {\n  public config: NodeContentsFactoryConfig;\n\n  constructor(config: NodeContentsFactoryConfig) {\n    this.config = config;\n  }\n\n  private createSingle(args: { randInt: number }): NodeContentsLine {\n    const attribute = randomValue<typeof Attribute>({\n      randInt: args.randInt,\n      weights: {\n        [Attribute.RED0]: 100,\n        [Attribute.RED1]: 100,\n        [Attribute.RED2]: 100,\n        [Attribute.DEL0]: 10,\n        [Attribute.DEL1]: 10,\n        [Attribute.DEL2]: 10,\n      },\n    });\n\n    const modifier = randomValue<typeof Modifier>({\n      randInt: squirrel3(args.randInt),\n      weights: {\n        [Modifier.FLAT]: 100,\n        [Modifier.INCREASED]: 75,\n      },\n    });\n\n    let amount = 0;\n    if (modifier === Modifier.FLAT) {\n      amount = randomDice({\n        randInt: squirrel3(args.randInt + 1),\n        formula: '2d6',\n        plus: 8,\n      });\n    } else {\n      amount = randomUniform({\n        randInt: squirrel3(args.randInt + 2),\n        min: 4,\n        max: 7,\n        increment: 0.5,\n        inclusive: true,\n      });\n    }\n\n    return {\n      attribute: Attribute[attribute],\n      amount,\n      modifier: Modifier[modifier],\n    };\n  }\n\n  private createNoSpend(args: { randInt: number }): NodeContents {\n    return randomSwitch<NodeContents>({\n      randInt: args.randInt,\n      weights: WEIGHTS.DECISION_1,\n      behaviors: {\n        SINGLE: (randInt) => {\n          return {\n            lines: [this.createSingle({ randInt })],\n          };\n        },\n        DOUBLE: (randInt) => {\n          return {\n            lines: [\n              this.createSingle({ randInt }),\n              this.createSingle({ randInt: squirrel3(randInt) }),\n            ],\n          };\n        },\n      },\n    });\n  }\n\n  public create(args: { seed: number; location: Vector3 }): NodeContents {\n    const { seed, location } = args;\n    if (location.equals(Vector3.Zero)) {\n      return {\n        lines: [],\n      };\n    }\n\n    return randomSwitch<NodeContents>({\n      randInt: squirrel3(\n        seed +\n          location.x +\n          location.y +\n          squirrel3(seed + location.x + location.z)\n      ),\n      weights: WEIGHTS.DECISION_0,\n      behaviors: {\n        EMPTY: (randInt: number) => {\n          return {\n            lines: [],\n          };\n        },\n        NO_SPEND: (randInt: number) => {\n          return this.createNoSpend({ randInt });\n        },\n        SPEND: (randInt: number) => {\n          const base = this.createNoSpend({ randInt });\n\n          const attribute = randomValue<typeof Attribute>({\n            randInt,\n            weights: {\n              [Attribute.RED0]: 100,\n              [Attribute.RED1]: 100,\n              [Attribute.RED2]: 100,\n              [Attribute.DEL0]: 0,\n              [Attribute.DEL1]: 0,\n              [Attribute.DEL2]: 0,\n            },\n          });\n\n          return {\n            ...base,\n            condition: {\n              type: 'SPEND',\n              amount: 12,\n              attribute: Attribute[attribute],\n            },\n          };\n        },\n      },\n    });\n  }\n}\n","import { INTMAX32, squirrel3 } from './random';\n\nexport function randomSwitch<T>(args: {\n  randInt: number;\n  weights: { [k: string]: number };\n  behaviors: { [k: string]: (randInt: number) => T };\n}): T {\n  const { randInt, weights, behaviors } = args;\n  const p = randInt / INTMAX32;\n  const newRandInt = squirrel3(randInt);\n  const weightTotal = Object.values(weights).reduce((pv, cv) => pv + cv);\n  let unusedWeight = p * weightTotal;\n  for (const [key, weight] of Object.entries(weights)) {\n    if (unusedWeight <= weight) {\n      // use key\n      return behaviors[key](newRandInt);\n    } else {\n      unusedWeight -= weight;\n    }\n  }\n  throw Error();\n}\n\nexport function randomValue<T>(args: {\n  randInt: number;\n  weights: { [k in keyof T]: number };\n}): keyof T {\n  const { randInt, weights } = args;\n  const p = randInt / INTMAX32;\n  const weightTotal = (Object.values(weights) as number[]).reduce(\n    (pv, cv) => pv + cv\n  );\n  let unusedWeight = p * weightTotal;\n  for (const [key, weight] of Object.entries(weights) as [keyof T, number][]) {\n    if (unusedWeight <= weight) {\n      // use key\n      return key;\n    } else {\n      unusedWeight -= weight;\n    }\n  }\n  throw Error();\n}\n\nexport function randomUniform(args: {\n  randInt: number;\n  min: number;\n  max: number;\n  increment?: number;\n  inclusive?: boolean;\n}): number {\n  const { randInt, min, max, increment = 1, inclusive = true } = args;\n  const p = randInt / INTMAX32;\n  let numBuckets = Math.ceil((max - min) / increment);\n  if (min + increment * numBuckets === max && inclusive === true) {\n    numBuckets += 1;\n  }\n  const g = Math.floor(p * numBuckets);\n  return min + g * increment;\n}\n\nexport function randomDice(args: {\n  randInt: number;\n  formula: string;\n  plus?: number;\n}): number {\n  const { randInt, formula, plus = 0 } = args;\n  const numDice = parseInt(formula.split('d')[0]);\n  const numPips = parseInt(formula.split('d')[1]);\n  let val = 0;\n  for (let i = 0; i < numDice; i++) {\n    val += randomUniform({\n      randInt: squirrel3(randInt + i),\n      min: 1,\n      max: numPips,\n      inclusive: true,\n    });\n  }\n  return val + plus;\n}\n","import {\n  Attribute,\n  Modifier,\n  NodeContentsCondition,\n  NodeContentsLine,\n} from './NodeContentsFactory';\n\nexport const AttributeSymbolMap = {\n  [Attribute.RED0]: '🔴',\n  [Attribute.RED1]: '🟢',\n  [Attribute.RED2]: '🔵',\n  [Attribute.DEL0]: '⚔️',\n  [Attribute.DEL1]: '🛡',\n  [Attribute.DEL2]: '✨',\n};\n\nexport const AttributeDescriptionMap = {\n  [Attribute.RED0]: 'Red',\n  [Attribute.RED1]: 'Green',\n  [Attribute.RED2]: 'Blue',\n  [Attribute.DEL0]: 'Offense',\n  [Attribute.DEL1]: 'Defense',\n  [Attribute.DEL2]: 'Magic',\n};\n\nexport const ModifierDescriptionMap = {\n  [Modifier.FLAT]: 'flat',\n  [Modifier.INCREASED]: 'increased',\n};\n\nexport function nodeContentsLineToString(line: NodeContentsLine): string {\n  if (line.modifier === Modifier.FLAT) {\n    return `+${line.amount} ${AttributeDescriptionMap[line.attribute]}`;\n  } else {\n    return `${line.amount}% increased ${\n      AttributeDescriptionMap[line.attribute]\n    }`;\n  }\n}\n\nexport function nodeContentsConditionToString(\n  condition: NodeContentsCondition\n): string {\n  return `SPEND: ${condition.amount} ${\n    AttributeDescriptionMap[condition.attribute]\n  }`;\n}\n","/**\n * Intended as a typescript-friendly replacement for {[k: string]: boolean} that allows us to specify what the key type should be (\n * rather than allowing any keyType.toString() to be a valid key, and without going through the trouble of declaring distinguishable\n * types for each key type we want to use). Also serves as a slightly different version of ES6 native Set(), which is hardcoded\n * to use === for object referential equality.\n *\n * NOTE: this assume hash() is a strong test for equality, i.e. 2 objects are considered equal if and only if their hashes are the same!!!\n * TODO: write StrictHashSet<K extends {hash(): string, equals(k: K): boolean}> to handle custom equality checks\n */\nexport class HashSet<K extends { hash(): string }> {\n  private _values: HashMap<K, K>;\n\n  constructor(initialValues: K[] = []) {\n    this._values = new HashMap<K, K>();\n\n    for (const value of initialValues) {\n      this.put(value);\n    }\n  }\n\n  remove(key: K): void {\n    this._values.remove(key);\n  }\n\n  put(key: K): void {\n    this._values.put(key, key);\n  }\n\n  get(key: K): boolean {\n    return this._values.get(key) !== undefined;\n  }\n\n  contains(key: K): boolean {\n    return this._values.contains(key);\n  }\n\n  values(): K[] {\n    return this._values.values();\n  }\n\n  // hash(): string {\n  //   return this._values.hashKeyset();\n  // }\n\n  clone(): HashSet<K> {\n    let n = new HashSet<K>();\n    n._values = this._values.clone();\n    return n;\n  }\n\n  size(): number {\n    return this._values.size();\n  }\n\n  equals(other: HashSet<K> | undefined | null) {\n    if (other === undefined || other === null) {\n      return false;\n    }\n\n    if (this.size() !== other.size()) {\n      return false;\n    }\n\n    for (let k of this.values()) {\n      if (!other.contains(k)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // *[Symbol.iterator]() {\n  //   // construct a new iterator. note that as usual\n  //   for (let key of Object.keys(this._values)) {\n  //     yield key;\n  //   }\n  // }\n}\n\n/**\n * Intended as a typescript-friendly replacement for {[k: string]: V} that allows us to specify what the key type should be (\n * rather than allowing any keyType.toString() to be a valid key, and without going through the trouble of declaring distinguishable\n * types for each key type we want to use). Also serves as a slightly different version of ES6 native Map(), which is hardcoded\n * to use === for object referential equality.\n *\n * NOTE: this assume hash() is a strong test for equality, i.e. 2 objects are considered equal if and only if their hashes are the same!!!\n * TODO: write StrictHashMap<K extends {hash(): string, equals(K): boolean}> to handle custom equality checks\n */\nexport class HashMap<K extends { hash(): string }, V> {\n  protected _values: { [key: string]: V } = {};\n\n  constructor(initialValues: [K, V][] = []) {\n    for (const [key, value] of initialValues) {\n      this.put(key, value);\n    }\n  }\n\n  put(key: K, value: V) {\n    this._values[key.hash()] = value;\n  }\n\n  remove(key: K): void {\n    delete this._values[key.hash()];\n  }\n\n  get(key: K): V | undefined {\n    return this._values[key.hash()];\n  }\n\n  contains(key: K): boolean {\n    // V may be an undefined type\n    return this.get(key) !== undefined && key.hash() in this._values;\n  }\n\n  values(): V[] {\n    return Object.values(this._values);\n    // return Object.keys(this._values).map(key => this._values[key]); // why grant???\n  }\n\n  // *[Symbol.iterator]() {\n  //   // construct a new iterator. note that as usual editing the object during iteration is not supported\n  //   for (let key of Object.keys(this._values)) {\n  //     yield key;\n  //   }\n  // }\n\n  // hashes only the keys - use HashableHashMap if you know that the value type here is also hashable\n  // hashKeyset(): string {\n  //   const hashes: number[] = Object.keys(this._values).map(s => hashCode(s));\n  //   let code: number = hashes.reduce((pv, cv) => pv + cv);\n  //   return code.toString();\n  // }\n\n  size(): number {\n    return Object.keys(this._values).length;\n  }\n\n  clone(): HashMap<K, V> {\n    let n = new HashMap<K, V>();\n    n._values = { ...this._values };\n    return n;\n  }\n}\n\nexport class HashableHashMap<\n  K extends { hash(): string },\n  V extends { hash(): string }\n> extends HashMap<K, V> {\n  hash(): string {\n    const hashes: number[] = Object.entries(this._values).map(\n      ([s, v]) => hashCode(s) + hashCode(v.hash())\n    );\n    let code: number = hashes.reduce((pv, cv) => pv + cv);\n    return code.toString();\n  }\n}\n\n/**\n * Same as HashMap, but actually stores the keys used to key the hashmap, instead of just their hashes.\n * Allows iteration over the full key-value pair set.\n */\nexport class KeyedHashMap<K extends { hash(): string }, V> {\n  private _kvalues: { [key: string]: [K, V] } = {};\n\n  constructor(initialValues: [K, V][] = []) {\n    for (const [key, value] of initialValues) {\n      this.put(key, value);\n    }\n  }\n\n  put(key: K, value: V) {\n    this._kvalues[key.hash()] = [key, value];\n  }\n\n  remove(key: K): void {\n    delete this._kvalues[key.hash()];\n  }\n\n  get(key: K): V | undefined {\n    return this._kvalues[key.hash()]?.[1];\n  }\n\n  contains(key: K): boolean {\n    // V may be an undefined type\n    return this.get(key) !== undefined && key.hash() in this._kvalues;\n  }\n\n  keys(): K[] {\n    return Object.keys(this._kvalues).map((key) => this._kvalues[key][0]);\n  }\n\n  entries(): [K, V][] {\n    return Object.keys(this._kvalues).map((key) => this._kvalues[key]);\n  }\n\n  values(): V[] {\n    return Object.keys(this._kvalues).map((key) => this._kvalues[key][1]);\n  }\n\n  hashKeyset(): string {\n    const hashes: number[] = Object.keys(this._kvalues).map((s) => hashCode(s));\n    let code: number = hashes.reduce((pv, cv) => pv + cv);\n    return code.toString();\n  }\n\n  clone(): KeyedHashMap<K, V> {\n    let n = new KeyedHashMap<K, V>();\n    n._kvalues = { ...this._kvalues };\n    return n;\n  }\n\n  size(): number {\n    return Object.keys(this._kvalues).length;\n  }\n}\n\nexport class DefaultHashMap<K extends { hash(): string }, V> {\n  private _values: { [key: string]: V } = {};\n  private _makeDefault: () => V;\n\n  constructor(makeDefaultValue: () => V) {\n    this._makeDefault = makeDefaultValue;\n  }\n\n  put(key: K, value: V) {\n    this._values[key.hash()] = value;\n  }\n\n  get(key: K): V {\n    if (this._values[key.hash()] === undefined) {\n      this._values[key.hash()] = this._makeDefault();\n    }\n\n    return this._values[key.hash()];\n  }\n}\n\n// Hash a string to a number. source: https://gist.github.com/hyamamoto/fd435505d29ebfa3d9716fd2be8d42f0\nexport function hashCode(s: string): number {\n  let h = 0;\n  for (let i = 0; i < s.length; i++) {\n    h = (Math.imul(31, h) + s.charCodeAt(i)) | 0;\n  }\n  return h;\n}\n\n// declare global {\n//   interface Array<T extends { hash(): string }> {\n//     hash(): string\n//   }\n//\n//   interface Number {\n//     hash(): string\n//   }\n//\n//   interface String {\n//     hash(): String\n//   }\n// }\n//\n// Array.prototype.hash = function () {\n//   return hashArray(this);\n// }\n//\n// Number.prototype.hash = function () {\n//   return this.toString();\n// }\n//\n// String.prototype.hash = function () {\n//   return this;\n// }\n//\n// function hashArray<T extends { hash(): string }>(arr: T[]): string {\n//   return arr.map(elt => hashCode(elt.hash())).reduce((pv, cv) => 31 * pv + cv).hash();\n// }\n//\n","let COLORS = {\n  // good colors\n  backgroundBlue: 0x222222,\n  // nodePink: 0xeeaaaa,\n  // nodeLavender: 0xcc88ee,\n  // nodeBlue: 0x99bbff,\n  // nodeAqua: 0xbbccdd,\n  // nodeGrey: 0xddffdd,\n\n  // shitty colors\n  // backgroundBlue: 0xffffff,\n  nodePink: 0x332244,\n  nodeLavender: 0x777777,\n  nodeBlue: 0xdddddd,\n\n  // used for lock nodes\n  nodeAqua: 0xffaaaa,\n  // gateTint: 0xaaaaaa,\n  gateTint: 0xffffff,\n\n  selectedTint: 0xbbbbff,\n  allocatedTint: 0x444444,\n  nodeBorder: 0x666666,\n  nullTint: 0xffffff,\n\n  // colors that dont matter too much\n  tooltipBorderBlack: 0x222222,\n  tooltipFillWhite: 0xeeeeee,\n  white: 0xffffff,\n  grayBlack: 0x1d1d1d,\n  borderBlack: 0x111111,\n  borderWhite: 0x666666,\n  black: 0x000000,\n};\n\n// baseColor = 0xccee88; // bright yellow green\n// baseColor = 0xcccccc; // gray almost invisible\n// baseColor = 0xccccee; // lavender almost invisible\n// baseColor = 0xaacccc; // lavender almost invisible\n// baseColor = 0xdddddd; // grayish white?\n// baseColor = 0xaaaaaa; // dark grayish brown\n// baseColor = 0x777777; // very dark brown\n\nexport default COLORS;\n\nexport function colorToCss(c: number): string {\n  return '#' + c.toString(16);\n}\n","import './GameAreaCell.css';\nimport './GameArea.css';\n\nimport classnames from 'classnames';\nimport React, { useCallback, useState } from 'react';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { NodeReactData } from './computeVirtualNodeDataMap';\nimport { UpdateStatusCb, NodeAllocatedStatus } from './GameAreaComponent';\n\n/**\n * Smart wrapper for the Cell (rectangular component of a hex grid).\n *\n * Handles sending the click event upstream to cause a status update.\n * @param idx x-coord of this cell in its row of hex cells\n * @param rowIdx y-coord of this row of hex cells\n * @param onUpdateStatus callback for updating the status of this cell\n * @param nodeData react fragments to help render this cell\n * @param isCursored whether or not to display a flashing cursor for this cell\n */\nexport const GameAreaCell = React.memo(GameAreaCellComponent);\nfunction GameAreaCellComponent({\n  idx,\n  rowIdx,\n  onUpdateStatus,\n  nodeData,\n  isCursored,\n  onUpdateCursored,\n}: {\n  idx: number;\n  onUpdateStatus: UpdateStatusCb;\n  rowIdx: number;\n  nodeData: NodeReactData;\n  isCursored: boolean;\n  onUpdateCursored: (v: Vector2 | undefined) => void;\n}) {\n  // console.log('GameAreaCell rerendered');\n\n  const handleClick = useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation();\n      e.preventDefault();\n      // console.log(`clicked`);\n      // console.log({ idx, rowIdx, status: nodeData.status });\n      onUpdateStatus({\n        virtualDims: new Vector2(idx, rowIdx),\n        newStatus: NodeAllocatedStatus.TAKEN,\n      });\n    },\n    [onUpdateStatus, nodeData.status, idx, rowIdx]\n  );\n\n  const handleClickQuestionMark = useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation();\n      e.preventDefault();\n      onUpdateCursored(isCursored ? undefined : new Vector2(idx, rowIdx));\n    },\n    [isCursored, onUpdateCursored]\n  );\n\n  return (\n    <Cell\n      onClickCenter={handleClick}\n      nodeData={nodeData}\n      onClickQuestionMark={handleClickQuestionMark}\n      isCursored={isCursored}\n    ></Cell>\n  );\n}\n\n/**\n * Renderes a single rectangular component of a hex grid.\n * Contains a central node, hover-over tooltips attached to the node, and optionally 2 rectangular text boxes\n * that represent the locked state.\n *\n * @param onClickCenter callback to fire when the node itself (as opposed to the region around it) is clicked.\n * @param onClickQuestionMark callback to fire when the question mark tooltip icon is clicked.\n */\nconst Cell = React.memo(CellComponent);\nfunction CellComponent({\n  onClickCenter,\n  onClickQuestionMark,\n  nodeData,\n  isCursored,\n}: {\n  onClickCenter: React.MouseEventHandler;\n  onClickQuestionMark: React.MouseEventHandler;\n  nodeData: NodeReactData;\n  isCursored: boolean;\n}) {\n  const status = nodeData.status;\n  const isLocked = !!nodeData.lockData;\n\n  return (\n    <div className=\"hex-block hex-full-block\">\n      <div\n        className={classnames(\n          'hex-center',\n          status === NodeAllocatedStatus.TAKEN\n            ? 'node-allocated'\n            : 'node-unallocated',\n          status === NodeAllocatedStatus.TAKEN ||\n            status === NodeAllocatedStatus.UNREACHABLE\n            ? 'border-unimportant'\n            : 'border-important'\n        )}\n        onClick={onClickCenter}\n        hidden={status === NodeAllocatedStatus.HIDDEN}\n      >\n        <div className=\"hex-center-text-wrapper\">\n          <div className=\"tiny-text\">{nodeData.shortText}</div>\n        </div>\n      </div>\n      {isLocked ? (\n        <div\n          className=\"hex-center-lock\"\n          hidden={status === NodeAllocatedStatus.HIDDEN}\n        >\n          <div className=\"hex-center-lock-left\">\n            <div className=\"tiny-text\">\n              {nodeData.lockData?.shortTextTarget}\n            </div>\n          </div>\n          <div className=\"hex-center-lock-right\">\n            <div className=\"tiny-text\">{nodeData.lockData?.shortTextTimer}</div>\n          </div>\n        </div>\n      ) : null}\n      <div className=\"empty-positioned\">\n        <div className=\"hover-only-2 absolute-positioned\">\n          <div\n            className=\"question\"\n            hidden={status === NodeAllocatedStatus.HIDDEN}\n            onClick={onClickQuestionMark}\n          >\n            ?\n          </div>\n        </div>\n      </div>\n      <div className=\"empty-positioned node-tooltip-wrapper\">\n        <div className=\"hover-only absolute-positioned node-tooltip\">\n          {nodeData.toolTipText}\n        </div>\n      </div>\n      <div className=\"empty-positioned selection-cursor-wrapper\">\n        <div\n          className=\"absolute-positioned selection-cursor\"\n          hidden={!isCursored}\n        ></div>\n      </div>\n    </div>\n  );\n}\n","import './GameAreaComponent.css';\nimport './GameArea.css';\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { KeyedHashMap } from '../../lib/util/data_structures/hash';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport COLORS, { colorToCss } from '../../pixi/colors';\nimport { IntentName, PlayerIntentState } from '../../data/GameState';\nimport { Vector3 } from '../../lib/util/geometry/vector3';\nimport { NodeReactData } from './computeVirtualNodeDataMap';\nimport { hexGridPx, hexCenterRadius } from './GameAreaStateManager';\nimport { GameAreaCell } from './GameAreaCell';\n\n/**\n * TODO(bowei): move these enums out of here into game state\n */\nexport enum NodeAllocatedStatus {\n  // DEPRECATED\n  TAKEN = 'TAKEN',\n\n  // NOT DEPRECATED\n  VISIBLE = 'VISIBLE',\n  HIDDEN = 'HIDDEN',\n  AVAILABLE = 'AVAILABLE', // availability status regardless of locks, only taking into account connectivity\n  UNREACHABLE = 'UNREACHABLE',\n}\n\nexport enum LockStatus {\n  CLOSED = 'CLOSED',\n  TICKING = 'TICKING',\n  OPEN = 'OPEN',\n}\n\nexport type UpdateStatusCb = (args: {\n  virtualDims: Vector2;\n  newStatus: NodeAllocatedStatus;\n}) => void;\n\nexport const GameAreaComponent = React.memo(GameArea);\n/**\n * Dumb-ish component that manages the game board where the skill tree is located, as well as the \"virtual\"\n * game space which is larger than the currently visible scrollable area the player can see.\n *\n * @param hidden whether this component is visible or not.\n * @param appSize the size of the area used to play the game\n * @param intent keyboard controls mapped to \"intents\" i.e. game functions\n * @param virtualGridDims the integer dimensions of the virtual scrollable space, measured in grid units.\n * @param jumpOffset integers. if non-null, jump callbackwas recently requested. otherwise it is guaranteed to be identical object reference as the last time this component was rendered.\n * @param virtualDimsToLocation utility stateless function to convert from ui virtual grid dims (ints) to 3d node location in game state (ints)\n * @param virtualGridStatusMap table of ui grid location to object containing react fragments for contents of that node\n * @param updateNodeStatusCb callback for when a node is allocated and the node status needs to change.\n * @param onJump callback for when this component wants to communicate that a jump should be triggered. the jump offset is then supposed to come down as props in the next render cycle.\n * @param cursoredVirtualNode 2d virtual dims of the node which is currently cursored (flashing and may show up in sidebar), or undefined if there is none\n * @param setCursoredVirtualNode callback which takes virtual 2d coords and causes that node to now be cursored.\n * @param keyboardScrollDirection if nonzero, player is trying to scroll using keyboard controls\n */\nfunction GameArea(props: {\n  hidden: boolean;\n  appSize: Vector2;\n  // intent: PlayerIntentState;\n  // virtualSize: Vector2; // in pixels\n  virtualGridDims: Vector2; // in grid units. width x height, width is guaranteed to be half-integer value\n  // this object reference is guaranteed to be stable unless jump cb is called\n\n  jumpOffset?: Vector2; // if non-null, jump callback was recently requested, and this is the recommended jump offset in grid dims\n  virtualDimsToLocation: (v: Vector2) => Vector3;\n  virtualGridStatusMap: KeyedHashMap<Vector2, NodeReactData>;\n  // specify virtual coordinates of the node and the new status to cause an update.\n  updateNodeStatusCb: UpdateStatusCb;\n  onJump: (args: { direction: Vector2 }) => void;\n  cursoredVirtualNode: Vector2 | undefined;\n  setCursoredVirtualNode: (v: Vector2 | undefined) => void;\n  keyboardScrollDirection: Vector2;\n}) {\n  // console.log('Game area component rerender');\n\n  const container = useRef<HTMLDivElement>(null);\n  const previousContainer = useRef<HTMLDivElement>(null) as any;\n  const gridWidth = hexGridPx.x;\n  const gridHeight = hexGridPx.y;\n\n  // Set css variables from react\n  useEffect(() => {\n    document.documentElement.style.setProperty(\n      '--grid-width',\n      ` ${hexGridPx.x}px`\n    );\n    document.documentElement.style.setProperty(\n      '--grid-height',\n      ` ${hexGridPx.y}px`\n    );\n  }, [hexGridPx]);\n  useEffect(() => {\n    document.documentElement.style.setProperty(\n      '--hex-center-radius',\n      ` ${hexCenterRadius}px`\n    );\n  }, [hexCenterRadius]);\n  useEffect(() => {\n    document.documentElement.style.setProperty(\n      '--background-black',\n      colorToCss(COLORS.backgroundBlue)\n    );\n    document.documentElement.style.setProperty(\n      '--deemphasized-black',\n      colorToCss(COLORS.grayBlack)\n    );\n    document.documentElement.style.setProperty(\n      '--active-purple',\n      colorToCss(COLORS.nodePink)\n    );\n    document.documentElement.style.setProperty(\n      '--border-unimportant-black',\n      colorToCss(COLORS.borderBlack)\n    );\n    document.documentElement.style.setProperty(\n      '--border-important-white',\n      colorToCss(COLORS.borderWhite)\n    );\n  }, [COLORS]);\n  useEffect(() => {\n    document.documentElement.style.setProperty(\n      '--app-size-width',\n      ` ${props.appSize.x}px`\n    );\n    document.documentElement.style.setProperty(\n      '--app-size-height',\n      ` ${props.appSize.y}px`\n    );\n  }, [props.appSize]);\n\n  // Receives a Vector2 instance jumpOffset,\n  // and uses offset to jump to a new scroll position\n  useEffect(() => {\n    const jumpOffset = props.jumpOffset;\n    // console.log({ receivedJumpOffset: jumpOffset }, +new Date());\n    if (!jumpOffset) return;\n    const ref = container.current;\n    if (!ref) return;\n    ref.scrollTo(\n      ref.scrollLeft - jumpOffset.x * gridWidth,\n      ref.scrollTop - jumpOffset.y * gridHeight\n    );\n  }, [props.jumpOffset]);\n\n  /**\n   * Detect if the user has scrolled to the edge of the screen, and if so trigger a scroll jump\n   */\n  const handleScroll = useCallback(\n    (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n      // console.log(\"NOW IN handlescroll\");\n      // handle scroll\n      let direction = { x: 0, y: 0 };\n      const target = e.target! as Element;\n      let newScrollTop = target.scrollTop; // only used as boolean to see if it changed\n      let newScrollLeft = target.scrollLeft;\n      if (target.scrollTop < gridHeight * 0.4) {\n        // between 0.1 and 0.4 of leeway is recommended. increasing it more helps with lag but also incurs more virtual area cost.\n        newScrollTop += gridHeight * 2;\n        direction.y -= 1;\n      }\n      if (\n        target.scrollTop >\n        (props.virtualGridDims.y - 0.4) * gridHeight - props.appSize.y\n      ) {\n        newScrollTop -= gridHeight * 2;\n        direction.y += 1;\n      }\n      if (target.scrollLeft < gridWidth * 0.9) {\n        // between 0.6 and 0.9 of leeway is recommended. increasing it more helps with lag but also incurs more virtual area cost.\n        newScrollLeft += gridWidth * 2;\n        direction.x -= 1;\n      }\n      if (\n        target.scrollLeft >\n        (props.virtualGridDims.x - 0.9) * gridWidth - props.appSize.x\n      ) {\n        newScrollLeft -= gridWidth * 2;\n        direction.x += 1;\n      }\n      // console.log(target);\n      // console.log(target.scrollTop);\n      // console.log(target.scrollLeft);\n\n      if (\n        target.scrollTop !== newScrollTop ||\n        target.scrollLeft !== newScrollLeft\n      ) {\n        // console.log('jump!', +new Date());\n        // target.scrollTo(newScrollLeft, newScrollTop);\n        props.onJump({ direction: new Vector2(direction.x, direction.y) });\n      }\n    },\n    [props.appSize.x, props.appSize.y]\n  );\n\n  // Set initial position in the center, exactly once!\n  useEffect(() => {\n    if (\n      container.current != null &&\n      container.current !== previousContainer.current\n    ) {\n      container.current.scrollTop =\n        (props.virtualGridDims.y * gridHeight - props.appSize.y) / 2;\n      container.current.scrollLeft =\n        ((props.virtualGridDims.x + 0.5) * gridWidth - props.appSize.x) / 2;\n    }\n    previousContainer.current = container.current;\n  }, [container.current, props.appSize]);\n\n  // control scroll with keyboard\n  useEffect(() => {\n    if (!props.keyboardScrollDirection.equals(Vector2.Zero)) {\n      // console.log('nonzero keyboard scroll direction update received');\n\n      let lastTime: number | null = null;\n      const SCROLL_INTERVAL_MS = 8;\n      const VELOCITY = 0.75;\n      const action = () => {\n        const ref = container.current;\n        if (!ref) return;\n        let direction = Vector2.Zero;\n        if (lastTime === null) {\n          direction = props.keyboardScrollDirection.multiply(\n            SCROLL_INTERVAL_MS\n          ); // assume 1 tick\n          lastTime = +new Date();\n        } else {\n          const elapsed = +new Date() - lastTime;\n          if (elapsed > 40) {\n            console.log('WAS SLOW - ' + elapsed.toString());\n          }\n          direction = props.keyboardScrollDirection.multiply(elapsed);\n          lastTime = +new Date();\n        }\n        direction = direction.multiply(VELOCITY);\n        ref.scrollTo(\n          ref.scrollLeft + direction.x,\n          ref.scrollTop - direction.y // scroll is measured from the top left\n        );\n      };\n      const interval = setInterval(action, SCROLL_INTERVAL_MS);\n      action();\n      return () => clearInterval(interval);\n    }\n  }, [props.keyboardScrollDirection, container.current]);\n\n  /**\n   * See pointer/mouse, over/enter/out/leave, event propagation documentation\n   * https://www.w3schools.com/jquery/tryit.asp?filename=tryjquery_event_mouseenter_mouseover#:~:text=mouseenter%20and%20mouseover.-,The%20mouseover%20event%20triggers%20when%20the%20mouse%20pointer%20enters%20the,moved%20over%20the%20div%20element.\n   * https://stackoverflow.com/questions/4697758/prevent-onmouseout-when-hovering-child-element-of-the-parent-absolute-div-withou\n   * https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\n   * https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Examples#example_5_event_propagation\n   * https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation\n   * https://developer.mozilla.org/en-US/docs/Web/API/Event/target\n   * https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n   * https://stackoverflow.com/questions/55546973/react-onmouseenter-event-triggering-on-child-element\n   * https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n   */\n  return (\n    <div\n      ref={container}\n      className=\"game-area hidden-scrollbars\"\n      hidden={props.hidden}\n      onScroll={handleScroll}\n    >\n      <div className=\"virtual-game-area\">\n        {Array(props.virtualGridDims.y)\n          .fill(0)\n          .map((_, y) => (\n            <Row\n              key={props.virtualDimsToLocation(new Vector2(0, y)).y.toString()}\n              rowIdx={y}\n            >\n              {Array(props.virtualGridDims.x)\n                .fill(0)\n                .map((_, x) => {\n                  const virtualCoords = new Vector2(x, y);\n                  const nodeData = props.virtualGridStatusMap.get(\n                    virtualCoords\n                  )!;\n                  return (\n                    <GameAreaCell\n                      nodeData={nodeData}\n                      key={nodeData?.id ?? `loading${x}`}\n                      idx={x}\n                      rowIdx={y}\n                      onUpdateStatus={props.updateNodeStatusCb}\n                      isCursored={\n                        !!props.cursoredVirtualNode &&\n                        props.cursoredVirtualNode.equals(virtualCoords)\n                      }\n                      onUpdateCursored={props.setCursoredVirtualNode}\n                    />\n                  );\n                })}\n            </Row>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nconst Row = React.memo(RowComponent);\n\nfunction RowComponent({\n  rowIdx,\n  children,\n}: {\n  rowIdx: number;\n  children?: React.ReactNode;\n}) {\n  /* https://stackoverflow.com/questions/1015809/how-to-get-floating-divs-inside-fixed-width-div-to-continue-horizontally */\n  const odd = !!(rowIdx % 2);\n\n  return (\n    <div className=\"hex-block-row\">\n      {odd && <div className=\"hex-block hex-half-block\" />}\n      {children}\n      {!odd && <div className=\"hex-block hex-half-block\" />}\n    </div>\n  );\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  GameState,\n  appSizeFromWindowSize,\n  IntentName,\n} from '../../data/GameState';\nimport { AllocateNodeAction } from '../../game/actions/AllocateNode';\nimport {\n  AttributeSymbolMap,\n  nodeContentsLineToString,\n  nodeContentsConditionToString,\n} from '../../game/worldGen/nodeContents/NodeContentsRendering';\nimport { KeyedHashMap } from '../../lib/util/data_structures/hash';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { Vector3 } from '../../lib/util/geometry/vector3';\nimport { UpdaterGeneratorType2 } from '../../lib/util/updaterGenerator';\nimport {\n  computeVirtualNodeDataMap,\n  NodeReactData,\n} from './computeVirtualNodeDataMap';\nimport {\n  GameAreaComponent,\n  LockStatus,\n  NodeAllocatedStatus,\n} from './GameAreaComponent';\nimport {\n  locationToVirtualCoords,\n  virtualCoordsToLocation,\n} from './locationUtils';\n\n/**\n * Approximations for sqrt(3)/2 == ratio of an equilateral triangle's height to its width:\n * 6/7, 13/15, 26/30, 45/52, 58/67, 84/97, 181/209\n * for divisibility -- recommend 26/30, 52/60, 104/120, 168/194, 180/208, 232/268, 336/388\n */\nexport const hexGridPx = new Vector2(268, 232);\n\nexport const hexCenterRadius = 48; // Radius of the circles representing allocatable nodes, in px\n\n/**\n * How much bigger the \"virtual\" (i.e. scrollable) game area is than the visible window.\n * Bigger == more elements rendered which are outside the viewport == worse performance,\n * but need to 'jump' the scroll viewport less often.\n * Recommended default is 3.0\n */\nexport const virtualAreaScaleMultiplier = 3.0;\n\nexport const GameAreaStateManager = React.memo(Component);\nfunction Component(props: {\n  gameState: GameState;\n  updaters: UpdaterGeneratorType2<GameState, GameState>;\n  actions: { allocateNode: AllocateNodeAction };\n}) {\n  const { gameState } = props;\n\n  const appSize = useMemo(() => {\n    return appSizeFromWindowSize(\n      new Vector2(\n        gameState.windowState.innerWidth,\n        gameState.windowState.innerHeight\n      )\n    );\n  }, [gameState.windowState.innerWidth, gameState.windowState.innerHeight]);\n\n  const [jumpOffset, setJumpOffset] = useState(new Vector2(0, 0));\n\n  const virtualGridDims = useMemo(() => {\n    return new Vector2(\n      // needs to be at least 3.8 x 4.8 so we have room for jumps\n      Math.max(\n        4,\n        Math.floor((appSize.x * virtualAreaScaleMultiplier) / hexGridPx.x - 0.5)\n      ),\n      Math.max(\n        5,\n        Math.floor((appSize.y * virtualAreaScaleMultiplier) / hexGridPx.y)\n      )\n    );\n  }, [appSize, virtualAreaScaleMultiplier, hexGridPx]);\n\n  const virtualDimsToLocation = useCallback(\n    (virtualCoords: Vector2): Vector3 => {\n      return virtualCoordsToLocation({\n        virtualCoords,\n        virtualGridDims,\n        virtualGridLocation: gameState.playerUI.virtualGridLocation,\n      });\n    },\n    [gameState.playerUI.virtualGridLocation, virtualGridDims]\n  );\n  const locationToVirtualDims = useCallback(\n    (location: Vector3): Vector2 | undefined => {\n      return locationToVirtualCoords({\n        location,\n        virtualGridDims,\n        virtualGridLocation: gameState.playerUI.virtualGridLocation,\n      });\n    },\n    [gameState.playerUI.virtualGridLocation, virtualGridDims]\n  );\n\n  const virtualGridStatusMap = useMemo(() => {\n    return computeVirtualNodeDataMap({\n      allocationStatusMap: gameState.playerSave.allocationStatusMap,\n      nodeContentsMap: gameState.worldGen.nodeContentsMap,\n      lockMap: gameState.worldGen.lockMap,\n      fogOfWarStatusMap: gameState.computed.fogOfWarStatusMap,\n      virtualGridDims,\n      virtualDimsToLocation,\n    });\n  }, [\n    gameState.playerSave.allocationStatusMap,\n    gameState.worldGen.nodeContentsMap,\n    gameState.worldGen.lockMap,\n    gameState.computed.fogOfWarStatusMap,\n    virtualGridDims,\n    virtualDimsToLocation,\n  ]);\n\n  const handleJump = useCallback(\n    (args: { direction: Vector2 }) => {\n      // direction: if we hit bottom right of screen, direction == (1,1)\n      // console.log({ direction: args.direction });\n      let jumpAmounts = virtualGridDims.multiply(0.35).floor();\n      jumpAmounts = jumpAmounts.withY(Math.floor(jumpAmounts.y / 2) * 2);\n      jumpAmounts = jumpAmounts\n        .clampX(1, virtualGridDims.x - 1)\n        .clampY(2, Math.floor((virtualGridDims.y - 1) / 2) * 2);\n      const jumpOffset = jumpAmounts.multiply(args.direction);\n      console.log({ jumpOffset });\n      props.updaters.playerUI.virtualGridLocation.enqueueUpdate((it) => {\n        return it\n          .addX(jumpOffset.x)\n          .add(new Vector3(-1, -2, 0).multiply(jumpOffset.y / 2));\n      });\n      setJumpOffset(jumpOffset.multiply(1));\n    },\n    [virtualGridDims]\n  );\n\n  const handleUpdateNodeStatus = useCallback(\n    (args: { virtualDims: Vector2; newStatus: NodeAllocatedStatus }) => {\n      const { virtualDims, newStatus } = args;\n\n      // console.log({ got: 'here handleUpdateNodeStatus' });\n      const nodeLocation: Vector3 = virtualDimsToLocation(virtualDims);\n      const prevStatus =\n        gameState.computed.fogOfWarStatusMap?.get(nodeLocation) ||\n        NodeAllocatedStatus.HIDDEN;\n      if (newStatus === NodeAllocatedStatus.TAKEN) {\n        if (prevStatus !== NodeAllocatedStatus.AVAILABLE) {\n          console.log('cant do that', prevStatus);\n          return;\n        }\n        const maybeLock = gameState.worldGen.lockMap.get(nodeLocation);\n        if (!!maybeLock) {\n          console.log('is locked', maybeLock);\n          return;\n        }\n      }\n\n      if (\n        gameState.playerSave.allocationStatusMap.get(nodeLocation) !==\n        NodeAllocatedStatus.TAKEN\n      ) {\n        props.actions.allocateNode.enqueueAction({\n          nodeLocation,\n          newStatus: NodeAllocatedStatus.TAKEN,\n        });\n      }\n    },\n    [\n      props.updaters,\n      virtualDimsToLocation,\n      gameState.playerSave.allocationStatusMap,\n      gameState.computed.fogOfWarStatusMap,\n      gameState.computed.lockStatusMap,\n      gameState.worldGen.lockMap,\n    ]\n  );\n\n  const cursoredVirtualNodeCoords: Vector2 | undefined = useMemo(() => {\n    if (gameState.playerUI.cursoredNodeLocation) {\n      console.log({\n        3: gameState.playerUI.cursoredNodeLocation,\n        2: locationToVirtualDims(gameState.playerUI.cursoredNodeLocation),\n      });\n      return locationToVirtualDims(gameState.playerUI.cursoredNodeLocation);\n    } else {\n      return undefined;\n    }\n  }, [gameState.playerUI.cursoredNodeLocation, locationToVirtualDims]);\n\n  const setCursoredVirtualNode = useCallback(\n    (v: Vector2 | undefined) => {\n      props.updaters.playerUI.cursoredNodeLocation.enqueueUpdate((prev) => {\n        let updated = v ? virtualDimsToLocation(v) : undefined;\n        console.log({ updated });\n        return updated;\n      });\n      if (v) {\n        // also open the sidebar\n        props.updaters.playerUI.isSidebarOpen.enqueueUpdate(() => true);\n      }\n    },\n    [props.updaters, virtualDimsToLocation]\n  );\n\n  // manage keyboard wasdezx navigation\n  useEffect(() => {\n    const newIntent = props.gameState.intent.newIntent;\n    const newLocation = virtualDimsToLocation(\n      virtualGridDims.divide(2).floor()\n    );\n    if (newIntent[IntentName.MOVE_CURSOR_EAST]) {\n      props.updaters.playerUI.cursoredNodeLocation.enqueueUpdate(\n        (prev) => prev?.addX(1) || newLocation\n      );\n    }\n    if (newIntent[IntentName.MOVE_CURSOR_WEST]) {\n      props.updaters.playerUI.cursoredNodeLocation.enqueueUpdate(\n        (prev) => prev?.addX(-1) || newLocation\n      );\n    }\n    if (newIntent[IntentName.MOVE_CURSOR_NORTHEAST]) {\n      props.updaters.playerUI.cursoredNodeLocation.enqueueUpdate(\n        (prev) => prev?.add({ x: 1, y: 1, z: 0 }) || newLocation\n      );\n    }\n    if (newIntent[IntentName.MOVE_CURSOR_NORTHWEST]) {\n      props.updaters.playerUI.cursoredNodeLocation.enqueueUpdate(\n        (prev) => prev?.addY(1) || newLocation\n      );\n    }\n    if (newIntent[IntentName.MOVE_CURSOR_SOUTHEAST]) {\n      props.updaters.playerUI.cursoredNodeLocation.enqueueUpdate(\n        (prev) => prev?.addY(-1) || newLocation\n      );\n    }\n    if (newIntent[IntentName.MOVE_CURSOR_SOUTHWEST]) {\n      props.updaters.playerUI.cursoredNodeLocation.enqueueUpdate(\n        (prev) => prev?.add({ x: -1, y: -1, z: 0 }) || newLocation\n      );\n    }\n    if (newIntent[IntentName.MOVE_CURSOR_SOUTH]) {\n      props.updaters.playerUI.cursoredNodeLocation.enqueueUpdate((prev) => {\n        if (prev && prev.y % 2 === 0) {\n          return prev?.add({ x: 0, y: -1, z: 0 });\n        } else if (prev && prev.y % 2 !== 0) {\n          return prev?.add({ x: -1, y: -1, z: 0 });\n        } else {\n          return newLocation;\n        }\n      });\n    }\n    if (newIntent[IntentName.MOVE_CURSOR_NORTH]) {\n      props.updaters.playerUI.cursoredNodeLocation.enqueueUpdate((prev) => {\n        if (prev && prev.y % 2 === 0) {\n          return prev?.add({ x: 1, y: 1, z: 0 });\n        } else if (prev && prev.y % 2 !== 0) {\n          return prev?.add({ x: 0, y: 1, z: 0 });\n        } else {\n          return newLocation;\n        }\n      });\n    }\n    if (newIntent[IntentName.INTERACT_WITH_NODE]) {\n      if (cursoredVirtualNodeCoords) {\n        handleUpdateNodeStatus({\n          virtualDims: cursoredVirtualNodeCoords,\n          newStatus: NodeAllocatedStatus.TAKEN,\n        });\n      }\n    }\n  }, [\n    props.gameState.intent.newIntent,\n    props.updaters,\n    cursoredVirtualNodeCoords,\n    handleUpdateNodeStatus,\n  ]);\n\n  // Manage keyboard controls here so that the dumb component doesnt have to rerender all the time\n  const keyboardScrollDirection: Vector2 = useMemo(() => {\n    let direction = Vector2.Zero;\n    if (props.gameState.intent.activeIntent.PAN_EAST) {\n      direction = direction.addX(1);\n    }\n    if (props.gameState.intent.activeIntent.PAN_WEST) {\n      direction = direction.addX(-1);\n    }\n    if (props.gameState.intent.activeIntent.PAN_NORTH) {\n      direction = direction.addY(1);\n    }\n    if (props.gameState.intent.activeIntent.PAN_SOUTH) {\n      direction = direction.addY(-1);\n    }\n    return direction;\n  }, [\n    props.gameState.intent.activeIntent.PAN_EAST,\n    props.gameState.intent.activeIntent.PAN_WEST,\n    props.gameState.intent.activeIntent.PAN_NORTH,\n    props.gameState.intent.activeIntent.PAN_SOUTH,\n  ]);\n\n  return (\n    <>\n      <GameAreaComponent\n        hidden={!gameState.playerUI.isPixiHidden}\n        appSize={appSize}\n        // intent={gameState.intent}\n        virtualGridDims={virtualGridDims}\n        jumpOffset={jumpOffset}\n        virtualGridStatusMap={virtualGridStatusMap}\n        virtualDimsToLocation={virtualDimsToLocation}\n        updateNodeStatusCb={handleUpdateNodeStatus}\n        onJump={handleJump}\n        cursoredVirtualNode={cursoredVirtualNodeCoords}\n        setCursoredVirtualNode={setCursoredVirtualNode}\n        keyboardScrollDirection={keyboardScrollDirection}\n      />\n    </>\n  );\n}\n","import { Vector2 } from '../../lib/util/geometry/vector2';\nimport { Vector3 } from '../../lib/util/geometry/vector3';\n\nexport function virtualCoordsToLocation(args: {\n  virtualCoords: Vector2;\n  virtualGridLocation: Vector3;\n  virtualGridDims: Vector2;\n}): Vector3 {\n  const { virtualCoords, virtualGridLocation, virtualGridDims } = args;\n  const virtualCenter = virtualGridDims.divide(2).floor();\n  const offsetFromVirtualCenter = virtualCoords.subtract(virtualCenter);\n  let relativeLocation = Vector2.Zero;\n\n  if (offsetFromVirtualCenter.y % 2 === 0) {\n    // calculate the effect of y\n    relativeLocation = new Vector2(-1, -2).multiply(\n      offsetFromVirtualCenter.y / 2\n    );\n  } else if (virtualCenter.y % 2 === 0) {\n    // half block is not in the center row\n    /**\n     * 0: O - O - O\n     * 1:   O - O - O\n     * 2: O - O - O <- virtualCenter.y\n     * 3:   O - O - O <- offsetFromVirtualCenter.y == 1\n     */\n    relativeLocation = new Vector2(0, -1).add(\n      new Vector2(-1, -2).multiply((offsetFromVirtualCenter.y - 1) / 2)\n    );\n  } else {\n    // half block is in the center row\n    /**\n     * 0: O - O - O\n     * 1:   O - O - O <- virtualCenter.y\n     * 2: O - O - O <- offsetFromVirtualCenter.y == 1\n     * 3:   O - O - O\n     */\n    relativeLocation = new Vector2(-1, -1).add(\n      new Vector2(-1, -2).multiply((offsetFromVirtualCenter.y - 1) / 2)\n    );\n  }\n  // now add in the x offset\n  relativeLocation = relativeLocation.addX(offsetFromVirtualCenter.x);\n\n  return virtualGridLocation.add(Vector3.FromVector2(relativeLocation, 0));\n}\n\nexport function locationToVirtualCoords(args: {\n  location: Vector3;\n  virtualGridLocation: Vector3;\n  virtualGridDims: Vector2;\n}): Vector2 | undefined {\n  const { location, virtualGridLocation, virtualGridDims } = args;\n  const virtualCenter = virtualGridDims.divide(2).floor();\n  const offsetFromVirtualGridLocation = location.subtract(virtualGridLocation);\n  let relativeVirtualCoords = Vector2.Zero;\n\n  if (offsetFromVirtualGridLocation.z !== 0) {\n    return undefined;\n  }\n\n  if (offsetFromVirtualGridLocation.y % 2 === 0) {\n    relativeVirtualCoords = new Vector2(-1, -2).multiply(\n      offsetFromVirtualGridLocation.y / 2\n    );\n  } else if (virtualCenter.y % 2 === 0) {\n    // half block is not in the center row\n    /**\n     * 0: O - O - O\n     * 1:   O - O - O <- offsetFromVirtualGridLocation.y == 1\n     * 2: O - O - O <- virtualCenter.y\n     * 3:   O - O - O\n     */\n    relativeVirtualCoords = new Vector2(-1, -1).add(\n      new Vector2(-1, -2).multiply((offsetFromVirtualGridLocation.y - 1) / 2)\n    );\n  } else {\n    // half block is in the center row\n    /**\n     * 0: O - O - O <- offsetFromVirtualGridLocation.y == 1\n     * 1:   O - O - O <- virtualCenter.y\n     * 2: O - O - O\n     * 3:   O - O - O\n     */\n    relativeVirtualCoords = new Vector2(0, -1).add(\n      new Vector2(-1, -2).multiply((offsetFromVirtualGridLocation.y - 1) / 2)\n    );\n  }\n  relativeVirtualCoords = relativeVirtualCoords.addX(\n    offsetFromVirtualGridLocation.x\n  );\n\n  return virtualCenter.add(relativeVirtualCoords);\n}\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { LockData } from '../../data/PlayerSaveState';\nimport { NodeContents } from '../../game/worldGen/nodeContents/NodeContentsFactory';\nimport {\n  AttributeSymbolMap,\n  nodeContentsConditionToString,\n  nodeContentsLineToString,\n} from '../../game/worldGen/nodeContents/NodeContentsRendering';\nimport { HashMap, KeyedHashMap } from '../../lib/util/data_structures/hash';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { Vector3 } from '../../lib/util/geometry/vector3';\nimport { LazyHashMap } from '../../lib/util/lazy';\nimport { LockStatus, NodeAllocatedStatus } from './GameAreaComponent';\n\nexport type NodeReactData = {\n  // 3-4 character description that goes on the main board\n  shortText: React.ReactElement;\n  // 3-4 line description that gets displayed on hover\n  toolTipText: React.ReactElement;\n  // Extended description that shows up in sidebar\n  fullText: React.ReactElement;\n  lockData?: {\n    shortTextTarget: string;\n    shortTextTimer: string;\n    lockStatus: LockStatus;\n  };\n  status: NodeAllocatedStatus;\n  id: string;\n};\n\n/**\n * Computes a hash map of vector2 virtual hex grid coordinates to\n * text & tooltip info about the node at those coordinates.\n */\nexport function computeVirtualNodeDataMap(args: {\n  allocationStatusMap: KeyedHashMap<Vector3, NodeAllocatedStatus>;\n  nodeContentsMap: LazyHashMap<Vector3, NodeContents>;\n  lockMap: LazyHashMap<Vector3, LockData | undefined>;\n  fogOfWarStatusMap: HashMap<Vector3, NodeAllocatedStatus> | undefined;\n  virtualGridDims: Vector2;\n  virtualDimsToLocation: (v: Vector2) => Vector3;\n}): KeyedHashMap<Vector2, NodeReactData> {\n  const {\n    allocationStatusMap,\n    nodeContentsMap,\n    lockMap,\n    fogOfWarStatusMap,\n    virtualGridDims,\n    virtualDimsToLocation,\n  } = args;\n  const startTime = +new Date();\n  const map = new KeyedHashMap<Vector2, NodeReactData>();\n  for (let row = 0; row < virtualGridDims.x; row++) {\n    for (let col = 0; col < virtualGridDims.y; col++) {\n      const virtualVec = new Vector2(row, col);\n      const location = virtualDimsToLocation(virtualVec);\n      const maybeStatus = fogOfWarStatusMap?.get(location);\n      const takenStatus = allocationStatusMap.get(location);\n      const nodeStatus =\n        takenStatus === NodeAllocatedStatus.TAKEN\n          ? NodeAllocatedStatus.TAKEN\n          : maybeStatus || NodeAllocatedStatus.HIDDEN;\n      const id = location.hash();\n      const lockData = lockMap.get(location);\n      const nodeContents = nodeContentsMap.get(location);\n      let shortText1 = '+';\n      if (nodeContents.lines[0]) {\n        // the origin node is empty\n        shortText1 += AttributeSymbolMap[nodeContents.lines[0].attribute];\n      } else {\n        shortText1 = '';\n      }\n      if (\n        nodeContents.lines[1] &&\n        nodeContents.lines[0].attribute !== nodeContents.lines[1].attribute\n      ) {\n        // add another symbol if it's a mixed node\n        shortText1 += AttributeSymbolMap[nodeContents.lines[1].attribute];\n      }\n      let shortText2 = '';\n      if (nodeContents.condition) {\n        shortText2 = '-' + AttributeSymbolMap[nodeContents.condition.attribute];\n      }\n\n      const nodeData: NodeReactData = {\n        shortText: shortText2 ? (\n          <>\n            {shortText1}\n            <br />\n            {shortText2}\n          </>\n        ) : (\n          <>{shortText1}</>\n        ),\n        toolTipText: (\n          <>\n            <div>{nodeStatus.toString()}</div>\n            {nodeContents.lines[0] ? <br /> : <></>}\n            <div>\n              {nodeContents.lines[0] &&\n                nodeContentsLineToString(nodeContents.lines[0])}\n            </div>\n            <div>\n              {nodeContents.lines[1] &&\n                nodeContentsLineToString(nodeContents.lines[1])}\n            </div>\n            <div>\n              {nodeContents.condition &&\n                nodeContentsConditionToString(nodeContents.condition)}\n            </div>\n          </>\n        ),\n        fullText: <> </>,\n        status: nodeStatus,\n        lockData,\n        id,\n      };\n      map.put(virtualVec, nodeData);\n    }\n  }\n  // console.log({ map });\n  const elapsed = +new Date() - startTime;\n  if (elapsed > 100) {\n    window.alert('compute took ' + elapsed.toString());\n  }\n  return map;\n}\n","import React from 'react';\nimport { GameState, IntentName, PlayerIntentState } from '../data/GameState';\nimport { UpdaterGeneratorType2 } from '../lib/util/updaterGenerator';\n\ntype Props = {\n  updaters: UpdaterGeneratorType2<PlayerIntentState, GameState>;\n  intent: PlayerIntentState;\n};\n\ntype State = {\n  keyIntentConfig: keyToIntentMap;\n};\n\n// TODO: enumerate all the keyboard keys we care about\ntype BrowserKeys = string;\n\n/**\n * Holds the mapping of which keyboard keys (as interpreted by the browser)\n * map to which intents, e.g. \"up arrow\" means \"pan left\"\n */\ntype keyToIntentMap = {\n  [key in BrowserKeys]?: IntentName;\n};\n\nconst defaultKeyIntentConfig = {\n  ArrowUp: IntentName.PAN_NORTH,\n  ArrowLeft: IntentName.PAN_WEST,\n  ArrowDown: IntentName.PAN_SOUTH,\n  ArrowRight: IntentName.PAN_EAST,\n  k: IntentName.PAN_NORTH,\n  h: IntentName.PAN_WEST,\n  j: IntentName.PAN_SOUTH,\n  l: IntentName.PAN_EAST,\n  m: IntentName.TOGGLE_STRATEGIC_VIEW,\n  i: IntentName.TOGGLE_SIDEBAR,\n  q: IntentName.MOVE_CURSOR_NORTHWEST,\n  w: IntentName.MOVE_CURSOR_NORTH,\n  a: IntentName.MOVE_CURSOR_WEST,\n  s: IntentName.MOVE_CURSOR_SOUTH,\n  d: IntentName.MOVE_CURSOR_EAST,\n  e: IntentName.MOVE_CURSOR_NORTHEAST,\n  z: IntentName.MOVE_CURSOR_SOUTHWEST,\n  x: IntentName.MOVE_CURSOR_SOUTHEAST,\n  c: IntentName.MOVE_CURSOR_SOUTHEAST,\n  ' ': IntentName.INTERACT_WITH_NODE,\n  '<': IntentName.TRAVEL_UPSTAIRS,\n  '>': IntentName.TRAVEL_DOWNSTAIRS,\n};\n\n/**\n * Empty react element with listeners for keyboard actions.\n */\nexport class KeyboardListenerComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      keyIntentConfig: defaultKeyIntentConfig,\n    };\n    document.addEventListener('keydown', this.handleKeydown);\n    document.addEventListener('keyup', this.handleKeyup);\n  }\n\n  // NOTE(bowei): does using e.repeat here break when window loses focus??\n  handleKeydown = (e: KeyboardEvent) => {\n    // console.log(\"key down\", new Date());\n    const { keyIntentConfig } = this.state;\n    const key: BrowserKeys = e.key;\n    const configuredIntent = keyIntentConfig[key];\n    if (configuredIntent) {\n      e.preventDefault();\n    }\n\n    if (\n      e.repeat === false &&\n      configuredIntent !== undefined &&\n      configuredIntent !== IntentName.NOOP\n    ) {\n      this.props.updaters.newIntent[configuredIntent].enqueueUpdate(() => {\n        this.props.updaters.newIntent[configuredIntent].enqueueUpdate(\n          () => false\n        );\n        return true;\n      });\n      this.props.updaters.activeIntent[configuredIntent].enqueueUpdate(\n        () => true\n      );\n    }\n  };\n\n  handleKeyup = (e: KeyboardEvent) => {\n    const { keyIntentConfig } = this.state;\n    const key: BrowserKeys = e.key;\n    const configuredIntent = keyIntentConfig[key];\n    if (\n      configuredIntent !== undefined &&\n      configuredIntent !== IntentName.NOOP\n    ) {\n      this.props.updaters.activeIntent[configuredIntent].enqueueUpdate(\n        () => false\n      );\n      this.props.updaters.endedIntent[configuredIntent].enqueueUpdate(() => {\n        this.props.updaters.endedIntent[configuredIntent].enqueueUpdate(\n          () => false\n        );\n        return true;\n      });\n    }\n  };\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeydown);\n    document.removeEventListener('keyup', this.handleKeyup);\n  }\n  render() {\n    return <> </>;\n  }\n}\n","import React from 'react';\nimport { GameState } from './data/GameState';\nimport { Const } from './lib/util/misc';\nimport { UpdaterGeneratorType2 } from './lib/util/updaterGenerator';\n\n// nullable, but should be OK, just remember to populate the context\n// export const GameContext = React.createContext<GameState>(null as any);\n// export const GameUpdatersContext = React.createContext<UpdaterGeneratorType<GameState>>(null as any);\nexport const UseGameStateContext = React.createContext<\n  [Const<GameState>, UpdaterGeneratorType2<GameState>, () => void]\n>([] as any);\n","import * as Pixi from 'pixi.js';\nimport { IVector2 } from '../util/geometry/vector2';\n\nexport function PixiPointFrom(p: IVector2): Pixi.Point {\n  return new Pixi.Point(p.x, p.y);\n}\n","/**\n *\n * @param fn an arbitrary callback which performs some operation with side effects.\n * @returns a tuple: [batchedFn, fireBatch].\n * batchedFn takes the same arguments as fn, but the side effects are delayed until fireBatch is called.\n * if batchedFn is called multiple times, those invocations are stored in order, and then popped off in order when fireBatch is called.\n */\nexport function batchify<A extends any[]>(\n  fn: (...args: A) => void\n): [(...args: A) => void, () => void] {\n  let batch: A[] = [];\n\n  return [\n    (...args: A) => {\n      batch.push(args);\n      // console.log({ stack: new Error().stack, batchSize: batch.length });\n      // console.log({ batchSize: batch.length });\n    },\n    () => {\n      if (batch.length !== 0) {\n        console.log({ fired: batch.length });\n      }\n      for (let a of batch) {\n        fn(...a);\n      }\n      batch = [];\n    },\n  ];\n}\n\n/**\n * Same use case and types as [batchify], however, specifically we expect [fn] to be a setState function which takes value-or-callback\n * as its single argument, and instead of calling [fn] repeatedly for each callback in the batch, we apply the callbacks in the batch\n * sequentially to get a single state update which we then provide to [fn].\n */\nexport function batchifySetState<T>(\n  fn: (arg: T) => void\n): [(arg: T) => void, () => void] {\n  let batch: T[] = [];\n\n  return [\n    (arg: T) => {\n      batch.push(arg);\n      // console.log({ batchSize: batch.length });\n    },\n    () => {\n      if (batch.length === 0) {\n        return;\n      }\n      // console.log({ fired: batch.length });\n      let thisBatch = [...batch];\n      batch = [];\n      (fn as any)((prev: any) => {\n        let next = prev;\n        for (let valueOrCallback of thisBatch) {\n          if (typeof valueOrCallback === 'function') {\n            next = valueOrCallback(next);\n          } else {\n            next = valueOrCallback;\n          }\n        }\n        return next;\n      });\n    },\n  ];\n}\n","import { Const } from './misc';\n\ntype UpdaterFnParam2<T, W> =\n  | ((prev: Const<T>, prevWhole: W) => T | Const<T>)\n  | (T extends Function ? never : T); // (T | ((prev: T, prevWhole: W) => T));\n\ntype UpdaterFn2<T, W> = (arg: UpdaterFnParam2<T, W>) => void;\n\n/**\n * Represent the type which has the same deep object struture as T but instead of values, it has\n * functions on [getUpdater], [enqueueUpdate], and [update] attached to every level of the object structure.\n */\nexport type UpdaterGeneratorType2<T, W = T> = {\n  [k in keyof T]: (T[k] extends { [kkt: string]: any }\n    ? UpdaterGeneratorType2<T[k], W>\n    : {}) & {\n    getUpdater: () => UpdaterFn2<T[k], W>;\n    enqueueUpdate: UpdaterFn2<T[k], W>;\n  };\n} & {\n  getUpdater: () => UpdaterFn2<T, W>;\n  enqueueUpdate: UpdaterFn2<T, W>;\n};\n\n// helper method for the recursion\nfunction updaterGenerator2Helper<T, W>(\n  dataObject: T,\n  dataUpdater: UpdaterFn2<T, W>\n): UpdaterGeneratorType2<T, W> {\n  const updaters: UpdaterGeneratorType2<T, W> = {} as any;\n  updaters.getUpdater = () => dataUpdater;\n  updaters.enqueueUpdate = dataUpdater;\n  if (typeof dataObject !== 'object') return updaters;\n  else {\n    const keys: (keyof T)[] = Object.keys(dataObject) as any;\n    keys.forEach((key: keyof T) => {\n      if (key === 'enqueueUpdate' || key === 'getUpdater' || key === 'update') {\n        throw Error(\n          `Invalid key in updaterGenerator: ${key} conflicts with reserved keywords enqueueUpdate, update, getUpdater.`\n        );\n      }\n      function keyUpdater(\n        newValueOrCallback: UpdaterFnParam2<T[typeof key], W>\n      ) {\n        if (typeof newValueOrCallback === 'function') {\n          dataUpdater((oldData: T, wholeData: W) => {\n            const newKey = (newValueOrCallback as (\n              prev: T[typeof key],\n              whole: W\n            ) => T[typeof key])(oldData[key], wholeData);\n            if (oldData[key] === newKey) {\n              return oldData; // no update detected, no need to update anything\n            } else {\n              const newData = {\n                ...oldData,\n                [key]: newKey,\n              };\n              return newData;\n            }\n          });\n        } else {\n          dataUpdater((oldData, wholeData) => ({\n            ...oldData,\n            [key]: newValueOrCallback,\n          }));\n        }\n      }\n      updaters[key] = (updaterGenerator2Helper<T[typeof key], W>(\n        dataObject[key],\n        keyUpdater\n      ) as unknown) as typeof updaters[typeof key];\n    });\n    return updaters;\n  }\n}\n\n/**\n * Convenience method for generating setState<FancyObject.sub.component>() from setState<FancyObject> callbacks.\n * If used in react, recommended that this be memoized.\n *\n * @generic T should be a data-only object - nested objects are allowed but arrays, sets not supported\n * @param dataObject ANY instance of T, used only for its keys. MUST have all keys present\n * @param setState an updater function, which can be called as: dataUpdater(newT) or\n *   dataUpdater((oldT) => { return newTFromOldT(oldT) }) ; e.g. react setState() function.\n * @return a deep object that has the same keys as T, except each key also has a getUpdater()/set/update member;\n *   the getUpdater() on a subobject of T acts similarly to the [setState] param but to the subobject rather than the whole object;\n *   the whole object is also available as the second argument of the callback\n * e.g. :\n *   let gameStateUpdater = updaterGenerator(skeletonObject, setGameState);\n *   let setName = gameStateUpdater.player.name.getUpdater();\n *   gameStateUpdater.player.name.set(newName);\n *   gameStateUpdater.player.name.update((oldName, wholeObject) => oldName + \" \");\n *\n */\nexport function updaterGenerator2<T>(\n  dataObject: T,\n  setState: UpdaterFn<T>\n): UpdaterGeneratorType2<T> {\n  const dataUpdater2 = (stateCallbackFunction: UpdaterFnParam2<T, T>) => {\n    if (typeof stateCallbackFunction === 'function') {\n      setState((prev: T) => {\n        // if T is a function type already, typescript correctly notifies us that this will fail\n        const next = (stateCallbackFunction as (prev: T, prevWhole: T) => T)(\n          prev,\n          prev\n        );\n        // console.log(\" in updater generator 2\", { next });\n        return next;\n      });\n    } else {\n      setState(stateCallbackFunction);\n    }\n  };\n  return updaterGenerator2Helper<T, T>(dataObject, dataUpdater2);\n}\n\nexport type UpdaterFnParam<T> =\n  | (T extends Function ? never : T)\n  | ((prev: T) => T);\nexport type UpdaterFn<T> = (arg: UpdaterFnParam<T>) => void;\n","import * as Pixi from 'pixi.js';\nimport { batchifySetState } from '../../lib/util/batchify';\nimport { UpdaterFn, updaterGenerator2 } from '../../lib/util/updaterGenerator';\n\ntype Props = {\n  args?: {\n    markForceUpdate?: (self: LifecycleHandlerBase<any, any>) => void;\n    [k: string]: any;\n  };\n  [k: string]: any;\n};\n\ntype State = {};\n\ntype ChildInstructions<\n  ChildInstanceType,\n  ChildPropsType extends Props,\n  ParentPropsType extends Props,\n  ParentStateType extends State\n> = {\n  childClass: new (props: ChildPropsType) => ChildInstanceType;\n  instance?: ChildInstanceType;\n  propsFactory: (\n    parentProps: ParentPropsType,\n    parentState: ParentStateType\n  ) => ChildPropsType;\n};\n\nclass ChildrenArray<P extends Props, S extends State> {\n  private _values: ChildInstructions<\n    LifecycleHandlerBase<any, any>,\n    any,\n    P,\n    S\n  >[] = [];\n\n  public add<CIT extends LifecycleHandlerBase<any, any>, CPT>(\n    c: ChildInstructions<CIT, CPT, P, S>\n  ) {\n    if (\n      this._values.indexOf(c) === -1 ||\n      (c.instance && this.contains(c.instance))\n    ) {\n      // do nohting - its already in here\n    }\n    this._values.push(c);\n  }\n\n  public remove<CIT extends LifecycleHandlerBase<any, any>>(\n    c: CIT\n  ): ChildInstructions<CIT, any, P, S> | undefined {\n    const removed = this._values.splice(\n      this._values.findIndex((it) => it.instance === c),\n      1\n    );\n    if (removed.length === 0) {\n      return undefined;\n    } else {\n      return removed[0] as ChildInstructions<CIT, any, P, S>;\n    }\n  }\n\n  public contains<CIT extends LifecycleHandlerBase<any, any>>(c: CIT): boolean {\n    return this._values.findIndex((it) => it.instance === c) > -1;\n  }\n\n  public get<CIT extends LifecycleHandlerBase<CPT, any>, CPT>(\n    c: CIT\n  ): ChildInstructions<CIT, CPT, P, S> | undefined {\n    return this._values.find((it) => it.instance === c) as\n      | ChildInstructions<CIT, CPT, P, S>\n      | undefined;\n  }\n\n  public clone(): ChildrenArray<P, S> {\n    let cloned = new ChildrenArray<P, S>();\n    cloned._values = [...this._values];\n    return cloned;\n  }\n\n  public forEach(\n    callbackfn: (\n      value: ChildInstructions<LifecycleHandlerBase<any, any>, any, P, S>,\n      index: number,\n      array: ChildInstructions<LifecycleHandlerBase<any, any>, any, P, S>[]\n    ) => void\n  ) {\n    this._values.forEach(callbackfn);\n  }\n}\n\n// export interface LifecycleHandlerBase<P extends Props, S extends State> {\n// // useful for interface merging?? https://stackoverflow.com/questions/44153378/typescript-abstract-optional-method\n// }\n\n/**\n * LifecycleHandlerConstructor <- this should take the usual props, and will return new proxy, new base component(props), the handler object which has the construct() property and that function in it\n */\n// export function LifecycleHandlerConstructor<T>(props:\n// class and interface merging??? https://stackoverflow.com/questions/44153378/typescript-abstract-optional-method\nexport abstract class LifecycleHandlerBase<P extends Props, S extends State> {\n  // public, only to interface with non lifecycleHandler classes that we have yet to refactor\n  public abstract container: Pixi.Container;\n  // public, only to allow useState function below to set this.state\n  public abstract state: S;\n\n  protected _staleProps: P; // NOTE(bowei): need it for args for now; maybe we can extract out args?\n  private _children: ChildrenArray<P, S> = new ChildrenArray();\n  private _childrenToConstruct: ChildrenArray<P, S> = new ChildrenArray();\n  private _childrenToDestruct: ChildrenArray<P, S> = new ChildrenArray();\n  private _forceUpdates: ChildrenArray<P, S> = new ChildrenArray();\n  // private _self!: LifecycleHandlerBase<P, S>;\n\n  constructor(props: P) {\n    this._staleProps = props;\n  }\n\n  protected addChild<CIT extends LifecycleHandlerBase<CPT, any>, CPT>(\n    c: ChildInstructions<CIT, CPT, P, S>\n  ) {\n    this._children.add(c); // make sure children are updated\n    this._childrenToConstruct.add(c); // if not already constructed/added to pixi hierarchy, queue it up\n  }\n\n  protected registerChild<CIT extends LifecycleHandlerBase<CPT, any>, CPT>(\n    c: ChildInstructions<CIT, CPT, P, S>\n  ) {\n    // only add children to updateable, not constructed\n    this._children.add(c);\n  }\n\n  protected removeChild<CIT extends LifecycleHandlerBase<any, any>>(c: CIT) {\n    let childInfo = this._children.remove(c); // make sure children are no longer updated\n    // NOTE(bowei): do we need to call willUnount on the children here??\n    childInfo && this._childrenToDestruct.add(childInfo); // queue it for destruction next update tick\n  }\n\n  private _didConstruct(props: P) {\n    // this._self = this;\n    this._childrenToConstruct.forEach((child) => {\n      if (!child.instance) {\n        child.instance = new child.childClass(\n          child.propsFactory(props, this.state)\n        );\n      }\n      // NOTE(bowei): we are assuming the derived class did NOT manually add child to pixi hierarchy, even if\n      // they constructed the instance themselves (in order to e.g. hold a reference); we do that here\n      this.container.addChild(child.instance.container);\n    });\n    this.renderSelf(props);\n    this.didMount?.();\n  }\n\n  /** callback passed to child - since child is not a pure component, it needs to inform us of updates if otherwise we wouldnt update */\n  protected markForceUpdate = (childInstance: any) => {\n    this._staleProps.args?.markForceUpdate?.(this); // mark us for update in OUR parent\n\n    const childInfo = this._children.get(childInstance);\n    if (childInfo) {\n      this._forceUpdates.add(childInfo);\n    } else {\n      throw new Error(`Error, child ${childInstance} not found in ${this}`);\n    }\n  };\n\n  // cannot be attached to an instance due to typescript\n  // if satic, cannot be called \"useState\" or else react linter complains\n  protected useState<S, T extends { state: S }>(self: T, initialState: S) {\n    const setState: UpdaterFn<S> = (valueOrCallback) => {\n      if (typeof valueOrCallback === 'function') {\n        self.state = (valueOrCallback as (s: S) => S)(self.state);\n      } else {\n        self.state = valueOrCallback;\n      }\n    };\n    const [batchedSetState, fireBatch] = batchifySetState(setState);\n    const stateUpdaters = updaterGenerator2<S>(initialState, batchedSetState);\n\n    return {\n      state: initialState,\n      setState,\n      fireStateUpdaters: fireBatch,\n      stateUpdaters,\n    };\n  }\n\n  // shim while we migrate\n  public update(nextProps: P) {\n    this._update(nextProps);\n  }\n\n  // NOTE(bowei): this is public because the root of component hierarchy needs to be bootstrapped from pixi react bridge\n  public _update(nextProps: P) {\n    // nextProps is guaranteed to be referentially a distinct object (might be shallow copy though)\n    const staleState = { ...this.state };\n    this.fireStateUpdaters?.();\n    this.updateSelf?.(nextProps);\n    if (\n      this.shouldUpdate &&\n      !this.shouldUpdate(this._staleProps, staleState, nextProps, this.state)\n    ) {\n      // we think we don't need to update; however, we still need to\n      // update the chidlren that asked us to forcefully update them\n      let forceUpdates = this._forceUpdates.clone();\n      this._forceUpdates = new ChildrenArray<P, S>();\n      forceUpdates.forEach((childInfo) => {\n        let { instance, propsFactory } = childInfo;\n        instance?._update(propsFactory(nextProps, this.state)); // why are we even calling props factory here?? theres no point... we should just tell the child to use their own stale props, like this:\n        // instance._forceUpdate();\n        // note that children can add themselves into forceupdate next tick as well, if they need to ensure they're continuously in there\n\n        instance && this.didForceUpdateChild?.(instance);\n      });\n      // no need to do anything else -- stale props has not changed\n\n      this.didForceUpdate?.();\n      return;\n    }\n    this.updateChildren?.(nextProps);\n    this._updateChildren(nextProps); // implementation should call children._update in here\n    this.renderSelf(nextProps);\n    this._staleProps = nextProps;\n    new Promise((resolve) => resolve(this.didUpdate?.()));\n  }\n\n  protected updateChildren?(nextProps: P): void;\n\n  // destroy, update, create in that order, so that there's no extra update right before destroy or after create\n  private _updateChildren(nextProps: P) {\n    this._childrenToDestruct.forEach((child) => {\n      if (child.instance) {\n        // should always be true\n        child.instance.willUnmount?.();\n        this.container.removeChild(child.instance.container);\n      }\n    });\n    this._childrenToDestruct = new ChildrenArray();\n\n    this._children.forEach(({ instance, propsFactory }) => {\n      instance?._update(propsFactory(nextProps, this.state));\n    });\n\n    this._childrenToConstruct.forEach((child) => {\n      // here we expect the child instances to be empty, but they could be already constructed, if the derived class needs to keep a reference to it\n      if (!child.instance) {\n        child.instance = new child.childClass(\n          child.propsFactory(nextProps, this.state)\n        );\n      }\n      this.container.addChild(child.instance.container);\n    });\n    this._childrenToConstruct = new ChildrenArray();\n  }\n\n  protected fireStateUpdaters?(): void;\n  protected didMount?(): void;\n  protected updateSelf?(nextProps: P): void;\n  protected shouldUpdate?(\n    staleProps: P,\n    staleState: S,\n    nextProps: P,\n    state: S\n  ): boolean;\n  protected abstract renderSelf(nextProps: P): void;\n  protected didUpdate?(): void;\n  protected didForceUpdate?(): void;\n  public willUnmount(): void {} // TODO(bowei): revert this to protected nullable; however it's needed for shim for now\n  protected didForceUpdateChild?(child: LifecycleHandlerBase<any, any>): void;\n\n  public toString(): string {\n    return 'lifecyclehandler object';\n  }\n}\n\nexport type LifecycleHandlerType<P, S> = LifecycleHandlerBase<P, S>;\nexport const LifecycleHandler = new Proxy(LifecycleHandlerBase, {\n  construct: (target, args, newTarget) => {\n    const instance = Reflect.construct(target, args, newTarget);\n    instance._didConstruct(...args);\n    return instance;\n  },\n});\n\nexport function engageLifecycle<T extends object>(derived: T): T {\n  return new Proxy<T>(derived, {\n    construct: (target, args) => {\n      const instance = new (target as any)(args[0]);\n      instance._didConstruct(args[0]);\n      return instance;\n    },\n  });\n}\n\n/**\n * First render:\n * constructor\n * renderChildren?\n * renderSelf\n * didMount\n *\n * Subsequent updates:\n *\n * fireStateUpdaters\n * updateSelf\n * shouldUpdate(props,state)?\n * updateChildren\n * children._update\n * renderSelf\n * didUpdate\n * staleProps = props\n *\n */\n\ntype ReferenceProps = {\n  updaters: 'stuff';\n  args: { s: 'other stuff' };\n};\ntype ReferenceState = {\n  lalalala: 'hahahah';\n};\n\nexport class Reference extends LifecycleHandler<\n  ReferenceProps,\n  ReferenceState\n> {\n  public container: Pixi.Container;\n  public state: ReferenceState;\n  constructor(props: ReferenceProps) {\n    super(props);\n    this.container = new Pixi.Container();\n    this.state = {\n      lalalala: 'hahahah',\n    };\n  }\n\n  updateSelf(nextProps: ReferenceProps) {}\n  renderSelf(nextProps: ReferenceProps) {}\n  didMount() {}\n  didUpdate() {}\n  shouldUpdate(): boolean {\n    return true;\n  }\n  fireStateUpdaters() {}\n  willUnmount() {}\n}\n","import { HashSet } from '../lib/util/data_structures/hash';\nimport { enumKeys } from '../lib/util/misc';\nimport {\n  ChunkGenConstants,\n  PointNodeRef,\n  ResourceType,\n  WorldGenState,\n} from '../data/GameState';\nimport { Vector2 } from '../lib/util/geometry/vector2';\n\nenum Direction {\n  NORTHWEST = 'NORTHWEST',\n  SOUTHWEST = 'SOUTHWEST',\n  NORTHEAST = 'NORTHEAST',\n  SOUTHEAST = 'SOUTHEAST',\n  EAST = 'EAST',\n  WEST = 'WEST',\n  UP = 'UP',\n  DOWN = 'DOWN',\n}\n\ntype NeighborsMap = { [k in Direction]?: PointNodeRef | undefined };\n\nexport function getNeighbors(\n  selfPointNodeRef: PointNodeRef,\n  worldGen: WorldGenState\n): PointNodeRef[] {\n  let neighborsMap = getNeighborsMap(selfPointNodeRef, worldGen);\n  let neighbors: PointNodeRef[] = [];\n  for (let direction of enumKeys(Direction)) {\n    let it = neighborsMap[direction];\n    if (it) {\n      neighbors.push(it);\n    }\n  }\n  return neighbors;\n}\n\nexport function getNeighborsMap(\n  selfPointNodeRef: PointNodeRef,\n  worldGen: WorldGenState\n): NeighborsMap {\n  let neighbors: NeighborsMap = {};\n\n  let zLevel = worldGen.zLevels[selfPointNodeRef.z]!;\n  let myChunk = zLevel.chunks.get(selfPointNodeRef.chunkCoord)!;\n  // first, the right neighbor:\n  if (selfPointNodeRef.pointNodeCoord.x === ChunkGenConstants.CHUNK_HALF_DIM) {\n    let chunkCoord = selfPointNodeRef.chunkCoord.addX(1);\n    let chunk = zLevel.chunks.get(chunkCoord);\n    if (chunk) {\n      let pointNodeCoord = selfPointNodeRef.pointNodeCoord.withX(\n        -ChunkGenConstants.CHUNK_HALF_DIM\n      );\n      let nbor = chunk.pointNodes.get(pointNodeCoord);\n      if (nbor) {\n        neighbors.EAST = new PointNodeRef({\n          z: selfPointNodeRef.z,\n          chunkCoord,\n          pointNodeCoord,\n          pointNodeId: nbor.id,\n        });\n      }\n    }\n  } else {\n    let pointNodeCoord = selfPointNodeRef.pointNodeCoord.addX(1);\n    let nbor = myChunk.pointNodes.get(pointNodeCoord);\n    if (nbor) {\n      neighbors.EAST = new PointNodeRef({\n        z: selfPointNodeRef.z,\n        chunkCoord: selfPointNodeRef.chunkCoord,\n        pointNodeCoord,\n        pointNodeId: nbor.id,\n      });\n    }\n  }\n  // left neighbor\n  if (selfPointNodeRef.pointNodeCoord.x === -ChunkGenConstants.CHUNK_HALF_DIM) {\n    let chunkCoord = selfPointNodeRef.chunkCoord.addX(-1);\n    let chunk = zLevel.chunks.get(chunkCoord);\n    if (chunk) {\n      let pointNodeCoord = selfPointNodeRef.pointNodeCoord.withX(\n        ChunkGenConstants.CHUNK_HALF_DIM\n      );\n      let nbor = chunk.pointNodes.get(pointNodeCoord);\n      if (nbor) {\n        neighbors.WEST = new PointNodeRef({\n          z: selfPointNodeRef.z,\n          chunkCoord,\n          pointNodeCoord,\n          pointNodeId: nbor.id,\n        });\n      }\n    }\n  } else {\n    let pointNodeCoord = selfPointNodeRef.pointNodeCoord.addX(-1);\n    let nbor = myChunk.pointNodes.get(pointNodeCoord);\n    if (nbor) {\n      neighbors.WEST = new PointNodeRef({\n        z: selfPointNodeRef.z,\n        chunkCoord: selfPointNodeRef.chunkCoord,\n        pointNodeCoord,\n        pointNodeId: nbor.id,\n      });\n    }\n  }\n  // // +y is down\n  // if (selfPointNodeRef.pointNodeCoord.y === ChunkGenConstants.CHUNK_HALF_DIM) {\n  //   let chunkCoord = selfPointNodeRef.chunkCoord.addY(1);\n  //   let chunk = zLevel.chunks.get(chunkCoord);\n  //   if (chunk) {\n  //     let pointNodeCoord = selfPointNodeRef.pointNodeCoord.withY(\n  //       -ChunkGenConstants.CHUNK_HALF_DIM\n  //     );\n  //     let nbor = chunk.pointNodes.get(pointNodeCoord);\n  //     if (nbor) {\n  //       neighbors.SOUTH = new PointNodeRef({\n  //         z: selfPointNodeRef.z,\n  //         chunkCoord,\n  //         pointNodeCoord,\n  //         pointNodeId: nbor.id,\n  //       });\n  //     }\n  //   }\n  // } else {\n  //   let pointNodeCoord = selfPointNodeRef.pointNodeCoord.addY(1);\n  //   let nbor = myChunk.pointNodes.get(pointNodeCoord);\n  //   if (nbor) {\n  //     neighbors.SOUTH = new PointNodeRef({\n  //       z: selfPointNodeRef.z,\n  //       chunkCoord: selfPointNodeRef.chunkCoord,\n  //       pointNodeCoord,\n  //       pointNodeId: nbor.id,\n  //     });\n  //   }\n  // }\n  // // -y is up\n  // if (selfPointNodeRef.pointNodeCoord.y === -ChunkGenConstants.CHUNK_HALF_DIM) {\n  //   let chunkCoord = selfPointNodeRef.chunkCoord.addY(-1);\n  //   let chunk = zLevel.chunks.get(chunkCoord);\n  //   if (chunk) {\n  //     let pointNodeCoord = selfPointNodeRef.pointNodeCoord.withY(\n  //       ChunkGenConstants.CHUNK_HALF_DIM\n  //     );\n  //     let nbor = chunk.pointNodes.get(pointNodeCoord);\n  //     if (nbor) {\n  //       neighbors.NORTH = new PointNodeRef({\n  //         z: selfPointNodeRef.z,\n  //         chunkCoord,\n  //         pointNodeCoord,\n  //         pointNodeId: nbor.id,\n  //       });\n  //     }\n  //   }\n  // } else {\n  //   let pointNodeCoord = selfPointNodeRef.pointNodeCoord.addY(-1);\n  //   let nbor = myChunk.pointNodes.get(pointNodeCoord);\n  //   if (nbor) {\n  //     neighbors.NORTH = new PointNodeRef({\n  //       z: selfPointNodeRef.z,\n  //       chunkCoord: selfPointNodeRef.chunkCoord,\n  //       pointNodeCoord,\n  //       pointNodeId: nbor.id,\n  //     });\n  //   }\n  // }\n\n  // progress zlevels\n  // up is only available if we are the center of our chunk\n  if (selfPointNodeRef.pointNodeCoord.equals(Vector2.Zero)) {\n    let upZLevel = worldGen.zLevels[selfPointNodeRef.z + 1];\n    if (upZLevel) {\n      // use our chunkcoord and divide by CHUNK_DIM\n      let chunkCoord = selfPointNodeRef.chunkCoord;\n      let upChunkCoordX = Math.round(\n        chunkCoord.x / ChunkGenConstants.CHUNK_DIM\n      );\n      let upNodeX = chunkCoord.x - ChunkGenConstants.CHUNK_DIM * upChunkCoordX; // should be between - CHUNK_HALF_DIM and CHUNK_HALF_DIM\n      let upChunkCoordY = Math.round(\n        chunkCoord.y / ChunkGenConstants.CHUNK_DIM\n      );\n      let upNodeY = chunkCoord.y - ChunkGenConstants.CHUNK_DIM * upChunkCoordX; // should be between - CHUNK_HALF_DIM and CHUNK_HALF_DIM\n      let upChunkCoord = new Vector2(upChunkCoordX, upChunkCoordY);\n      let upChunk = upZLevel.chunks.get(upChunkCoord);\n      if (upChunk) {\n        let upNode = new Vector2(upNodeX, upNodeY);\n        let nbor = upChunk.pointNodes.get(upNode);\n        if (nbor) {\n          neighbors.UP = new PointNodeRef({\n            z: selfPointNodeRef.z + 1,\n            chunkCoord: upChunkCoord,\n            pointNodeCoord: upNode,\n            pointNodeId: nbor.id,\n          });\n        }\n      }\n    }\n  }\n  // down\n  let downZLevel = worldGen.zLevels[selfPointNodeRef.z - 1];\n  if (downZLevel) {\n    let chunkCoord = selfPointNodeRef.chunkCoord\n      .multiply(9)\n      .add(selfPointNodeRef.pointNodeCoord);\n    let downChunk = downZLevel.chunks.get(chunkCoord);\n    if (downChunk) {\n      let nbor = downChunk.pointNodes.get(Vector2.Zero);\n      if (nbor) {\n        neighbors.DOWN = new PointNodeRef({\n          z: selfPointNodeRef.z - 1,\n          chunkCoord,\n          pointNodeCoord: Vector2.Zero,\n          pointNodeId: nbor.id,\n        });\n      }\n    }\n  }\n\n  return neighbors;\n}\n\nexport function canAllocate(\n  selfPointNodeRef: PointNodeRef,\n  worldGen: WorldGenState,\n  allocatedPointNodeSet: HashSet<PointNodeRef>,\n  hasActiveQuest: boolean\n): 'yes' | 'already allocated' | 'no active quest' | 'not connected' {\n  if (allocatedPointNodeSet.contains(selfPointNodeRef)) {\n    return 'already allocated';\n  }\n  // if (hasActiveQuest === false) {\n  //   return \"no active quest\"\n  // }\n\n  // check if any of our neighbors are allocated\n  const neighbors = getNeighbors(selfPointNodeRef, worldGen);\n\n  let connected = false;\n  for (let nbor of neighbors) {\n    if (allocatedPointNodeSet.contains(nbor)) {\n      connected = true;\n    }\n  }\n  if (connected) {\n    return 'yes';\n  }\n\n  return 'not connected';\n}\n","import {\n  ComputedState,\n  GameState,\n  ResourceModifier,\n  ResourceNontrivialType,\n  ResourceType,\n  ResourceTypeAndModifier,\n} from '../data/GameState';\nimport { NodeType } from '../data/WorldGenState';\nimport { HashMap } from '../lib/util/data_structures/hash';\nimport { enumKeys } from '../lib/util/misc';\n\nexport function computePlayerResourceNodesAggregated(\n  gameState: GameState\n): HashMap<ResourceTypeAndModifier, number> {\n  let playerResourceNodesAggregated = new HashMap<\n    ResourceTypeAndModifier,\n    number\n  >();\n\n  for (let pointNodeRef of gameState.playerSave.allocatedPointNodeHistory) {\n    let pointNodeGen = gameState.worldGen.zLevels[pointNodeRef.z]!.chunks.get(\n      pointNodeRef.chunkCoord\n    )!.pointNodes.get(pointNodeRef.pointNodeCoord)!;\n    if (pointNodeGen.nodeType === NodeType.Nothing) {\n      continue;\n    }\n\n    let resourceTypeAndModifier = new ResourceTypeAndModifier({\n      type: pointNodeGen.resourceType,\n      modifier: pointNodeGen.resourceModifier,\n    });\n\n    playerResourceNodesAggregated.put(\n      resourceTypeAndModifier,\n      (playerResourceNodesAggregated.get(resourceTypeAndModifier) || 0) +\n        pointNodeGen.resourceAmount\n    );\n  }\n  return playerResourceNodesAggregated;\n}\n\nexport function computePlayerResourceAmounts(\n  gameState: GameState\n): ComputedState {\n  let amounts: { [k in ResourceType]?: number } = {};\n\n  let playerResourceNodesAggregated = computePlayerResourceNodesAggregated(\n    gameState\n  );\n\n  // Do the +flat, %increased, etc. calculations here\n  for (let key of enumKeys(ResourceNontrivialType)) {\n    // iterate throu\n    let amount =\n      playerResourceNodesAggregated.get(\n        new ResourceTypeAndModifier({\n          type: key,\n          modifier: ResourceModifier.Flat,\n        })\n      ) || 0;\n    amount *=\n      1 +\n      0.01 *\n        (playerResourceNodesAggregated.get(\n          new ResourceTypeAndModifier({\n            type: key,\n            modifier: ResourceModifier.Increased0,\n          })\n        ) || 0);\n    amount = Math.floor(amount);\n    amount +=\n      playerResourceNodesAggregated.get(\n        new ResourceTypeAndModifier({\n          type: key,\n          modifier: ResourceModifier.AfterIncreased0,\n        })\n      ) || 0;\n    amount *=\n      1 +\n      0.01 *\n        (playerResourceNodesAggregated.get(\n          new ResourceTypeAndModifier({\n            type: key,\n            modifier: ResourceModifier.Increased1,\n          })\n        ) || 0);\n    amount = Math.floor(amount);\n    amount +=\n      playerResourceNodesAggregated.get(\n        new ResourceTypeAndModifier({\n          type: key,\n          modifier: ResourceModifier.AfterIncreased1,\n        })\n      ) || 0;\n    amounts[key] = amount;\n  }\n\n  return {\n    playerResourceAmounts: amounts as { [k in ResourceType]: number },\n    playerResourceNodesAggregated,\n  };\n}\n","import {\n  GameState,\n  PlayerSaveState,\n  PointNodeRef,\n  ResourceType,\n} from '../data/GameState';\nimport { NodeType } from '../data/WorldGenState';\nimport { Const } from '../lib/util/misc';\nimport { canAllocate } from './Neighbors';\n\nexport function doTryAllocate(\n  prev: Const<PlayerSaveState>,\n  prevGameState: GameState,\n  selfPointNodeRef: PointNodeRef\n): [Const<PlayerSaveState>, boolean] {\n  if (\n    canAllocate(\n      selfPointNodeRef,\n      prevGameState.worldGen,\n      prevGameState.playerSave.allocatedPointNodeSet,\n      prevGameState.playerSave.activeQuest !== undefined\n    ) === 'yes' &&\n    checkEfficiencyGate(selfPointNodeRef, prevGameState)\n  ) {\n    // do the change\n    const nextSet = prev.allocatedPointNodeSet.clone();\n    nextSet.put(selfPointNodeRef);\n    const nextHistory = [...prev.allocatedPointNodeHistory];\n    nextHistory.push(selfPointNodeRef);\n    return [\n      {\n        ...prev,\n        allocatedPointNodeHistory: nextHistory,\n        allocatedPointNodeSet: nextSet,\n      },\n      true,\n    ];\n  } else {\n    return [prev, false];\n  }\n}\n\nexport function afterMaybeSpendingSp(\n  prev: Const<PlayerSaveState>,\n  prevGameState: GameState\n): Const<PlayerSaveState> {\n  let next = { ...prev };\n  if (next.spSpentThisQuest !== undefined) {\n    next.spSpentThisQuest += 1;\n  }\n\n  // update quest progress history?\n  if (next.activeQuest) {\n    let resourceType = next.activeQuest.resourceType;\n    let amount =\n      prevGameState.computed.playerResourceAmounts?.[resourceType] || 0;\n    next.questProgressHistory = [...next.questProgressHistory, amount];\n  }\n  return next;\n}\n\nexport function checkEfficiencyGate(\n  selfPointNodeRef: PointNodeRef,\n  gameState: GameState\n) {\n  const self = gameState.worldGen.zLevels[selfPointNodeRef.z].chunks\n    .get(selfPointNodeRef.chunkCoord)\n    ?.pointNodes.get(selfPointNodeRef.pointNodeCoord)!;\n\n  if (self.nodeType !== NodeType.EfficiencyGate) {\n    return true;\n  } else {\n    let resourceType = self.efficiencyGateInfo.thresholdResourceType;\n    let amount = gameState.computed.playerResourceAmounts?.[resourceType] || 0;\n    if (\n      amount >= self.efficiencyGateInfo.thresholdResourceAmount &&\n      gameState.playerSave.allocatedPointNodeHistory.length <=\n        self.efficiencyGateInfo.timeUntilLocked\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n","import { GameState, PointNodeRef } from '../data/GameState';\nimport { UpdaterGeneratorType2 } from '../lib/util/updaterGenerator';\nimport { computePlayerResourceAmounts } from './ComputeState';\nimport { afterMaybeSpendingSp, doTryAllocate } from './OnAllocation';\n\nexport function selectOrReselectNode(\n  updaters: UpdaterGeneratorType2<GameState>,\n  selfPointNodeRef: PointNodeRef\n) {\n  let justTriedToAllocate = false;\n  let justSpentSp = false;\n  let justFailedToAllocate = false;\n\n  // update selected to ourselves\n  updaters.playerUI.selectedPointNode.enqueueUpdate((prev, gameState) => {\n    if (prev?.pointNodeId === selfPointNodeRef.pointNodeId) {\n      // console.log('just selected: ', this);\n      justTriedToAllocate = true;\n    }\n    return selfPointNodeRef;\n  });\n\n  // if we tried to allocate ourselves, see if we can\n  updaters.playerSave.enqueueUpdate((prev, prevGameState) => {\n    if (justTriedToAllocate) {\n      justTriedToAllocate = false;\n      let [next, succeeded] = doTryAllocate(\n        prev,\n        prevGameState,\n        selfPointNodeRef\n      );\n      if (succeeded) {\n        justSpentSp = true;\n        return next;\n      } else {\n        justFailedToAllocate = true;\n        return prev;\n      }\n    }\n    return prev;\n  });\n\n  // TODO(bowei): if we spent sp, remember to update quest status!!\n  updaters.computed.enqueueUpdate((prev, prevGameState) => {\n    if (justSpentSp) {\n      // this.state.justSpentSp = false;\n      // console.log(\"just spent SP!\");\n      let it = computePlayerResourceAmounts(prevGameState);\n      // console.log({ x });\n      return it;\n    }\n    return prev;\n  });\n\n  updaters.playerSave.enqueueUpdate((prev, prevGameState) => {\n    if (justSpentSp) {\n      justSpentSp = false;\n      // console.log(\"just spent SP!\");\n      return afterMaybeSpendingSp(prev, prevGameState);\n    }\n    return prev;\n  });\n\n  // if we failed to allocate, shift the active tab so the player can see why\n  updaters.playerUI.activeTab.enqueueUpdate((prev, prevGameState) => {\n    if (justFailedToAllocate) {\n      justFailedToAllocate = false;\n      return 1;\n    }\n    return prev;\n  });\n}\n","import * as Pixi from 'pixi.js';\nimport { RenderedChunkConstants } from './ChunkComponent';\nimport { UpdaterGeneratorType2 } from '../../lib/util/updaterGenerator';\nimport {\n  GameState,\n  PointNodeGen,\n  PointNodeRef,\n  ResourceModifier,\n  ResourceType,\n} from '../../data/GameState';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { PixiPointFrom } from '../../lib/pixi/pixify';\nimport { multiplyColor } from '../../lib/util/misc';\nimport { TooltippableAreaComponent } from './TooltippableAreaComponent';\nimport { engageLifecycle, LifecycleHandlerBase } from './LifecycleHandler';\nimport { selectOrReselectNode } from '../../game/OnSelectOrReselectNode';\nimport { RootComponentState } from './RootComponent';\nimport { PointNodeTextureSet } from '../textures/PointNodeTexture';\nimport COLORS from '../colors';\nimport { NodeType, ResourceNontrivialType } from '../../data/WorldGenState';\n\ntype Props = {\n  delta: number;\n  args: {\n    pointNodeTexture: PointNodeTextureSet;\n    position: Vector2;\n    markForceUpdate: (childInstance: any) => void;\n  };\n  selfPointNodeRef: PointNodeRef;\n  updaters: UpdaterGeneratorType2<GameState>;\n  tooltipUpdaters: UpdaterGeneratorType2<RootComponentState>['tooltip'];\n  pointNodeGen: PointNodeGen;\n  isSelected: boolean;\n  isAllocated: boolean;\n};\n\ntype State = {\n  numClicks: number; // debug\n  descriptionText: string;\n};\n\nclass PointNodeComponent extends LifecycleHandlerBase<Props, State> {\n  public container: Pixi.Container;\n  public state: State;\n\n  public sprite: Pixi.Sprite;\n  public halfwayCenterSprite: Pixi.Sprite;\n  public centerSprite: Pixi.Sprite;\n  public topHalfSprite: Pixi.Sprite;\n  public hitArea: Pixi.IHitArea;\n\n  public tooltippableArea?: TooltippableAreaComponent;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      numClicks: 0,\n      descriptionText: '',\n    };\n    this.updateSelf(props); // initialize the description text properly\n    this.container = new Pixi.Container();\n\n    let defaultTexture = props.args.pointNodeTexture.find((it) => {\n      return it.cropFraction >= 0.99;\n    })?.texture;\n    this.container.sortableChildren = true;\n    this.sprite = new Pixi.Sprite(defaultTexture);\n    this.sprite.anchor.x = 0.5;\n    this.sprite.anchor.y = 0.5;\n    this.sprite.zIndex = -2;\n    this.container.addChild(this.sprite);\n\n    this.topHalfSprite = new Pixi.Sprite(\n      props.args.pointNodeTexture.find((it) => {\n        return it.cropFraction >= 0.499;\n      })?.texture\n    );\n    this.topHalfSprite.anchor.x = 0.5;\n    this.topHalfSprite.anchor.y = 0.5;\n    this.topHalfSprite.zIndex = -1;\n    // this.topHalfSprite.alpha = 0;\n    if (props.pointNodeGen.nodeType === NodeType.EfficiencyGate) {\n      // adding this drops FPS from 90 static/50 moving to 70 static/40 moving, even when alpha off, so we only add it for the nodes that need it\n      this.container.addChild(this.topHalfSprite);\n    }\n\n    const mask = new Pixi.Graphics();\n    mask.beginFill(COLORS.black);\n    mask.drawRect(\n      0,\n      0,\n      this.topHalfSprite.width,\n      this.topHalfSprite.height / 2\n    );\n    mask.pivot.x = this.topHalfSprite.width / 2;\n    mask.pivot.y = this.topHalfSprite.height / 2;\n    mask.zIndex = 30;\n    // this.container.addChild(mask);\n    // this.topHalfSprite.mask = mask; // DO NOT DO THIS, masking many masks is extremely slow: https://forums.rpgmakerweb.com/index.php?threads/games-optimisations-tips.92717/\n\n    this.centerSprite = new Pixi.Sprite(defaultTexture);\n    this.centerSprite.anchor.x = 0.5;\n    this.centerSprite.anchor.y = 0.5;\n    this.centerSprite.scale = PixiPointFrom(new Vector2(0.5, 0.5));\n    this.centerSprite.zIndex = 1;\n    this.centerSprite.alpha = 0; // TESTING\n    // this.container.addChild(this.centerSprite);\n\n    this.halfwayCenterSprite = new Pixi.Sprite(defaultTexture);\n    this.halfwayCenterSprite.anchor.x = 0.5;\n    this.halfwayCenterSprite.anchor.y = 0.5;\n    this.halfwayCenterSprite.scale = PixiPointFrom(new Vector2(0.75, 0.75));\n    this.halfwayCenterSprite.zIndex = 0;\n    // disable this sprite for now - causes a fairly significant fps hit, until we get around to holding less nodes on the page at once\n    this.halfwayCenterSprite.alpha = 0;\n    // this.container.addChild(this.halfwayCenterSprite);\n\n    this.container.interactive = true;\n    // NOTE(bowei): ive tested, the following 2 settings don't significantly affect FPS\n    this.container.buttonMode = true;\n    this.hitArea = new Pixi.Rectangle(\n      -RenderedChunkConstants.NODE_HITAREA_PX / 2,\n      -RenderedChunkConstants.NODE_HITAREA_PX / 2,\n      RenderedChunkConstants.NODE_HITAREA_PX,\n      RenderedChunkConstants.NODE_HITAREA_PX\n    );\n    // note: hitarea breaks child onhover: https://github.com/pixijs/pixi.js/issues/5837\n    this.container.hitArea = this.hitArea;\n\n    // const tooltippableAreaPropsFactory = (p: Props, s: State) => {\n    //   let nodeDescription: string = \"Nothing (empty node)\";\n    //   if (p.pointNodeGen.resourceType !== ResourceType.Nothing) {\n    //     nodeDescription = `${p.pointNodeGen.resourceAmount} ${p.pointNodeGen.resourceModifier} ${p.pointNodeGen.resourceType}`;\n    //   }\n    //   return {\n    //     args: {\n    //       markForceUpdate: this.markForceUpdate,\n    //     },\n    //     text: nodeDescription,\n    //     hitArea: this.hitArea, // TODO(bowei): move into state???\n    //   }\n    // }\n    // this.tooltippableArea = new TooltippableAreaComponent(tooltippableAreaPropsFactory(props, this.state));\n    // this.container.addChild(this.tooltippableArea.container);\n    // this.addChild({\n    //   childClass: TooltippableAreaComponent,\n    //   instance: this.tooltippableArea,\n    //   propsFactory: tooltippableAreaPropsFactory,\n    // });\n  }\n\n  protected updateSelf(props: Props) {\n    let nodeDescription: string = 'Nothing (empty node)';\n    if (props.pointNodeGen.nodeType === NodeType.EfficiencyGate) {\n      nodeDescription = `Unlocks at 300 Mana0 in 14 or fewer allocations`; // TODO\n    } else if (props.pointNodeGen.nodeType !== NodeType.Nothing) {\n      nodeDescription = `${props.pointNodeGen.resourceAmount} ${props.pointNodeGen.resourceModifier} ${props.pointNodeGen.resourceType}`;\n    }\n    this.state.descriptionText = nodeDescription;\n  }\n\n  protected renderSelf(props: Props) {\n    this.container.position = PixiPointFrom(props.args.position);\n    let tint: number;\n    let centerTint: number;\n    if (props.isSelected) {\n      tint = COLORS.selectedTint;\n      centerTint = COLORS.selectedTint;\n    } else {\n      tint = COLORS.nullTint;\n      centerTint = COLORS.nullTint;\n    }\n    if (props.isAllocated) {\n      tint = COLORS.allocatedTint;\n    } else {\n    }\n\n    let baseColor: number = 0;\n    let topHalfColor: number = 0;\n    if (props.pointNodeGen.nodeType === NodeType.Nothing) {\n      baseColor = COLORS.nodeBlue; // blue that mixes in with bg\n    } else if (props.pointNodeGen.nodeType === NodeType.EfficiencyGate) {\n      baseColor = COLORS.nodeAqua; // bg color = abcdef\n      topHalfColor = multiplyColor(COLORS.nodeAqua, COLORS.gateTint); // grayish white\n    } else if (\n      props.pointNodeGen.resourceType === ResourceNontrivialType.Mana0\n    ) {\n      if (props.pointNodeGen.resourceModifier === ResourceModifier.Flat) {\n        baseColor = COLORS.nodePink;\n      } else if (\n        props.pointNodeGen.resourceModifier === ResourceModifier.Increased0\n      ) {\n        baseColor = COLORS.nodeLavender;\n      }\n    }\n    // switch (props.pointNodeGen.resourceType) {\n    //   case ResourceType.Nothing:\n    //     baseColor = 0x99bbff; // blue that mixes in with bg\n    //     break;\n    //   case ResourceType.Mana0:\n    //     baseColor = 0xeeaaaa; // red\n    //     break;\n    //   case ResourceType.Mana1:\n    //     baseColor = 0xbb7733; // brown?\n    //     break;\n    //   case ResourceType.Mana2:\n    //     baseColor = 0x44aa44; // green\n    //     break;\n    // }\n\n    this.sprite.tint = multiplyColor(baseColor, tint);\n    this.centerSprite.tint = multiplyColor(baseColor, centerTint);\n    this.topHalfSprite.tint = multiplyColor(topHalfColor, tint);\n\n    // TESTING\n    let textureToFind = Math.floor(Math.random() * 9) / 8 - 0.001;\n    this.topHalfSprite.texture = props.args.pointNodeTexture.find(\n      (it) => it.cropFraction >= textureToFind\n    )?.texture!;\n\n    // NOTE(bowei): careful, we dont want to set the scale of our tooltip to be bigger\n    if (props.selfPointNodeRef.pointNodeCoord.equals(Vector2.Zero)) {\n      this.container.scale = PixiPointFrom(new Vector2(1.25, 1.25));\n    }\n  }\n\n  protected shouldUpdate(\n    staleProps: Props,\n    staleState: State,\n    props: Props,\n    state: State\n  ): boolean {\n    for (let key of Object.keys(staleProps) as (keyof Props)[]) {\n      if (key === 'delta' || key === 'args' || key === 'updaters') {\n        continue;\n      }\n      if (staleProps[key] !== props[key]) {\n        console.log(`node shouldUpdate differed in ${key}, returning true`);\n        return true;\n      }\n      if (key === 'selfPointNodeRef') {\n        if (staleProps[key]?.hash() !== props[key]?.hash()) {\n          console.log(`node shouldUpdate differed in ${key}, returning true`);\n          return true;\n        } else {\n          continue;\n        }\n      }\n    }\n    return false;\n  }\n\n  protected didMount() {\n    const { updaters } = this._staleProps; // we assume this will never change\n\n    //     this.container.addListener('pointerover', (event: Pixi.InteractionEvent) => {\n    //       this.state.pointerover = event;\n    //     })\n    //     this.container.addListener('pointerout', () => {\n    //       this.state.pointerover = undefined;\n    //     })\n    //\n\n    this.container.addListener(\n      'pointerdown',\n      (event: Pixi.InteractionEvent) => {\n        this._staleProps.args.markForceUpdate(this);\n        this.state.numClicks++;\n        selectOrReselectNode(updaters, this._staleProps.selfPointNodeRef);\n        // event.stopPropagation();\n      }\n    );\n\n    this.container.addListener(\n      'pointerover',\n      (event: Pixi.InteractionEvent) => {\n        // this._staleProps.args.markForceUpdate(this);\n\n        // source: https://www.iwm-tuebingen.de/iwmbrowser/lib/pixi/tooltip.js\n        const localPosition = event.data.getLocalPosition(this.container);\n        const position = new Vector2(\n          this.container.worldTransform.tx,\n          this.container.worldTransform.ty\n        );\n        // const position = new Vector2(this.container.worldTransform.tx, this.container.worldTransform.ty);\n\n        this._staleProps.tooltipUpdaters.enqueueUpdate((prev) => {\n          const next = {\n            ...prev,\n            visible: true,\n            text: this.state.descriptionText,\n            position: position.add(localPosition),\n          };\n          // console.log({ next });\n          return next;\n        });\n      }\n    );\n\n    this.container.addListener('pointerout', (event: Pixi.InteractionEvent) => {\n      // this._staleProps.args.markForceUpdate(this);\n\n      this._staleProps.tooltipUpdaters.enqueueUpdate((prev) => {\n        const next = { ...prev, visible: false, text: '' };\n        return next;\n      });\n    });\n\n    this.container.addListener(\n      'pointermove',\n      (event: Pixi.InteractionEvent) => {\n        // this._staleProps.args.markForceUpdate(this);\n\n        // source: https://www.iwm-tuebingen.de/iwmbrowser/lib/pixi/tooltip.js\n        const localPosition = event.data.getLocalPosition(this.container);\n        const position = new Vector2(\n          this.container.worldTransform.tx,\n          this.container.worldTransform.ty\n        );\n\n        this._staleProps.tooltipUpdaters.position.enqueueUpdate(\n          position.add(localPosition)\n        );\n      }\n    );\n  }\n\n  public toString(): string {\n    return 'PointNodeCompoent ' + this._staleProps.selfPointNodeRef.toString();\n  }\n}\n\nconst wrapped = engageLifecycle(PointNodeComponent);\n// eslint-disable-next-line\ntype wrapped = PointNodeComponent;\nexport { wrapped as PointNodeComponent };\nexport type { Props as PointNodeComponentProps };\n","import * as Pixi from 'pixi.js';\nimport { HashSet, KeyedHashMap } from '../../lib/util/data_structures/hash';\nimport {\n  ChunkGen,\n  ChunkGenConstants,\n  ChunkRef,\n  GameState,\n  PointNodeRef,\n} from '../../data/GameState';\nimport {\n  PointNodeComponent,\n  PointNodeComponentProps,\n} from './PointNodeComponent';\nimport { UpdaterGeneratorType2 } from '../../lib/util/updaterGenerator';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { PixiPointFrom } from '../../lib/pixi/pixify';\nimport { engageLifecycle, LifecycleHandlerBase } from './LifecycleHandler';\nimport { RootComponentState } from './RootComponent';\nimport { PointNodeTextureSet } from '../textures/PointNodeTexture';\n\nexport class RenderedChunkConstants {\n  //   public static SPACING_PX: number = 24;\n  //   public static CHUNK_SPACING_PX: number = (ChunkGenConstants.CHUNK_DIM + 0.5) * RenderedChunkConstants.SPACING_PX;\n  //   public static NODE_SIZE_PX: number = 14;\n  //   public static NODE_HITAREA_PX: number = 18;\n  public static SPACING_PX: number = 36;\n  public static CHUNK_SPACING_PX: number =\n    (ChunkGenConstants.CHUNK_DIM + 0.0) * RenderedChunkConstants.SPACING_PX;\n  public static NODE_SIZE_PX: number = 22;\n  public static NODE_HITAREA_PX: number =\n    RenderedChunkConstants.NODE_SIZE_PX + 4;\n  public static NODE_ROUNDED_PX: number = 4;\n}\n\ntype Props = {\n  delta: number;\n  args: {\n    pointNodeTexture: PointNodeTextureSet;\n    markForceUpdate: (childInstance: any) => void;\n  };\n  selfChunkRef: ChunkRef;\n  updaters: UpdaterGeneratorType2<GameState>;\n  tooltipUpdaters: UpdaterGeneratorType2<RootComponentState>['tooltip'];\n  position: Vector2;\n  chunkGen: ChunkGen;\n  selectedPointNode: PointNodeRef | undefined;\n  allocatedPointNodeSubset: HashSet<PointNodeRef>;\n};\n\ntype State = {};\n\nclass ChunkComponent2 extends LifecycleHandlerBase<Props, State> {\n  public container: Pixi.Container;\n  public state: State;\n\n  public children: KeyedHashMap<PointNodeRef, PointNodeComponent>;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {};\n    this.container = new Pixi.Container();\n    this.children = new KeyedHashMap();\n\n    this.resyncChildren(props);\n  }\n\n  protected renderSelf(props: Props) {\n    this.container.position = PixiPointFrom(props.position);\n  }\n\n  protected shouldUpdate(\n    prevProps: Props,\n    prevState: State,\n    props: Props,\n    state: State\n  ): boolean {\n    // return true;\n    for (let key of Object.keys(prevProps) as (keyof Props)[]) {\n      if (key === 'delta' || key === 'args' || key === 'updaters') {\n        continue;\n      }\n      if (key === 'position') {\n        if (!prevProps[key].equals(props[key])) {\n          console.log(`chunk shouldUpdate differed in ${key}, returning true`);\n          return true;\n        } else {\n          continue;\n        }\n      }\n      if (key === 'selectedPointNode') {\n        if (prevProps[key]?.hash() !== props[key]?.hash()) {\n          console.log(`chunk shouldUpdate differed in ${key}, returning true`);\n          return true;\n        } else {\n          continue;\n        }\n      }\n      if (key === 'selfChunkRef') {\n        if (prevProps[key]?.hash() !== props[key]?.hash()) {\n          console.log(`chunk shouldUpdate differed in ${key}, returning true`);\n          return true;\n        } else {\n          continue;\n        }\n      }\n      if (key === 'allocatedPointNodeSubset') {\n        // subsets could be different objects but have the same contents\n        if (!prevProps[key].equals(props[key])) {\n          // console.log(`prevProps: ${JSON.stringify(prevProps[key])}`);\n          // console.log(`props: ${JSON.stringify(props[key])}`);\n          console.log(`chunk shouldUpdate differed in ${key}, returning true`);\n          return true;\n        } else {\n          continue;\n        }\n      }\n      if (prevProps[key] !== props[key]) {\n        console.log(`chunk shouldUpdate differed in ${key}, returning true`);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private resyncChildren(props: Props) {\n    let childrenToDelete = this.children.clone(); // track which children need to be destroyed according to new props\n    console.log(`chunk component upsert children got here`);\n    // console.log(`chunk component upsert children has ${this.children.size()} children`);\n\n    for (let [\n      pointNodeCoord,\n      pointNodeGen,\n    ] of props.chunkGen.pointNodes.entries()) {\n      const pointNodeRef = new PointNodeRef({\n        z: props.selfChunkRef.z,\n        chunkCoord: props.selfChunkRef.chunkCoord,\n        pointNodeCoord: pointNodeCoord,\n        pointNodeId: pointNodeGen.id,\n      });\n      let childPropsFactory = (\n        props: Props,\n        state: State\n      ): PointNodeComponentProps => {\n        return {\n          delta: props.delta,\n          args: {\n            pointNodeTexture: props.args.pointNodeTexture,\n            markForceUpdate: this.markForceUpdate,\n            position: pointNodeRef.pointNodeCoord.multiply(\n              RenderedChunkConstants.SPACING_PX\n            ),\n          },\n          selfPointNodeRef: pointNodeRef,\n          updaters: props.updaters,\n          tooltipUpdaters: props.tooltipUpdaters,\n          pointNodeGen,\n          isSelected:\n            props.selectedPointNode?.pointNodeId === pointNodeRef.pointNodeId,\n          isAllocated: props.allocatedPointNodeSubset.contains(pointNodeRef),\n        };\n      };\n      const childKey = pointNodeRef;\n\n      let childComponent = this.children.get(childKey);\n      if (childComponent) {\n        // childComponent.update(childPropsFactory(props, this.state));\n        childrenToDelete.remove(childKey);\n      } else {\n        childComponent = new PointNodeComponent(\n          childPropsFactory(props, this.state)\n        );\n        this.children.put(pointNodeRef, childComponent);\n        // this.container.addChild(childComponent.container);\n        this.addChild({\n          childClass: PointNodeComponent,\n          instance: childComponent,\n          propsFactory: childPropsFactory,\n        });\n      }\n    }\n    console.log(\n      `chunk component to delete has ${childrenToDelete.size()} children`\n    );\n    for (let [childKey, childComponent] of childrenToDelete.entries()) {\n      // childComponent.willUnmount();\n      this.children.remove(childKey);\n      // this.container.removeChild(childComponent.container);\n      this.removeChild(childComponent);\n    }\n  }\n\n  protected updateChildren(props: Props) {\n    this.resyncChildren(props);\n  }\n\n  protected didForceUpdateChild(instance: LifecycleHandlerBase<any, any>) {\n    // IMPORTANT! this is intended to raise the child that asked for a force update to the top so it isn't covered\n    // by other sibling pixi containers. however this code doesnt work well during the update call, for some reason (not sure why)\n    this.container.removeChild(instance.container);\n    this.container.addChild(instance.container);\n  }\n}\n\nconst wrapped = engageLifecycle(ChunkComponent2);\n// eslint-disable-next-line\ntype wrapped = ChunkComponent2;\nexport { wrapped as ChunkComponent };\nexport type { Props as ChunkComponentProps };\n","import { HashMap, KeyedHashMap } from './data_structures/hash';\nimport { Const } from './misc';\n\n/**\n * Class representing a value which is only computed when used.\n *\n * Usage: const lazy = new Lazy(() => thingThatReturnsSomething()).\n * Then thingThatReturnsSomething() will only get called on the first time lazy.get() is called.\n * On the second and subsequent times, lazy.get() will return the same object - the factory method is not called again.\n */\nexport class Lazy<T> {\n  private _wasConstructed: boolean = false;\n  private _value: T | undefined = undefined;\n  private _factory: () => T;\n\n  constructor(\n    factory: () => T\n    // structure?: T extends { [key: string]: any } ? T : void\n  ) {\n    this._factory = factory;\n  }\n  public get(): T {\n    // T might have undefined as a valid value\n    if (this._value !== undefined || this._wasConstructed === true) {\n      return this._value!;\n    } else {\n      this._value = this._factory();\n      this._wasConstructed = true;\n      return this._value;\n    }\n  }\n  public wasConstructed(): boolean {\n    return this._wasConstructed;\n  }\n  // public async getAsync(): Promise<T> {\n  //   if (this._value !== undefined || this._wasConstructed === true) {\n  //     return Promise.resolve(this._value!);\n  //   } else {\n  //     return new Promise<T>((resolve, reject) => {\n  //       this._value = this._factory();\n  //       this._wasConstructed = true;\n  //       resolve(this._value);\n  //     });\n  //   }\n  // }\n}\n\nexport function LazyProxy<\n  T extends { [key: string]: any } | { [i: number]: any }\n>(factory: () => T): Const<T> {\n  return (new Proxy(new Lazy(factory), {\n    get: (target, property, receiver) => {\n      if (property === 'toJSON') {\n        return () => {\n          if (target.wasConstructed()) {\n            return target.get();\n          } else {\n            return '[Object Lazy]';\n          }\n        };\n      }\n      const targetValue = target.get();\n      return Reflect.get(targetValue, property);\n    },\n    ownKeys: (target) => {\n      const targetValue = target.get();\n      return Reflect.ownKeys(targetValue);\n    },\n    getOwnPropertyDescriptor: (target, property) => {\n      /**\n       * https://stackoverflow.com/questions/40352613/why-does-object-keys-and-object-getownpropertynames-produce-different-output\n       */\n\n      return Object.getOwnPropertyDescriptor(target.get(), property);\n    },\n    has: (target, property) => {\n      // This is called when iterating over array i.e. array.forEach()\n      return property in target.get();\n    },\n  }) as unknown) as Const<T>;\n}\n\n/**\n * Similar to HashMap, except it allows setting a factory function to be used for missing keys.\n * Also memoizes the result.\n *\n * NOTE: this assume hash() is a strong test for equality, i.e. 2 objects are considered equal if and only if their hashes are the same!!!\n */\nexport class LazyHashMap<K extends { hash(): string }, V> {\n  protected _values: KeyedHashMap<K, V>;\n  protected _factory: (k: K) => V;\n\n  constructor(factory: (k: K) => V) {\n    this._values = new KeyedHashMap();\n    this._factory = factory;\n  }\n\n  // setFactory(factory: (k: K) => V) : LazyHashMap<K, V> {\n  //   this._factory = factory;\n  //   return this;\n  // }\n\n  put(key: K, value: V) {\n    this._values.put(key, value);\n  }\n\n  // remove(key: K): void {\n  //   this._values.remove(key);\n  // }\n\n  peek(key: K): V | undefined {\n    return this._values.get(key);\n  }\n\n  get(key: K): V {\n    if (this._values.contains(key)) {\n      return this._values.get(key)!;\n    } else {\n      const value = this._factory(key);\n      this._values.put(key, value);\n      return value;\n    }\n  }\n\n  precompute(key: K) {\n    if (this._values.contains(key)) {\n      return;\n    } else {\n      const value = this._factory(key);\n      this._values.put(key, value);\n    }\n  }\n\n  // returns true if the key was already instantiated\n  contains(key: K): boolean {\n    return this._values.contains(key);\n  }\n\n  values(): V[] {\n    return this._values.values();\n  }\n\n  keys(): K[] {\n    return this._values.keys();\n  }\n\n  entries(): [K, V][] {\n    return this._values.entries();\n  }\n\n  // *[Symbol.iterator]() {\n  //   // construct a new iterator. note that as usual editing the object during iteration is not supported\n  //   for (let key of Object.keys(this._values)) {\n  //     yield key;\n  //   }\n  // }\n\n  // hashes only the keys - use HashableHashMap if you know that the value type here is also hashable\n  // hashKeyset(): string {\n  //   const hashes: number[] = Object.keys(this._values).map(s => hashCode(s));\n  //   let code: number = hashes.reduce((pv, cv) => pv + cv);\n  //   return code.toString();\n  // }\n\n  size(): number {\n    return this._values.size();\n  }\n\n  clone(): LazyHashMap<K, V> {\n    let n = new LazyHashMap<K, V>(this._factory);\n    n._values = this._values.clone();\n    return n;\n  }\n}\n/*\nexport class LazyHashSet<K extends { hash(): string }> {\n  private _values: LazyHashMap<K, boolean>;\n\n  constructor(factory: (k: K) => boolean, initialValues: K[] = []) {\n    this._values = new LazyHashMap<K, boolean>(factory);\n\n    for (const value of initialValues) {\n      this.put(value);\n    }\n  }\n\n  // remove(key: K): void {\n  //   this._values.remove(key);\n  // }\n\n  put(key: K): void {\n    this._values.put(key, true);\n  }\n\n  get(key: K): boolean {\n    return this._values.get(key) !== undefined;\n  }\n\n  contains(key: K): boolean {\n    return this._values.contains(key);\n  }\n\n  values(): K[] {\n    return this._values.values();\n  }\n\n  // hash(): string {\n  //   return this._values.hashKeyset();\n  // }\n\n  clone(): HashSet<K> {\n    let n = new HashSet<K>();\n    n._values = this._values.clone();\n    return n;\n  }\n\n  size(): number {\n    return this._values.size();\n  }\n\n  equals(other: HashSet<K> | undefined | null) {\n    if (other === undefined || other === null) {\n      return false;\n    }\n\n    if (this.size() !== other.size()) {\n      return false;\n    }\n\n    for (let k of this.values()) {\n      if (!other.contains(k)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // *[Symbol.iterator]() {\n  //   // construct a new iterator. note that as usual\n  //   for (let key of Object.keys(this._values)) {\n  //     yield key;\n  //   }\n  // }\n}\n*/\n","import * as Pixi from 'pixi.js';\nimport { GameState } from '../../data/GameState';\nimport {\n  computeQuestEfficiencyPercent,\n  remapQuestEfficiencyToDisplayable,\n} from '../../game/EfficiencyCalculator';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { Const } from '../../lib/util/misc';\nimport { EfficiencyBarComponent } from './EfficiencyBarComponent';\nimport { FpsComponent } from './FpsComponent';\nimport { engageLifecycle, LifecycleHandlerBase } from './LifecycleHandler';\nimport { ReticleComponent } from './ReticleComponent';\nimport { TooltipComponent, TooltipInfo } from './TooltipComponent';\n\ntype Props = {\n  args: {\n    renderer: Pixi.Renderer;\n    markForceUpdate: (childInstance: any) => void;\n  };\n  delta: number;\n  gameState: Const<GameState>;\n  appSize: Vector2;\n  tick: number;\n  tooltip: TooltipInfo;\n};\n\ntype State = {};\n\nclass FixedCameraStageComponent extends LifecycleHandlerBase<Props, State> {\n  public container: Pixi.Container;\n  public state: State;\n\n  constructor(props: Props) {\n    super(props);\n    this.container = new Pixi.Container();\n    this.container.sortableChildren = true;\n    this.state = {};\n  }\n\n  protected renderSelf(props: Props) {}\n}\n\nconst wrapped = engageLifecycle(FixedCameraStageComponent);\n// eslint-disable-next-line\ntype wrapped = FixedCameraStageComponent;\nexport { wrapped as FixedCameraStageComponent };\nexport type { Props as FixedCameraStageComponentProps };\n","import * as Pixi from 'pixi.js';\nimport {\n  LockStatus,\n  NodeAllocatedStatus,\n} from '../../components/GameArea/GameAreaComponent';\nimport { LockData } from '../../data/PlayerSaveState';\nimport { PixiPointFrom } from '../../lib/pixi/pixify';\nimport { HashMap, KeyedHashMap } from '../../lib/util/data_structures/hash';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { Vector3 } from '../../lib/util/geometry/vector3';\nimport { LazyHashMap } from '../../lib/util/lazy';\nimport { Const } from '../../lib/util/misc';\nimport COLORS from '../colors';\nimport { engageLifecycle, LifecycleHandlerBase } from './LifecycleHandler';\n\ntype Props = {\n  args: {\n    position: Vector2;\n    textures: {\n      circle: Pixi.Texture;\n      rect: Pixi.Texture;\n      square: Pixi.Texture;\n    };\n  };\n  appSize: Vector2;\n  virtualGridLocation: Const<Vector3>;\n  allocationStatusMap: Const<KeyedHashMap<Vector3, NodeAllocatedStatus>>;\n  fogOfWarStatusMap: Const<HashMap<Vector3, NodeAllocatedStatus>>;\n  lockStatusMap: Const<HashMap<Vector3, LockStatus | undefined>>;\n  lockMap: Const<LazyHashMap<Vector3, LockData | undefined>>;\n};\n\ntype State = {};\n\nclass StrategicHexGridComponent extends LifecycleHandlerBase<Props, State> {\n  public container: Pixi.Container;\n  public state: State;\n  private graphics: Pixi.Sprite;\n  private hexGrid: KeyedHashMap<Vector2, Pixi.Sprite> = new KeyedHashMap();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      numClicks: 0,\n      descriptionText: '',\n    };\n    this.updateSelf(props);\n    this.container = new Pixi.Container();\n\n    // test graphics\n    this.graphics = new Pixi.Sprite();\n    this.graphics.texture = props.args.textures.circle;\n    this.graphics.tint = COLORS.borderBlack;\n    this.graphics.visible = false;\n    this.container.addChild(this.graphics);\n\n    // populate a grid\n    // TODO(bowei): unhardcode\n    for (let j = -20; j <= 20; j++) {\n      for (let i = -35 + Math.floor(j / 2); i <= 35 + Math.floor(j / 2); i++) {\n        const graphics = new Pixi.Sprite();\n        graphics.texture = props.args.textures.circle;\n        graphics.tint = COLORS.nodePink;\n        // graphics.visible = false;\n        // if ((i == 0 && j == 0) || (i == 5 && j == 5)) {\n        //   // graphics.visible = true;\n        //   graphics.tint = COLORS.borderBlack;\n        // }\n        graphics.position = PixiPointFrom(\n          props.appSize.divide(2).add(new Vector2(30 * i - 15 * j, -26 * j))\n        );\n        this.container.addChild(graphics);\n        this.hexGrid.put(new Vector2(i, j), graphics);\n      }\n    }\n  }\n\n  protected updateSelf(props: Props) {}\n\n  protected renderSelf(props: Props) {\n    this.container.position = PixiPointFrom(props.args.position);\n    this.graphics.position = PixiPointFrom(props.appSize.divide(2));\n\n    for (let [v, graphics] of this.hexGrid.entries()) {\n      graphics.position = PixiPointFrom(\n        props.appSize.divide(2).add(new Vector2(30 * v.x - 15 * v.y, -26 * v.y))\n      );\n      // if (v.x <= 1 && v.x >= -1 && v.y <= 1 && v.y >= -1) {\n\n      // } else {\n      //   continue;\n      // }\n      // props.allocationStatusMap.get(props.virtualGridLocation.add(Vector3.FromVector2(v)))\n      const virtualLocation = props.virtualGridLocation.add(\n        Vector3.FromVector2(v)\n      );\n      const nodeVisibleStatus =\n        props.fogOfWarStatusMap.get(virtualLocation) ||\n        NodeAllocatedStatus.HIDDEN;\n      const nodeAllocatedStatus =\n        props.allocationStatusMap.get(virtualLocation) ||\n        NodeAllocatedStatus.HIDDEN;\n      const lockData = props.lockMap.get(virtualLocation);\n      const lockStatus = props.lockStatusMap.get(virtualLocation);\n\n      if (nodeVisibleStatus === NodeAllocatedStatus.HIDDEN) {\n        graphics.visible = false;\n      } else if (nodeAllocatedStatus === NodeAllocatedStatus.TAKEN) {\n        graphics.visible = true;\n        graphics.tint = COLORS.borderBlack;\n      } else if (\n        nodeVisibleStatus === NodeAllocatedStatus.AVAILABLE ||\n        nodeVisibleStatus === NodeAllocatedStatus.UNREACHABLE\n      ) {\n        graphics.visible = true;\n        graphics.tint = COLORS.nodePink;\n      }\n\n      // graphics.anchor = PixiPointFrom(Vector2.Zero);\n      // graphics.pivot = PixiPointFrom(Vector2.Zero);\n      if (lockData) {\n        graphics.texture = props.args.textures.rect;\n        graphics.position.x -= props.args.textures.rect.width / 2;\n        graphics.position.y -= props.args.textures.rect.height / 2;\n        // graphics.tint = COLORS.borderBlack;\n      } else {\n        graphics.texture = props.args.textures.circle;\n        graphics.position.x -= props.args.textures.circle.width / 2;\n        graphics.position.y -= props.args.textures.circle.height / 2;\n      }\n    }\n  }\n\n  protected shouldUpdate(\n    staleProps: Props,\n    staleState: State,\n    props: Props,\n    state: State\n  ): boolean {\n    for (let key of Object.keys(staleProps) as (keyof Props)[]) {\n      // if (key === 'delta' || key === 'args' || key === 'updaters') {\n      if (key === 'args') {\n        continue;\n      }\n      if (staleProps[key] !== props[key]) {\n        console.log(`hexgrid shouldUpdate differed in ${key}, returning true`);\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nconst wrapped = engageLifecycle(StrategicHexGridComponent);\n// eslint-disable-next-line\ntype wrapped = StrategicHexGridComponent;\nexport { wrapped as StrategicHexGridComponent };\nexport type { Props as StrategicHexGridComponentProps };\n","import * as Pixi from 'pixi.js';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { ChunkGenConstants, GameState, IntentName } from '../../data/GameState';\nimport {\n  generatePointNodeTexture,\n  PointNodeTextureSet,\n} from '../textures/PointNodeTexture';\nimport { ZLevelGenFactory } from '../../game/worldGen/WorldGenStateFactory';\nimport { Const } from '../../lib/util/misc';\nimport { Lazy } from '../../lib/util/lazy';\nimport { UpdaterGeneratorType2 } from '../../lib/util/updaterGenerator';\nimport { ZLevelComponent, ZLevelComponentProps } from './ZLevelComponent';\nimport { engageLifecycle, LifecycleHandlerBase } from './LifecycleHandler';\nimport { FixedCameraStageComponent } from './FixedCameraStageComponent';\nimport { TooltipInfo } from './TooltipComponent';\nimport COLORS from '../colors';\nimport { PixiPointFrom } from '../../lib/pixi/pixify';\nimport {\n  StrategicHexGridComponent,\n  StrategicHexGridComponentProps,\n} from './StrategicHexGridComponent';\nimport {\n  generateSimpleTextures,\n  SimpleTextureSet,\n} from '../textures/SimpleTextures';\n\ntype State = {\n  pointNodeTexture: Lazy<PointNodeTextureSet>;\n  simpleTexture: Lazy<SimpleTextureSet>;\n  tick: number;\n  playerCurrentZ: number;\n  tooltip: TooltipInfo;\n};\n\ntype Props = {\n  args: {\n    renderer: Pixi.Renderer;\n    markForceUpdate: (childInstance: any) => void;\n  };\n  updaters: UpdaterGeneratorType2<GameState>;\n  delta: number;\n  gameState: Const<GameState>;\n  appSize: Vector2;\n};\n\nclass RootComponent2 extends LifecycleHandlerBase<Props, State> {\n  public container: Pixi.Container;\n  public state: State;\n  private stateUpdaters: UpdaterGeneratorType2<State>;\n  protected fireStateUpdaters: () => void;\n\n  /* children */\n  // Contains HUD, and other entities that don't move when game camera moves\n  private fixedCameraStage: FixedCameraStageComponent;\n  // Contains game entities that move when game camera pans/zooms. Highly encouraged to have further subdivions.\n  private actionStage: Pixi.Container;\n  // Contains a few entities that doesn't move when game camera moves, but located behind action stage entities, e.g. static backgrounds\n  private backdropStage: Pixi.Container;\n  // public keyboard: KeyboardState;\n  private strategicHexGrid: StrategicHexGridComponent;\n\n  private backdrop: Pixi.Graphics;\n\n  constructor(props: Props) {\n    super(props);\n    this.container = new Pixi.Container();\n    this.container.sortableChildren = true;\n    ({\n      state: this.state,\n      stateUpdaters: this.stateUpdaters,\n      fireStateUpdaters: this.fireStateUpdaters,\n    } = this.useState<State, RootComponent2>(this, {\n      pointNodeTexture: new Lazy(() =>\n        generatePointNodeTexture(props.args.renderer)\n      ),\n      simpleTexture: new Lazy(() =>\n        generateSimpleTextures(props.args.renderer)\n      ),\n      tick: 0,\n      playerCurrentZ: 0,\n      tooltip: {\n        visible: false,\n        position: undefined,\n        text: '',\n      },\n    }));\n\n    const fixedCameraStagePropsFactory = (props: Props, state: State) => {\n      return {\n        args: {\n          renderer: props.args.renderer,\n          markForceUpdate: this.markForceUpdate,\n        },\n        delta: props.delta,\n        gameState: props.gameState,\n        appSize: props.appSize,\n        tick: state.tick,\n        tooltip: { ...state.tooltip },\n      };\n    };\n    this.fixedCameraStage = new FixedCameraStageComponent(\n      fixedCameraStagePropsFactory(props, this.state)\n    );\n    this.addChild({\n      childClass: FixedCameraStageComponent,\n      instance: this.fixedCameraStage,\n      propsFactory: fixedCameraStagePropsFactory,\n    });\n\n    this.actionStage = new Pixi.Sprite();\n    this.actionStage.zIndex = 0;\n    this.actionStage.sortableChildren = true;\n    this.container.addChild(this.actionStage);\n\n    const strategicHexGridPropsFactory = (\n      props: Props,\n      state: State\n    ): StrategicHexGridComponentProps => {\n      return {\n        args: {\n          position: Vector2.Zero,\n          textures: state.simpleTexture.get(),\n        },\n        appSize: props.appSize,\n        virtualGridLocation: props.gameState.playerUI.virtualGridLocation,\n        allocationStatusMap: props.gameState.playerSave.allocationStatusMap,\n        fogOfWarStatusMap: props.gameState.computed.fogOfWarStatusMap!,\n        lockStatusMap: props.gameState.computed.lockStatusMap!,\n        lockMap: props.gameState.worldGen.lockMap,\n      };\n    };\n    this.strategicHexGrid = new StrategicHexGridComponent(\n      strategicHexGridPropsFactory(props, this.state)\n    );\n    this.addChild({\n      childClass: StrategicHexGridComponent,\n      instance: this.strategicHexGrid,\n      propsFactory: strategicHexGridPropsFactory,\n    });\n\n    this.backdropStage = new Pixi.Sprite();\n    this.backdropStage.zIndex = -1;\n    this.backdropStage.sortableChildren = true;\n    this.container.addChild(this.backdropStage);\n\n    this.backdrop = new Pixi.Graphics();\n    this.backdropStage.addChild(this.backdrop);\n    this.backdrop.beginFill(COLORS.backgroundBlue, 1);\n    // backdrop.alpha = 0.5; // if alpha == 0, Pixi does not register this as a hittable area\n    this.backdrop.interactive = true;\n    // backdrop.interactiveChildren = true; // not sure what this does\n    this.backdrop.drawRect(0, 0, props.appSize.x, props.appSize.y);\n  }\n\n  protected updateSelf(props: Props) {\n    this.state.tick++;\n  }\n\n  protected renderSelf(props: Props) {\n    this.backdrop.width = props.appSize.x;\n    this.backdrop.height = props.appSize.y;\n  }\n\n  protected didMount() {\n    const { updaters } = this._staleProps;\n  }\n\n  protected didUpdate() {\n    const { updaters } = this._staleProps;\n  }\n}\n\nconst wrapped = engageLifecycle(RootComponent2);\n// eslint-disable-next-line\ntype wrapped = RootComponent2;\nexport { wrapped as RootComponent };\nexport type { Props as RootComponentProps, State as RootComponentState };\n","import * as Pixi from 'pixi.js';\nimport COLORS from '../colors';\nimport { RenderedChunkConstants } from '../components/ChunkComponent';\n\nexport type PointNodeTextureSet = {\n  cropFraction: number;\n  texture: Pixi.Texture;\n}[];\n\nexport function generatePointNodeTexture(\n  renderer: Pixi.Renderer\n): PointNodeTextureSet {\n  // generate sprite textures for 0 to 100% vertical cropped in increments of 1/8\n  let textureSet: PointNodeTextureSet = [];\n  for (let i = 0; i <= 8; i++) {\n    const cropFraction = i / 8;\n    let g = new Pixi.Graphics();\n    g.beginFill(COLORS.white);\n    g.drawRoundedRect(\n      -RenderedChunkConstants.NODE_SIZE_PX / 2,\n      -RenderedChunkConstants.NODE_SIZE_PX / 2,\n      RenderedChunkConstants.NODE_SIZE_PX,\n      RenderedChunkConstants.NODE_SIZE_PX,\n      RenderedChunkConstants.NODE_ROUNDED_PX\n    );\n    let mask = new Pixi.Graphics();\n    mask.beginFill(COLORS.black);\n    mask.drawRect(\n      -RenderedChunkConstants.NODE_SIZE_PX / 2,\n      -RenderedChunkConstants.NODE_SIZE_PX / 2,\n      RenderedChunkConstants.NODE_SIZE_PX,\n      RenderedChunkConstants.NODE_SIZE_PX * cropFraction\n    );\n    g.mask = mask;\n    // g.x = 200;\n    // g.y = 200;\n    // this.app.stage.addChild(g);\n    // let texture = renderer.generateTexture(g, Pixi.SCALE_MODES.NEAREST, 1);\n    let texture = renderer.generateTexture(g, Pixi.SCALE_MODES.LINEAR, 1);\n    // const sprite = new Pixi.Sprite(texture);\n    // sprite.x = 300;\n    // sprite.y = 300;\n    // this.app.stage.addChild(sprite);\n    textureSet.push({\n      cropFraction,\n      texture,\n    });\n  }\n  return textureSet;\n}\n","import * as Pixi from 'pixi.js';\nimport { PixiPointFrom } from '../../lib/pixi/pixify';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport COLORS from '../colors';\n\nexport interface SimpleTextureSet {\n  circle: Pixi.Texture;\n  rect: Pixi.Texture;\n  square: Pixi.Texture;\n}\n\nexport function generateSimpleTextures(\n  renderer: Pixi.Renderer\n): SimpleTextureSet {\n  let circle = new Pixi.Graphics();\n  circle.beginFill(COLORS.white);\n  circle.drawCircle(0, 0, 8);\n  // circle.pivot = PixiPointFrom(Vector2.Zero);\n\n  let rect = new Pixi.Graphics();\n  rect.beginFill(COLORS.white);\n  // rect.drawRect(-6, -10, 12, 20);\n  rect.drawRect(0, 0, 4, 20);\n  // rect.pivot = PixiPointFrom(Vector2.Zero);\n\n  let square = new Pixi.Graphics();\n  square.beginFill(COLORS.white);\n  square.drawRect(0, 0, 16, 16);\n  // square.pivot = PixiPointFrom(Vector2.Zero);\n\n  return {\n    circle: renderer.generateTexture(circle, Pixi.SCALE_MODES.LINEAR, 1),\n    rect: renderer.generateTexture(rect, Pixi.SCALE_MODES.LINEAR, 1),\n    square: renderer.generateTexture(square, Pixi.SCALE_MODES.LINEAR, 1),\n  };\n}\n","import * as Pixi from 'pixi.js';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { GameState, WindowState } from '../data/GameState';\n// eslint-disable-next-line\nimport { assertOnlyCalledOnce, Const } from '../lib/util/misc';\nimport { RootComponent } from './components/RootComponent';\nimport { UpdaterGeneratorType2 } from '../lib/util/updaterGenerator';\nimport COLORS from './colors';\nimport createBunnyExample from './BunnyExample';\n\ntype Props = {\n  args: {\n    fireBatch: () => void;\n    isSecondConstructorCall: boolean;\n  };\n  updaters: UpdaterGeneratorType2<GameState>; // aka updaters\n  gameState: Const<GameState>;\n};\n\ntype State = {\n  appSize: Vector2;\n  originalAppSize: Vector2;\n};\n\nfunction appSizeFromWindowSize(window?: Const<Vector2>): Vector2 {\n  return new Vector2({\n    x: Math.min(1920, (window?.x || Infinity) - 24),\n    y: Math.min(1080, (window?.y || Infinity) - 24),\n  });\n}\n\n/**\n * Pixi side of a pixi-react bridge. This class owns a pixi application and receives props updates from react by way of rerender().\n * Those props updates do not apply immediately but are queued up and apply all at once on the next tick in the baseGameLoop().\n * Kicks off the pixi component lifecycle handling by updating props on Pixi RootComponent.\n */\nexport class PixiReactBridge {\n  public app!: Pixi.Application;\n\n  state!: State;\n  props!: Props;\n  private staleProps?: Props;\n\n  rootComponent: RootComponent | undefined;\n  onTick!: (d: number) => void;\n\n  /**\n   * NOTE: for lifecycle convenience, we allow initializing with essentially empty props, and to finish the initialization\n   * lazily at the first rerender() call\n   * NOTE: this causes an annoying flash since we don't know the initial window size\n   */\n  constructor(props?: Props, isSecondConstructorCall: boolean = false) {\n    // verify that we are not loading this twice when we expect to load it only once -- bad for performance!!\n    if (!(props?.args?.isSecondConstructorCall || isSecondConstructorCall)) {\n      // assertOnlyCalledOnce(\"Pixi react bridge constructor\"); // annoying with react hot reload, disable for now}\n    }\n\n    let appSize = new Vector2(800, 600);\n    this.state = {\n      appSize,\n      originalAppSize: appSize,\n    };\n\n    this.app = new Pixi.Application({\n      width: this.state.appSize.x,\n      height: this.state.appSize.y,\n      antialias: true, // both about the same FPS, i get around 30 fps on 1600 x 900\n      transparent: true, // true -> better fps?? https://github.com/pixijs/pixi.js/issues/5580\n      resolution: window.devicePixelRatio || 1, // lower -> more FPS but uglier\n      // resolution: 0.5,\n      // resolution: 2,\n      autoDensity: true,\n      powerPreference: 'low-power', // the only valid one for webgl\n      backgroundColor: COLORS.white, // immaterial - we recommend setting color in backdrop graphics\n    });\n\n    // test\n    // createBunnyExample({ parent: this.app.stage, ticker: this.app.ticker, x: this.app.screen.width / 2, y: this.app.screen.height / 2 });\n  }\n\n  public pause() {\n    this.app.ticker.remove(this.onTick);\n  }\n  public destroy() {\n    this.app.destroy(true, {\n      children: true,\n      texture: true,\n      baseTexture: true,\n    });\n  }\n\n  public didMount() {\n    this.onTick = (delta) => this.baseGameLoop(delta);\n    this.onTick = this.onTick.bind(this);\n    this.app.ticker.add(this.onTick);\n\n    // we forgot to set app size properly when pixi first loaded, so do it now\n    this.state.appSize = appSizeFromWindowSize(\n      new Vector2(\n        this.props.gameState.windowState.innerWidth,\n        this.props.gameState.windowState.innerHeight\n      )\n    );\n  }\n\n  /**\n   * Please only call once!!\n   * Usage: const container = useRef<HTMLDivElement>(null); useEffect(() => { application.register(container.current!); }, []);\n   */\n  public register(curr: HTMLDivElement) {\n    curr.appendChild(this.app.view);\n  }\n\n  updateSelf(props: Props, staleProps?: Props) {\n    if (props === staleProps) {\n      props.updaters.tick.enqueueUpdate((it) => it + 1); // TODO(bowei): reneable this\n      return;\n    }\n\n    // memoize: compute app state from window state dimensions only if they changed from last tick\n    if (\n      !(\n        props.gameState.windowState.innerWidth ===\n          staleProps?.gameState.windowState.innerWidth &&\n        props.gameState.windowState.innerHeight ===\n          staleProps?.gameState.windowState.innerHeight\n      )\n    ) {\n      // console.log(\n      //   'update self inner',\n      //   props.gameState.windowState,\n      //   staleProps?.gameState.windowState\n      // );\n      this.state.appSize = appSizeFromWindowSize(\n        new Vector2(\n          props.gameState.windowState.innerWidth,\n          props.gameState.windowState.innerHeight\n        )\n      );\n    }\n\n    props.updaters.tick.enqueueUpdate((it) => it + 1); // TODO(bowei): reneable this\n  }\n\n  // shim, called from react, possibly many times , possibly at any time, including during the baseGameLoop below\n  // props should be a referentially distinct object from props the last time this was called\n  rerender(futureProps: Props) {\n    if (this.rootComponent && this.props === futureProps) {\n      // skip updating props if we're already initialized and there's no new props object\n      return;\n    }\n\n    // console.log('base app rerender called');\n\n    // take the props handed down from react (probably due to our own props.updaters.fireBatch() call, see game loop) and\n    // record them for future use. note that the future props do not take effect down the child hierarchy unless they are\n    // manually told to do so.\n    this.props = futureProps;\n\n    // If we're not done initializing yet (note that constructor does not set props!), finish it now\n    if (!this.rootComponent) {\n      // finish initialization\n      this.rootComponent = new RootComponent({\n        args: {\n          renderer: this.app.renderer,\n          markForceUpdate: () => {},\n        },\n        updaters: this.props.updaters,\n        delta: 0,\n        gameState: this.props.gameState,\n        appSize: this.state.appSize,\n      });\n      this.app.stage.addChild(this.rootComponent.container);\n\n      this.renderSelf(this.props);\n\n      // test\n      // createBunnyExample({ parent: this.app.stage, ticker: this.app.ticker, x: this.app.screen.width / 2, y: this.app.screen.height / 2 });\n      this.didMount();\n    }\n  }\n\n  renderSelf(props: Props) {\n    this.app.renderer.resize(this.state.appSize.x, this.state.appSize.y);\n  }\n\n  baseGameLoop(delta: number) {\n    if (this.props.gameState.playerUI.isPixiHidden) {\n      // console.log('skipping update since pixi is not visible');\n      this.props.updaters.tick.enqueueUpdate((it) => it + 1); // TODO(bowei): reneable this\n      this.props.args.fireBatch(); // fire enqueued game state updates, which should come back from react in the rerender()\n      return; // skip update loop if pixi is hidden\n    }\n    // assume props is up to date\n    this.updateSelf(this.props, this.staleProps);\n\n    // send props downwards\n    this.rootComponent?.update({\n      args: {\n        renderer: this.app.renderer,\n        markForceUpdate: () => {},\n      },\n      updaters: this.props.updaters,\n      delta,\n      gameState: this.props.gameState,\n      appSize: this.state.appSize,\n    });\n\n    this.renderSelf(this.props);\n    this.staleProps = this.props;\n    this.props.args.fireBatch(); // fire enqueued game state updates, which should come back from react in the rerender()\n  }\n}\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { UseGameStateContext } from '../contexts';\nimport { PixiReactBridge } from '../pixi/PixiReactBridge';\nimport { WindowState } from '../data/GameState';\nimport { Lazy } from '../lib/util/lazy';\n\nconst initialApplication = new Lazy(() => new PixiReactBridge());\n\n/**\n * React side of a pixi-react bridge. This react component owns the div which own the canvas element,\n * and send rerender props updates to pixi application when react causes state to be updated.\n */\nexport function PixiWrapperComponent(props: { hidden: boolean }) {\n  const [application, setApplication] = useState(initialApplication.get());\n  const container = useRef<HTMLDivElement>(null);\n  const [gameState, gameStateUpdaters, fireBatchedSetGameState] = useContext(\n    UseGameStateContext\n  );\n\n  useEffect(() => {\n    // remove old application if it exists\n    for (let i = container.current!.childNodes.length - 1; i >= 0; i--) {\n      container.current!.removeChild(container.current!.childNodes[i]);\n    }\n    // add the application\n    container.current!.appendChild(application.app.view);\n  }, [application]);\n\n  // Trigger component render on first load and also when game state is updated\n  // wrap in useeffect to avoid triggering every react render (130+ UPS) and only check every pixi render (60fps)\n  useEffect(() => {\n    application.rerender({\n      args: {\n        fireBatch: fireBatchedSetGameState,\n        isSecondConstructorCall: false,\n      },\n      updaters: gameStateUpdaters,\n      gameState,\n    });\n  }, [application, fireBatchedSetGameState, gameStateUpdaters, gameState]);\n\n  return (\n    <>\n      <div ref={container} hidden={props.hidden} style={{}} />\n    </>\n  );\n}\n","import React from 'react';\nimport UAParser from 'ua-parser-js';\nimport {\n  GameState,\n  IntentName,\n  PlayerIntentState,\n  WindowState,\n} from '../data/GameState';\nimport { UpdaterGeneratorType2 } from '../lib/util/updaterGenerator';\n\ntype Props = {\n  updaters: UpdaterGeneratorType2<WindowState, GameState>;\n};\n\ntype State = {};\n\n// TODO(bowei): on mobile, for either ios or android, when in portrait locked orientation, we want to serve a landscape\n// experience - similar to a native app which is landscape locked.\n// (on mobile in already landscape orientation, and in all desktop, serve ordinary orientation.)\n// also note that android webapp supports manifest.json setting orientation, but not in the browser\n// FOR NOW - ignore this\n// https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Managing_screen_orientation\n// https://stackoverflow.com/questions/14360581/force-landscape-orientation-mode\nconst browser = new UAParser().getBrowser();\nlet forceRotate = false;\nif (\n  browser.name === 'Mobile Safari' &&\n  window.innerWidth < window.innerHeight\n) {\n  forceRotate = true;\n}\n//     <div className={classnames({ App: true, \"force-landscape\": forceRotate })}>\n/*\n.force-landscape {\n  transform: rotate(90deg);\n}\n*/\n\n/**\n * Empty react element with listeners for window changes.\n */\nexport class WindowListenerComponent extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  // NOTE(bowei): does using e.repeat here break when window loses focus??\n  handleWindowResize = (e: any) => {\n    this.props.updaters.enqueueUpdate((old) => {\n      // console.log(\"executing window state update in window onresize in app\");\n      // const result = { ...old };\n      // result.innerWidth = window.innerWidth;\n      // result.innerHeight = window.innerHeight;\n      // return result;\n      return {\n        ...old,\n        innerWidth: window.innerWidth,\n        innerHeight: window.innerHeight,\n      };\n    });\n  };\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowResize);\n  }\n  render() {\n    return <> </>;\n  }\n}\n","import { HashSet } from '../../lib/util/data_structures/hash';\nimport { IVector3, Vector3 } from '../../lib/util/geometry/vector3';\n\nexport enum Direction {\n  NORTHWEST = 'NORTHWEST',\n  SOUTHWEST = 'SOUTHWEST',\n  NORTHEAST = 'NORTHEAST',\n  SOUTHEAST = 'SOUTHEAST',\n  EAST = 'EAST',\n  WEST = 'WEST',\n  UP = 'UP',\n  DOWN = 'DOWN',\n}\n\n/**\n * Moving 1 unit of grid on a z level corresponds to moving this many units of grid in the same direction on the z level below.\n */\nconst PER_Z_SCALE_FACTOR = 6;\n\n/**\n *   2   3\n * 4 - O - 1\n *   6   5\n * x-axis is along 0 -> 1\n * y-axis is along 0 -> 2\n * z-axis is vertical\n *\n * @param base 0\n */\nexport function getCoordNeighbors(\n  base: Vector3\n): { [d in Direction]?: Vector3 } {\n  let neighbors: { [d in Direction]?: Vector3 } = {} as any;\n\n  neighbors.EAST = base.addX(1);\n  neighbors.WEST = base.addX(-1);\n  neighbors.NORTHWEST = base.addY(1);\n  neighbors.SOUTHEAST = base.addY(-1);\n  neighbors.NORTHEAST = base.add(1, 1, 0);\n  neighbors.SOUTHWEST = base.add(-1, -1, 0);\n\n  // TODO(bowei): reenable up/down neighbors later\n  // neighbors.DOWN = base\n  //   .multiply(new Vector3(PER_Z_SCALE_FACTOR, PER_Z_SCALE_FACTOR, 1))\n  //   .addZ(-1);\n\n  // if (base.x % PER_Z_SCALE_FACTOR === 0 && base.y % PER_Z_SCALE_FACTOR === 0) {\n  //   neighbors.UP = base\n  //     .divide(new Vector3(PER_Z_SCALE_FACTOR, PER_Z_SCALE_FACTOR, 1))\n  //     .addZ(1);\n  // }\n\n  return neighbors;\n}\n\nexport type IReadonlySet<K> = {\n  contains: (k: K) => boolean;\n};\n\n/**\n *\n * @param base\n * @param maxDistance\n * @param minDistance\n * @returns all vector3 coords that are <= maxDistance and >= minDistance.\n */\nexport function getWithinDistance(\n  base: Vector3,\n  maxDistance: number,\n  minDistance?: number,\n  disallowedSet?: IReadonlySet<Vector3>\n): Vector3[] {\n  let touched: HashSet<Vector3> = new HashSet();\n  let disallowedButTouched: HashSet<Vector3> = new HashSet();\n  touched.put(base);\n  const byDist: Vector3[][] = [[base]];\n\n  for (let d = 1; d <= maxDistance; d++) {\n    byDist.push([]);\n    for (let vec of byDist[d - 1]) {\n      const considering = Object.values(getCoordNeighbors(vec));\n      for (const n of considering) {\n        if (!n) continue;\n        if (touched.get(n)) continue;\n\n        if (disallowedSet?.contains(n)) {\n          disallowedButTouched.put(n);\n        } else {\n          touched.put(n);\n          byDist[d].push(n);\n        }\n      }\n    }\n  }\n\n  let result: Vector3[] = [];\n  for (let dd = minDistance || 0; dd <= maxDistance; dd++) {\n    result = result.concat(byDist[dd]);\n  }\n  result = result.concat(disallowedButTouched.values());\n  return result;\n}\n","import { LockStatus } from '../../components/GameArea/GameAreaComponent';\nimport {\n  WorldGenState,\n  ChunkGen,\n  PointNodeGen,\n  ChunkGenConstants,\n  ZLevelGen,\n  ResourceType,\n  ResourceModifier,\n  ResourceNontrivialType,\n} from '../../data/GameState';\nimport { LockData } from '../../data/PlayerSaveState';\nimport { NodeType } from '../../data/WorldGenState';\nimport { HashSet, KeyedHashMap } from '../../lib/util/data_structures/hash';\nimport { Vector2 } from '../../lib/util/geometry/vector2';\nimport { Vector3 } from '../../lib/util/geometry/vector3';\nimport { INTMAX32, squirrel3 } from '../../lib/util/random';\n\nexport type WorldGenStateConfig = any;\n\nexport class WorldGenStateFactory {\n  public config: WorldGenStateConfig;\n\n  constructor(config: WorldGenStateConfig) {\n    this.config = config;\n  }\n\n  public create(): WorldGenState {\n    throw Error();\n  }\n}\n\nexport type ZLevelGenConfig = any;\n\nexport class ZLevelGenFactory {\n  public config: ZLevelGenConfig;\n  public chunkGenFactory: ChunkGenFactory;\n\n  constructor(config: ZLevelGenConfig) {\n    this.config = config;\n    this.chunkGenFactory = new ChunkGenFactory({});\n  }\n\n  public create(args: {\n    seed: number;\n    z: number;\n    startingChunks?: number;\n  }): ZLevelGen {\n    const id = squirrel3(args.seed + args.z);\n    const chunks: KeyedHashMap<Vector2, ChunkGen> = new KeyedHashMap();\n\n    const max = args.startingChunks || 3;\n    // TODO(bowei): generate more chunks??\n    for (let i = -max; i <= max; i++) {\n      for (let j = -max; j <= max; j++) {\n        let location = new Vector2(i, j);\n        chunks.put(\n          location,\n          this.chunkGenFactory.create({ seed: id, location, z: args.z })\n        );\n      }\n    }\n\n    return { id, chunks };\n  }\n}\n\nexport type ChunkGenConfig = any;\n\nexport class ChunkGenFactory {\n  public config: ChunkGenConfig;\n  public pointNodeGenFactory: PointNodeGenFactory;\n\n  constructor(config: ChunkGenConfig) {\n    this.config = config;\n    this.pointNodeGenFactory = new PointNodeGenFactory({});\n  }\n\n  public create(args: {\n    seed: number;\n    location: Vector2;\n    z: number;\n  }): ChunkGen {\n    const id = squirrel3(\n      args.seed + squirrel3(args.seed + args.location.x) + args.location.y\n    );\n    const pointNodes: KeyedHashMap<Vector2, PointNodeGen> = new KeyedHashMap();\n\n    let droppedNodes: HashSet<Vector2> = new HashSet();\n    for (\n      let i = -ChunkGenConstants.CHUNK_HALF_DIM;\n      i <= ChunkGenConstants.CHUNK_HALF_DIM;\n      i++\n    ) {\n      for (\n        let j = -ChunkGenConstants.CHUNK_HALF_DIM;\n        j <= ChunkGenConstants.CHUNK_HALF_DIM;\n        j++\n      ) {\n        if (i === 0 && j === 0) {\n          continue;\n        }\n        // 4 way symmetry plz\n        if (\n          squirrel3(id + i * ChunkGenConstants.CHUNK_DIM + j) / INTMAX32 <\n          ChunkGenConstants.DROP_NODES_CHANCE / 4\n        ) {\n          droppedNodes.put(new Vector2(i, j));\n          droppedNodes.put(new Vector2(j, -i));\n          droppedNodes.put(new Vector2(-i, -j));\n          droppedNodes.put(new Vector2(-j, i));\n        }\n      }\n    }\n\n    for (\n      let i = -ChunkGenConstants.CHUNK_HALF_DIM;\n      i <= ChunkGenConstants.CHUNK_HALF_DIM;\n      i++\n    ) {\n      for (\n        let j = -ChunkGenConstants.CHUNK_HALF_DIM;\n        j <= ChunkGenConstants.CHUNK_HALF_DIM;\n        j++\n      ) {\n        let loc = new Vector2(i, j);\n        if (!droppedNodes.get(loc)) {\n          pointNodes.put(\n            loc,\n            this.pointNodeGenFactory.create({\n              seed: id,\n              location: loc,\n              chunk: args.location,\n              z: args.z,\n            })\n          );\n        }\n      }\n    }\n\n    return { id, pointNodes };\n  }\n}\n\ntype PointNodeGenConfig = {};\n\nexport class PointNodeGenFactory {\n  public config: PointNodeGenConfig;\n\n  constructor(config: PointNodeGenConfig) {\n    this.config = config;\n  }\n\n  public create(args: {\n    seed: number;\n    location: Vector2;\n    chunk: Vector2;\n    z: number;\n  }): PointNodeGen {\n    const id = squirrel3(\n      args.seed + squirrel3(args.seed + args.location.x) + args.location.y\n    );\n\n    let randomFloat = squirrel3(id + 1) / INTMAX32;\n    let resourceType: ResourceNontrivialType = ResourceNontrivialType.Mana2;\n    let nodeType: NodeType = NodeType.Nothing;\n    if (randomFloat < 0.0) {\n      nodeType = NodeType.Nothing;\n    } else if (randomFloat < 0.15) {\n      nodeType = NodeType.Basic;\n      resourceType = ResourceNontrivialType.Mana0;\n    } else if (randomFloat < 0.35) {\n      nodeType = NodeType.EfficiencyGate;\n      resourceType = ResourceNontrivialType.Mana0; // TODO: more types here??\n    } else if (randomFloat < -0.35) {\n      nodeType = NodeType.Basic;\n      resourceType = ResourceNontrivialType.Mana1;\n    } else if (randomFloat < -0.6) {\n      nodeType = NodeType.Basic;\n      resourceType = ResourceNontrivialType.Mana2;\n    } else {\n      nodeType = NodeType.Nothing;\n    }\n    // override for root node\n    if (\n      args.location.equals(Vector2.Zero) &&\n      args.chunk.equals(Vector2.Zero) &&\n      args.z === 0\n    ) {\n      nodeType = NodeType.Nothing;\n    }\n\n    randomFloat = squirrel3(id + 2) / INTMAX32;\n    let resourceModifier: ResourceModifier;\n    if (randomFloat < 0.55) {\n      resourceModifier = ResourceModifier.Flat;\n    } else if (randomFloat < -0.7) {\n      resourceModifier = ResourceModifier.AfterIncreased0;\n    } else if (randomFloat < -0.7) {\n      resourceModifier = ResourceModifier.AfterIncreased1;\n    } else if (randomFloat < 1.95) {\n      resourceModifier = ResourceModifier.Increased0;\n    } else {\n      resourceModifier = ResourceModifier.Increased1;\n    }\n\n    let resourceAmount = 0;\n    if (\n      resourceModifier === ResourceModifier.Flat ||\n      resourceModifier === ResourceModifier.AfterIncreased0 ||\n      resourceModifier === ResourceModifier.AfterIncreased1\n    ) {\n      // ([0..3] x 3) * 20 + 60 == 150 +/- 90\n      randomFloat = Math.floor((squirrel3(id + 3) / INTMAX32) * 4);\n      randomFloat += Math.floor((squirrel3(id + 4) / INTMAX32) * 4); // base is 20 ish?\n      randomFloat += Math.floor((squirrel3(id + 5) / INTMAX32) * 4); // base is 20 ish?\n      resourceAmount = randomFloat * 20 + 60;\n    } else {\n      // 3 + [0..1] x 4 == 5% +/- 2\n      randomFloat = Math.floor((squirrel3(id + 3) / INTMAX32) * 2); // base is 20 ish?\n      randomFloat += Math.floor((squirrel3(id + 4) / INTMAX32) * 2); // base is 20 ish?\n      randomFloat += Math.floor((squirrel3(id + 5) / INTMAX32) * 2); // base is 20 ish?\n      randomFloat += Math.floor((squirrel3(id + 6) / INTMAX32) * 3); // base is 20 ish?\n      resourceAmount = randomFloat + 3;\n    }\n\n    if (nodeType === NodeType.Nothing) {\n      return {\n        id,\n        nodeType,\n      };\n    } else if (nodeType === NodeType.EfficiencyGate) {\n      let thresholdResourceType = ResourceNontrivialType.Mana0;\n      let thresholdResourceAmount = 300;\n      let timeUntilLocked = 14;\n      return {\n        id,\n        resourceAmount,\n        resourceModifier,\n        resourceType,\n        nodeType,\n        efficiencyGateInfo: {\n          thresholdResourceAmount,\n          thresholdResourceType,\n          timeUntilLocked,\n        },\n      };\n    } else {\n      return {\n        id,\n        resourceAmount,\n        resourceModifier,\n        resourceType,\n        nodeType,\n      };\n    }\n  }\n}\n\ntype LockFactoryConfig = {};\n\nexport class LockFactory {\n  public config: LockFactoryConfig;\n\n  constructor(config: LockFactoryConfig) {\n    this.config = config;\n  }\n\n  public create(args: {\n    seed: number;\n    location: Vector3;\n  }): LockData | undefined {\n    const id = squirrel3(\n      args.seed +\n        args.location.x +\n        args.location.y +\n        squirrel3(args.seed + args.location.x + args.location.z)\n    );\n    const p = id / INTMAX32;\n\n    let lockData: LockData = {\n      shortTextTarget: '🔒',\n      shortTextTimer: '',\n      lockStatus: LockStatus.TICKING,\n    };\n    if (args.location.equals(Vector3.Zero)) {\n      return undefined;\n    }\n    // TODO(bowei): unhardcode\n    // locks occur at this frequency\n    if (p < 0.47) {\n      return lockData;\n    }\n\n    return undefined;\n  }\n}\n","import {\n  LockStatus,\n  NodeAllocatedStatus,\n} from '../../components/GameArea/GameAreaComponent';\nimport { GameState } from '../../data/GameState';\nimport { Vector3 } from '../../lib/util/geometry/vector3';\nimport { UpdaterGeneratorType2 } from '../../lib/util/updaterGenerator';\nimport { getWithinDistance, IReadonlySet } from '../lib/HexGrid';\n\nexport interface AllocateNodeInput {\n  nodeLocation: Vector3;\n  newStatus: NodeAllocatedStatus.TAKEN;\n}\n\n// TODO(bowei): unhardcode\nexport const FOG_OF_WAR_DISTANCE = 6;\n\n/**\n * Stateless action wrapper over updaters.\n * Represents the action of allocating a node.\n */\nexport class AllocateNodeAction {\n  updaters: UpdaterGeneratorType2<GameState, GameState>;\n\n  constructor(updaters: UpdaterGeneratorType2<GameState, GameState>) {\n    this.updaters = updaters;\n  }\n\n  enqueueAction(input: AllocateNodeInput) {\n    const { nodeLocation, newStatus } = input;\n\n    this.updaters.playerSave.allocationStatusMap.enqueueUpdate((prevMap) => {\n      // console.log('prev was', prevMap.get(nodeLocation), 'now', newStatus);\n      // if (prevMap.get(nodeLocation) === newStatus) {\n      //   return prevMap;\n      // }\n      prevMap.put(nodeLocation, newStatus);\n      return prevMap.clone();\n    });\n\n    // before updating Fog of war, first unlock any locks\n    this.updaters.computed.lockStatusMap?.enqueueUpdate(\n      (prevMap, prevGameState) => {\n        if (!prevMap) {\n          return prevMap;\n        }\n\n        for (let [\n          location,\n          lockData,\n        ] of prevGameState.worldGen.lockMap.entries()) {\n          if (lockData) {\n            // TODO: compute lock status\n            const newStatus = LockStatus.TICKING;\n            prevMap.put(location, newStatus);\n          }\n        }\n\n        return prevMap.clone();\n      }\n    );\n\n    this.updaters.computed.fogOfWarStatusMap?.enqueueUpdate(\n      (prevMap, prevGameState) => {\n        if (!prevMap) {\n          return prevMap;\n        }\n        prevMap.put(nodeLocation, NodeAllocatedStatus.VISIBLE);\n\n        getWithinDistance(nodeLocation, 1).forEach((n) => {\n          prevMap.put(n, NodeAllocatedStatus.AVAILABLE);\n        });\n\n        // make sure we make use of lock state\n        // getWithinDistance(nodeLocation, 3).forEach((n) => {\n        // const validLocks = prevGameState.worldGen.lockMap\n        const validLocks: IReadonlySet<Vector3> = {\n          // TODO(bowei): optimize this?\n          contains: (v: Vector3) => {\n            // const maybeLock = prevGameState.worldGen.lockMap.get(v);\n            const maybeLock = prevGameState.computed.lockStatusMap?.get(v);\n            if (maybeLock && maybeLock !== LockStatus.OPEN) {\n              return true;\n            }\n            return false;\n          },\n        };\n        getWithinDistance(\n          nodeLocation,\n          FOG_OF_WAR_DISTANCE,\n          0,\n          validLocks\n        ).forEach((n) => {\n          if (\n            (prevMap.get(n) || NodeAllocatedStatus.HIDDEN) ===\n            NodeAllocatedStatus.HIDDEN\n          ) {\n            // NOTE(bowei): fuck, this doesnt cause a update to be propagated... i guess it's fine though\n            prevGameState.worldGen.lockMap.precompute(n);\n            prevMap.put(n, NodeAllocatedStatus.UNREACHABLE);\n          }\n        });\n\n        return prevMap.clone();\n      }\n    );\n  }\n}\n","import {\n  LockStatus,\n  NodeAllocatedStatus,\n} from '../components/GameArea/GameAreaComponent';\nimport {\n  GameState,\n  PointNodeRef,\n  noIntent,\n  WindowState,\n} from '../data/GameState';\nimport { LockData } from '../data/PlayerSaveState';\nimport {\n  HashMap,\n  HashSet,\n  KeyedHashMap,\n} from '../lib/util/data_structures/hash';\nimport { Vector2 } from '../lib/util/geometry/vector2';\nimport { Vector3 } from '../lib/util/geometry/vector3';\nimport { assertOnlyCalledOnce } from '../lib/util/misc';\nimport { Lazy, LazyHashMap } from '../lib/util/lazy';\nimport { computePlayerResourceAmounts } from './ComputeState';\nimport {\n  getCoordNeighbors,\n  getWithinDistance,\n  IReadonlySet,\n} from './lib/HexGrid';\nimport { LockFactory, ZLevelGenFactory } from './worldGen/WorldGenStateFactory';\nimport {\n  NodeContents,\n  NodeContentsFactory,\n} from './worldGen/nodeContents/NodeContentsFactory';\nimport { FOG_OF_WAR_DISTANCE } from './actions/AllocateNode';\n\nexport type GameStateConfig = any;\n\nexport class GameStateFactory {\n  public config: GameStateConfig;\n\n  constructor(config: GameStateConfig) {\n    this.config = config;\n  }\n\n  public create(seed: number | undefined | null = undefined): GameState {\n    if (seed === undefined) {\n      // assertOnlyCalledOnce(\"GameStateFactory.create\");\n    }\n    const mySeed = seed || 0x19283;\n\n    const zLevel = new ZLevelGenFactory({}).create({\n      seed: mySeed,\n      z: 0,\n      startingChunks: 0,\n    });\n    const origin = new Vector2(0, 0);\n    const firstId = zLevel.chunks.get(origin)?.pointNodes.get(origin)?.id!;\n    const pointNodeRef: PointNodeRef = new PointNodeRef({\n      z: 0,\n      chunkCoord: origin,\n      pointNodeId: firstId,\n      pointNodeCoord: origin,\n    });\n\n    const windowState: WindowState = {\n      orientation: 'original',\n      innerWidth: window.innerWidth,\n      innerHeight: window.innerHeight,\n    };\n\n    const lockFactory = new LockFactory({});\n    const lockDataMap = new LazyHashMap<Vector3, LockData | undefined>((k) =>\n      lockFactory.create({ seed: mySeed, location: k })\n    );\n    const nodeContentsFactory = new NodeContentsFactory({});\n    const nodeContentsMap = new LazyHashMap<Vector3, NodeContents>((k) =>\n      nodeContentsFactory.create({ seed: mySeed, location: k })\n    );\n\n    const gameState: GameState = {\n      tick: 0,\n      worldGen: {\n        seed: mySeed,\n        // deprecated\n        zLevels: { 0: zLevel },\n        lockMap: lockDataMap,\n        nodeContentsMap,\n      },\n      playerSave: {\n        // justAllocated: undefined,\n        activeQuest: undefined,\n        spSpentThisQuest: undefined,\n        questProgressHistory: [],\n        questInitialAmount: 0,\n        questsCompleted: [],\n        allocatedPointNodeSet: new HashSet([pointNodeRef]),\n        allocatedPointNodeHistory: [pointNodeRef],\n        score: 0,\n\n        allocationStatusMap: new KeyedHashMap<Vector3, NodeAllocatedStatus>([\n          [Vector3.Zero, NodeAllocatedStatus.TAKEN],\n        ]),\n      },\n      playerUI: {\n        selectedPointNode: undefined,\n        activeTab: 0,\n        isPixiHidden: true,\n        virtualGridLocation: Vector3.Zero,\n        cursoredNodeLocation: undefined,\n        isSidebarOpen: false,\n      },\n      computed: {},\n      intent: {\n        activeIntent: noIntent,\n        newIntent: noIntent,\n        endedIntent: noIntent,\n      },\n      windowState,\n    };\n    gameState.computed = { ...computePlayerResourceAmounts(gameState) };\n    gameState.computed.lockStatusMap = new HashMap();\n    gameState.computed.fogOfWarStatusMap = new HashMap();\n\n    /**\n     * Initialize fog of war and visible locks\n     */\n    // let prevMap = gameState.playerSave.allocationStatusMap;\n    // first precompute the nearby lock states\n    getWithinDistance(Vector3.Zero, FOG_OF_WAR_DISTANCE).forEach((n) => {\n      gameState.worldGen.lockMap.precompute(n);\n    });\n    // fill in lock statuses with computed statuses\n    {\n      let prevMap = gameState.computed.lockStatusMap;\n      let nodeLocation = Vector3.Zero;\n      const prevGameState = gameState;\n\n      for (let [\n        location,\n        lockData,\n      ] of prevGameState.worldGen.lockMap.entries()) {\n        if (lockData) {\n          // compute lock status\n          const newStatus = LockStatus.TICKING;\n          prevMap.put(location, newStatus);\n        }\n      }\n    }\n    // now fog of war flow vision based on computed lock statuses\n    {\n      let prevMap = gameState.computed.fogOfWarStatusMap;\n      let nodeLocation = Vector3.Zero;\n      let newStatus = NodeAllocatedStatus.TAKEN;\n      const prevGameState = gameState;\n\n      prevMap.put(nodeLocation, NodeAllocatedStatus.VISIBLE);\n\n      getWithinDistance(nodeLocation, 1).forEach((n) => {\n        prevMap.put(n, NodeAllocatedStatus.AVAILABLE);\n      });\n\n      // make sure we make use of lock state\n      // getWithinDistance(nodeLocation, 3).forEach((n) => {\n      // const validLocks = prevGameState.worldGen.lockMap\n      const validLocks: IReadonlySet<Vector3> = {\n        // TODO(bowei): optimize this?\n        contains: (v: Vector3) => {\n          // const maybeLock = prevGameState.worldGen.lockMap.get(v);\n          const maybeLock = prevGameState.computed.lockStatusMap?.get(v);\n          if (maybeLock && maybeLock !== LockStatus.OPEN) {\n            return true;\n          }\n          return false;\n        },\n      };\n      getWithinDistance(\n        nodeLocation,\n        FOG_OF_WAR_DISTANCE,\n        0,\n        validLocks\n      ).forEach((n) => {\n        if (\n          (prevMap.get(n) || NodeAllocatedStatus.HIDDEN) ===\n          NodeAllocatedStatus.HIDDEN\n        ) {\n          // NOTE(bowei): fuck, this doesnt cause a update to be propagated... i guess it's fine though\n          prevGameState.worldGen.lockMap.precompute(n);\n          prevMap.put(n, NodeAllocatedStatus.UNREACHABLE);\n        }\n      });\n    }\n\n    return gameState;\n  }\n}\n","import React from 'react';\n\nimport './Sidebar.css';\n\nexport default function Sidebar({ children, hidden, setSidebarHidden }: any) {\n  return (\n    <div className=\"layout\" hidden={hidden}>\n      <div\n        className=\"close\"\n        onClick={() => {\n          setSidebarHidden();\n        }}\n      >\n        ❎ Close\n      </div>\n      <br />\n      <>{children}</>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Tabs.css';\n\nexport default function Tabs({ value, labels, onChange }: any) {\n  return (\n    <div className={'tab-label-container'}>\n      {labels.map((label: any, i: any) => (\n        <Tab onClick={onChange} value={i} active={value === i} key={i}>\n          {label}\n        </Tab>\n      ))}\n    </div>\n  );\n}\n\nexport function Tab({ onClick, value, active, children }: any) {\n  const handleClick = () => {\n    onClick(value);\n  };\n  return (\n    <div className={active ? 'tab-label active' : 'tab-label inactive'}>\n      <div onClick={handleClick}>{children}</div>\n    </div>\n  );\n}\n","import './App.css';\n\nimport classnames from 'classnames';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { DebugOverlayComponent } from './components/DebugOverlayComponent';\nimport { GameAreaComponent } from './components/GameArea/GameAreaComponent';\nimport { GameAreaStateManager } from './components/GameArea/GameAreaStateManager';\nimport { KeyboardListenerComponent } from './components/KeyboardListenerComponent';\nimport { PixiWrapperComponent } from './components/PixiWrapperComponent';\nimport { WindowListenerComponent } from './components/WindowListenerComponent';\nimport { UseGameStateContext } from './contexts';\nimport { GameState, appSizeFromWindowSize } from './data/GameState';\nimport { GameStateFactory } from './game/GameStateFactory';\nimport { batchifySetState } from './lib/util/batchify';\nimport { Vector2 } from './lib/util/geometry/vector2';\nimport { Lazy } from './lib/util/lazy';\nimport {\n  UpdaterGeneratorType2,\n  updaterGenerator2,\n} from './lib/util/updaterGenerator';\nimport COLORS, { colorToCss } from './pixi/colors';\nimport { AllocateNodeAction } from './game/actions/AllocateNode';\nimport Sidebar from './components/Sidebar';\nimport Tabs, { Tab } from './components/Tabs';\n\nconst initialGameState: Lazy<GameState> = new Lazy(() =>\n  new GameStateFactory({}).create(+new Date())\n);\n\n/**\n * Root react component.\n * In charge of creating game state, and hooking up the game display, pixi, keyboard control, and window event listeners.\n */\nfunction App() {\n  const [gameState, setGameState] = useState<GameState>(function factory() {\n    return initialGameState.get();\n  });\n\n  let [batchedSetGameState, fireBatch] = useMemo(\n    () => batchifySetState(setGameState),\n    [setGameState]\n  );\n  let updaters = useMemo(\n    () => updaterGenerator2(initialGameState.get(), batchedSetGameState),\n    [batchedSetGameState]\n  );\n  const appSize = useMemo(() => {\n    return appSizeFromWindowSize(\n      new Vector2(\n        gameState.windowState.innerWidth,\n        gameState.windowState.innerHeight\n      )\n    );\n  }, [gameState.windowState.innerWidth, gameState.windowState.innerHeight]);\n  //*/\n  const gameStateContextValue = useMemo(() => {\n    return [gameState, updaters, fireBatch] as [\n      GameState,\n      UpdaterGeneratorType2<GameState, GameState>,\n      () => void\n    ];\n  }, [gameState, updaters, fireBatch]);\n\n  useEffect(() => {\n    console.log('maybe toggling strategic view');\n    if (gameState.intent.newIntent.TOGGLE_STRATEGIC_VIEW) {\n      updaters.playerUI.isPixiHidden.enqueueUpdate((it) => !it);\n    }\n  }, [gameState.intent.newIntent.TOGGLE_STRATEGIC_VIEW]);\n\n  useEffect(() => {\n    console.log('maybe toggling sidebar');\n    if (gameState.intent.newIntent.TOGGLE_SIDEBAR) {\n      updaters.playerUI.isSidebarOpen.enqueueUpdate((it) => !it);\n    }\n  }, [gameState.intent.newIntent.TOGGLE_SIDEBAR]);\n\n  return (\n    <div className={classnames({ App: true })}>\n      <div className=\"entire-area\">\n        <UseGameStateContext.Provider value={gameStateContextValue}>\n          <PixiWrapperComponent hidden={gameState.playerUI.isPixiHidden} />\n        </UseGameStateContext.Provider>\n        <GameAreaStateManager\n          gameState={gameState}\n          updaters={updaters}\n          actions={{ allocateNode: new AllocateNodeAction(updaters) }}\n        ></GameAreaStateManager>\n      </div>\n\n      <div className=\"debug-overlay\">\n        <DebugOverlayComponent\n          tick={gameState.tick}\n          windowState={gameState.windowState}\n        />\n      </div>\n      <div className=\"button-zone\">\n        <button\n          className=\"button-pixi-toggle\"\n          style={{}}\n          onClick={() => {\n            updaters.playerUI.isPixiHidden.enqueueUpdate((it) => !it);\n          }}\n        >\n          Toggle strategic view (hotkey: m)\n        </button>\n        <span> </span>\n        <button\n          onClick={() => {\n            updaters.playerUI.isSidebarOpen.enqueueUpdate((it) => !it);\n          }}\n        >\n          Toggle sidebar (hotkey: i)\n        </button>\n      </div>\n\n      <Sidebar\n        hidden={!gameState.playerUI.isSidebarOpen}\n        setSidebarHidden={() => {\n          updaters.playerUI.isSidebarOpen.enqueueUpdate(() => false);\n        }}\n      >\n        <Tabs\n          onClick={() => {}}\n          value={0}\n          labels={['foo', 'bar']}\n          onChange={(value: number) => {}}\n          active\n        ></Tabs>\n        <br />\n        content\n      </Sidebar>\n      <KeyboardListenerComponent\n        intent={gameState.intent}\n        updaters={updaters.intent}\n      ></KeyboardListenerComponent>\n      <WindowListenerComponent\n        updaters={updaters.windowState}\n      ></WindowListenerComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import crypto from 'crypto';\n\n/**\n * NOTE(bowei): we use a hash function that is NOT md5 -\n * Either https://github.com/sublee/squirrel3-python/blob/master/squirrel3.py or https://github.com/svaarala/duktape/blob/master/misc/splitmix64.c works fine and is much faster\n * Reference: https://www.youtube.com/watch?v=e4b--cyXEsM or https://www.youtube.com/watch?v=LWFzPP8ZbdU\n * TODO(bowei): port bigint to wasm for faster 64bit operations\n */\n\n// NOTE(bowei): untested\nexport function splitmix64(seed: bigint, i: bigint) {\n  let z: bigint = seed + i * BigInt('0x9e3779b97f4a7c15');\n  z = (z ^ (z >> BigInt(30))) * BigInt('0xBF58476D1CE4E5B9');\n  z = (z ^ (z >> BigInt(27))) * BigInt(0x94d049bb133111eb);\n  return z ^ (z >> BigInt(31));\n}\n\nexport const INTMAX32 = 2 ** 32;\nexport function squirrel3(i: number) {\n  let n = (i + INTMAX32) % INTMAX32;\n  n = Math.imul(n, 0xb5297a4d);\n  n ^= n >>> 8;\n  n += 0x68e31da4;\n  n ^= n << 8;\n  n = Math.imul(n, 0x1b56c4e9);\n  n ^= n >>> 8;\n  return (n + INTMAX32) % INTMAX32;\n}\nexport const PRIME32 = 0x3233f2cd; // not used ; useful for hashing integers; a 32 bit prime\n\n/**\n * Md5 is 16 bytes, or max int of 256 ** 16 = 2 ** 128\n */\nexport class HashState {\n  private seed!: Buffer;\n\n  /**\n   * HashState().step(\"foo\") is equivalent to HashState(\"foo\")\n   */\n  constructor(seed?: string) {\n    const buffer = crypto\n      .createHash('md5')\n      .update((seed || '').toString())\n      .digest();\n    this.seed = buffer;\n  }\n\n  public peekRandom(): number {\n    const buffer = crypto.createHash('md5').update(this.seed).digest();\n    return Number(this.bufferToBigInt(buffer) % BigInt(2 ** 32)) % 2 ** 32;\n  }\n\n  // increment the seed linearly by 1\n  public step(numSteps: number = 1) {\n    this.seed = this.bigIntToBuffer(this.bufferToBigInt(this.seed) + BigInt(1));\n  }\n\n  public stepSeed(seed: string) {\n    const buffer = crypto.createHash('md5').update(seed.toString()).digest();\n    this.seed = this.bigIntToBuffer(\n      this.bufferToBigInt(this.seed) + this.bufferToBigInt(buffer)\n    );\n  }\n\n  private bigIntToBuffer(b: bigint): Buffer {\n    let buf = Buffer.alloc(16);\n    let val = b;\n    for (let i = 0; i < 16; i++) {\n      buf[i] = Number(val % BigInt(256));\n      val = val / BigInt(256);\n    }\n    return buf;\n  }\n\n  private bufferToBigInt(b: Buffer): bigint {\n    let val = BigInt(0);\n    for (let i = 0; i < 16; i++) {\n      val = val * BigInt(256) + BigInt(b[i]);\n    }\n    return val;\n  }\n\n  public random(): number {\n    this.step();\n    return this.peekRandom();\n  }\n}\n"],"sourceRoot":""}