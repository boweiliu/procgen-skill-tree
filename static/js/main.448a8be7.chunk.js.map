{"version":3,"sources":["johnfn_library/epsilon_math.ts","johnfn_library/util.ts","johnfn_library/geometry/vector2.ts","johnfn_library/geometry/line.ts","johnfn_library/entity.ts","johnfn_library/geometry/rect.ts","johnfn_library/data_structures/pair.ts","pixi/RenderRects.ts","pixi/Application.ts","johnfn_library/geometry/rect_group.ts","johnfn_library/environment.ts","johnfn_library/debug.ts","johnfn_library/data_structures/hash.ts","johnfn_library/camera.ts","johnfn_library/base_game.ts","johnfn_library/data_structures/default_grid.ts","johnfn_library/collision_grid.ts","johnfn_library/collision_handler.ts","johnfn_library/keyboard.ts","johnfn_library/base_state.ts","johnfn_library/data_structures/grid.ts","johnfn_library/texture_cache.ts","johnfn_library/tilemap/tilemap_objects.ts","johnfn_library/tilemap/tilemap.ts","johnfn_library/tilemap/tilemap_data.ts","johnfn_library/typesafe_loader.ts","components/Area.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["epsGreaterThan","x","y","epsLessThan","lastUsedId","Util","list","fn","lowestT","undefined","lowestValue","item","value","highestT","highestValue","low","high","Math","floor","random","array","key","sort","a","b","str","mapObj","re","RegExp","Object","keys","join","replace","matched","toLowerCase","func","timeoutId","waitMilliseconds","options","isImmediate","result","args","doLater","apply","shouldCallNow","clearTimeout","setTimeout","d","monthName","getMonth","getDate","getHours","substr","getMinutes","getSeconds","arr","obj","concat","string","length","intersperse","character","repeat","Vector2","propsOrX","_x","_y","this","toString","round","p","abs","max","dx","dy","sqrt","newY","about","amount","origin","angle","PI","cos","sin","other","__type","trans","scale","newX","t","console","error","add","tx","ty","lerp","highX","highY","lowX","lowY","RandRange","hasOwnProperty","JSON","stringify","Zero","One","EntityType","Line","props","x1","x2","y1","y2","_x1","_x2","_y1","_y2","serialized","start","end","cx","cy","ex","theta","atan2","rotate","equals","orientedByX","orientedByY","summedLength","min","filter","l","isDegenerate","transform","reviver","newEnd","newStart","graphics","color","lineStyle","moveTo","lineTo","p1","p2","p3","p4","s","lineIntersection","mag","split","map","Number","Rect","_width","_height","width","height","withY","withX","topLeft","FromPoints","bottomRight","topRight","bottomLeft","center","centerX","centerY","right","bottom","point","size","dimensions","edgesOnlyIsAnIntersection","intersection","getIntersection","smaller","xmin","xmax1","xmax2","xmax","ymin","ymax1","ymax2","ymax","translate","o","w","h","shrink","botRight","r","Pair","first","second","_first","_second","hash","RenderRects","stage","containerRect","config","containerHeightProportion","aspectRatio1","aspectRatio3","downscaleRatio12","downscaleRatio23","circleSize","circleOnColor","circleOffColor","circleHoverColor","circleFillColor","borderOffColor","borderOnColor","borderThickness","centerToEdgeBorderRatio2","centerToEdgeBorderRatio3","cornerCompression1","cornerCompression2","cornerCompression3","debugHasRectBorder","debugRandomOn","assign","hasBorder","newHeight","newRect","withScale","drawRect","layer2","nestRectPair","aspectRatio2","layer3","original","downscaleRatio","newAspectRatio","centerToEdgeBorderRatio","longSide","shortSide","offset","newWidth","leftCenter","rightCenter","FromCenter","topCenter","bottomCenter","rect","cornerCompressionRatio","corners","midpoints","left","top","Pixi","addChild","drawLine","drawCorners","values","drawCircleAt","beginFill","drawCircle","endFill","defaultConfig","canvasWidth","canvasHeight","Application","app","renderRects","antialias","backgroundColor","curr","appendChild","view","viewport","drawFirst","AugmentedSprite","entity","Sprite","Entity","name","activeModes","id","velocity","sprite","hitInfo","hit","collisions","interactions","_collidable","_interactable","queuedUpdates","firstUpdateCalled","texture","collidable","interactable","Error","startUpdating","sortableChildren","anchor","set","child","removeChild","GameReference","state","entities","put","remove","includes","mode","isCollideable","newTexture","parent","FixedStageName","StageName","ParallaxStageName","position","positionAbsolute","children","push","toBeDestroyed","bounds","collisionBounds","shouldUpdate","cb","firstUpdate","update","listener","interactive","on","distance","entityParent","alpha","zIndex","sortChildren","visible","mask","RectGroup","rects","_rects","intersects","r1","r2","delta","subtract","IS_PRODUCTION","window","location","href","IS_DEBUG","Debug","DebugGraphicStack","debug","destroy","persistent","Graphics","drawOnto","toBeRemoved","shift","DrawLine","line","target","fixedCameraStage","lines","getLinesFromRect","results","getRects","DrawRect","profiles","performance","now","average","reduce","rounded","log","drawCount","Container","drawn","justDown","Z","DebugMode","down","W","S","D","A","stageReference","prototype","__render","_render","renderer","__renderCanvas","_renderCanvas","HashSet","initialValues","_values","HashMap","get","Camera","_position","_desiredPosition","_stage","_canvasWidth","_canvasHeight","_currentBounds","_immediatelyCenterOn","halfDimensions","centerOn","immediate","calculateDesiredPosition","desiredPosition","currentBounds","cameraFrame","lerp2D","LERP_SPEED_X","LERP_SPEED_Y","newBounds","DefaultGrid","makeDefault","_data","_makeDefault","_count","inner","CollisionGrid","_cellSize","_numCellsPerRow","_numCellsPerCol","_cells","_renderLines","getRectCollisions","skipEntity","cells","ceil","cell","colliders","rectInCell","entityInCell","overlap","firstRect","otherEntity","secondRect","thisEntity","getRectGroupCollisions","group","collidesRectFast","getCorners","corner","uniqueCells","collidesPoint","takeFirst","contains","firstEntity","secondEntity","getAllCollisions","cellRects","i","j","collider1","collider2","clear","removeAll","associatedEntity","startX","stopX","startY","stopY","addRectGroup","cellSize","Cell","_bounds","FromPoint","CollisionHandler","_tileSize","buildCollisionGrid","grid","collideableEntities","isInteractable","collisionRect","rectOrRectGroup","getHitsAt","xHits","hits","resolveCollisions","updatedBounds","xVelocity","yVelocity","xInteractions","yHits","yInteractions","up","tileWidth","tileHeight","KeyboardState","Q","E","R","T","Y","U","I","O","P","F","G","H","J","K","L","X","C","V","B","N","M","Up","Down","Left","Right","Shift","Spacebar","Enter","justUp","_queuedEvents","document","addEventListener","e","keyDown","keyUp","event","isDown","number","keyCode","which","String","fromCharCode","toUpperCase","slice","queuedEvent","eventToKey","BaseGameState","camera","spriteToEntity","lastCollisionGrid","BaseGame","parallaxStage","assets","collisionHandler","startGameLoop","ticker","gameLoop","getElementById","powerPreference","transparent","resolution","devicePixelRatio","autoDensity","Point","onLoadComplete","initialize","Clear","tick","baseUpdate","ent","activeEntities","getBounds","ResetDrawCount","Grid","count","otherwise","TextureCache","textureName","resourceName","tilewidth","tileheight","Cache","getResource","clone","frame","Rectangle","tile","imageUrlRelativeToGame","spritesheetx","spritesheety","GetTextureFromSpritesheet","lastIndexOf","TiledTilemapObjects","_layers","_customObjects","_map","_allObjects","_assets","layers","customObjects","layer","objectsInLayer","loadLayer","turnOffAllObjects","stopUpdating","layerName","objectLayer","object","find","objectsToGroup","objects","gid","customObject","type","process","properties","TiledTilemap","ParseTiledProperties","gidInfo","spritesheet","tileProperties","allProperties","newObj","isCollider","_gidHasCollision","tileName","associatedObject","names","spriteTex","GetTextureForTile","getInstanceType","gridX","gridY","objectToGroup","grouped","candidate","groupEdge","current","pop","neighbor","minTileX","POSITIVE_INFINITY","minTileY","groupEntity","getGroupInstanceType","objEntity","data","json","pathToTilemap","_tileWidth","_tileHeight","_renderer","_objects","cache","TilemapData","getTileWidth","getTileHeight","getAllObjectLayers","getLayer","region","loadLayersInRect","tileLayers","getLayerNames","renderTexture","RenderTexture","create","iStart","jStart","tex","render","layerEntity","objectLayers","loadObjectLayers","getAllObjects","_tilesets","buildCollisionInfoForTiles","loadTilesets","loadTileLayers","tilesets","imageUrlRelativeToTilemap","image","firstgid","imageheight","imagewidth","tiles","tileCountInTileset","URL","gidStart","gidEnd","gidHasCollision","tileset","tileAndCollisionObjects","objectgroup","_getAllLayersHelper","root","allLayers","getAllLayers","loadTiles","offsetx","offsety","loadRectLayer","chunks","chunk","relTileX","relTileY","isNaN","offsetX","offsetY","absTileX","absTileY","isGidCollider","normalizedGid","tilesWide","matchedTileInfo","getTileAtAbsolutePositionForLayer","FlattenByOne","getCollidersInRegionForLayer","AssetsToLoad","application","debugFlags","resourceNames","loader","loadComplete","loadCompleteCallbacks","startStageOneLoading","resources","resource","paths","path","load","startStageTwoLoading","allTilemapDependencyPaths","castedResource","substring","tilemapData","getTilesets","tilemapDependencyPath","finishLoading","callback","Loader","Audio","Area","container","useRef","useEffect","register","drawStart","ref","onClick","App","className","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8TAMaA,EAAiB,SAACC,EAAWC,GACxC,OAAQD,EAPa,KAOCC,EAAK,GAGhBC,EAAc,SAACF,EAAWC,GACrC,OAAQD,EAXa,KAWCC,EAAK,G,OCXzBE,EAAa,EAMJC,EAAb,mGACkBC,EAAWC,GACzB,IAD8D,EAC1DC,OAA6BC,EAC7BC,OAAkCD,EAFwB,cAI3CH,GAJ2C,IAI9D,2BAAyB,CAAC,IAAfK,EAAc,QACjBC,EAAQL,EAAGI,SAEGF,IAAhBC,GAA6BE,EAAQF,KACvCF,EAAUG,EACVD,EAAcE,IAT4C,8BAa9D,OAAOJ,IAdX,4BAiBkBF,EAAWC,GACzB,IAD8D,EAC1DM,OAA8BJ,EAC9BK,OAAmCL,EAFuB,cAI3CH,GAJ2C,IAI9D,2BAAyB,CAAC,IAAfK,EAAc,QACjBC,EAAQL,EAAGI,SAEIF,IAAjBK,GAA8BF,EAAQE,KACxCD,EAAWF,EACXG,EAAeF,IAT2C,8BAa9D,OAAOC,IA9BX,gCAiCmBE,EAAaC,GAC5B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAOD,GAAOA,KAlCrD,gCAqC6BK,EAAYC,GACrC,OAAOD,EAAME,MAAK,SAACC,EAAGC,GACpB,OAAOH,EAAIE,GAAKF,EAAIG,QAvC1B,iCA4CIC,EACAC,GAEA,IAAMC,EAAK,IAAIC,OAAOC,OAAOC,KAAKJ,GAAQK,KAAK,KAAM,MAErD,OAAON,EAAIO,QAAQL,GAAI,SAAAM,GACrB,OAAOP,EAAOO,EAAQC,oBAlD5B,+BAuDIC,GAKI,IACAC,EADD,OAJHC,EAIG,uDAJgB,GACnBC,EAGG,uDAHO,CACRC,aAAa,GAKTC,EAAS,WAAqB,IAAD,uBAAhBC,EAAgB,yBAAhBA,EAAgB,gBACjC,IAAMC,EAAU,WACdN,OAAY3B,EACP6B,EAAQC,aACXJ,EAAKQ,MAAM,EAAMF,IAIfG,EAAgBN,EAAQC,kBAA6B9B,IAAd2B,OAE3B3B,IAAd2B,GACFS,aAAaT,GAGfA,EAAYU,WAAWJ,EAASL,GAE5BO,GACFT,EAAKQ,MAAM,EAAMF,IAIrB,OAAOD,IApFX,iCAuF2BO,GACvB,IAAMC,EAAY,CAChB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACAD,EAAEE,YAEJ,MAAM,GAAN,OAAUD,EAAV,YAAuBD,EAAEG,UAAzB,cAAwC,KAAOH,EAAEI,YAAYC,QAAQ,GAArE,aACE,KAAOL,EAAEM,cACTD,QAAQ,GAFV,aAEiB,KAAOL,EAAEO,cAAcF,QAAQ,MAzGpD,mCA4GgCG,GAC5B,IAD6C,EACzCf,EAAc,GAD2B,cAG3Be,GAH2B,IAG7C,2BAAuB,CAAC,IAAbC,EAAY,QACrBhB,EAASA,EAAOiB,OAAOD,IAJoB,8BAO7C,OAAOhB,IAnHX,gCAsH0BkB,EAAgBC,GAAoD,IAApCC,EAAmC,uDAArB,GAAIC,EAAiB,uDAAL,IACpF,OAAOH,EAASE,EAAcC,EAAUC,OAAOH,EAASD,EAAOC,YAvHnE,KCEaI,EAAb,WAUE,aAAuF,IAA3EC,EAA0E,uDAA5B,CAAE/D,EAAG,EAAGC,EAAG,GAAKA,EAAY,gEAT9E+D,QAS8E,OAR9EC,QAQ8E,EAC5D,kBAAbF,GACTG,KAAKF,GAAKD,EACVG,KAAKD,GAAKhE,IAEViE,KAAKF,GAAKD,EAAS/D,EACnBkE,KAAKD,GAAKF,EAAS9D,GAhBzB,8CAI2B,OAAOiE,KAAKF,KAJvC,wBAK2B,OAAOE,KAAKD,OALvC,4CAuCI,OAAOC,KAAKC,aAvChB,iCA2CI,MAAM,IAAN,OAAWD,KAAKlE,EAAhB,aAAsBkE,KAAKjE,EAA3B,OA3CJ,+BA+CI,OAAO,IAAI6D,EAAQ,CACjB9D,GAAIkE,KAAKlE,EACTC,GAAIiE,KAAKjE,MAjDf,8BAsDI,OAAO,IAAI6D,EAAQ,CACjB9D,EAAGgB,KAAKoD,MAAMF,KAAKlE,GACnBC,EAAGe,KAAKoD,MAAMF,KAAKjE,OAxDzB,8BA6DI,OAAO,IAAI6D,EAAQ,CACjB9D,EAAGgB,KAAKC,MAAMiD,KAAKlE,GACnBC,EAAGe,KAAKC,MAAMiD,KAAKjE,OA/DzB,sCAmEkBoE,GACd,OAAOrD,KAAKsD,IAAID,EAAErE,EAAIkE,KAAKlE,GAAKgB,KAAKsD,IAAID,EAAEpE,EAAIiE,KAAKjE,KApExD,uCAuEmBoE,GACf,OAAOrD,KAAKuD,IAAIvD,KAAKsD,IAAID,EAAErE,EAAIkE,KAAKlE,GAAIgB,KAAKsD,IAAID,EAAEpE,EAAIiE,KAAKjE,MAxEhE,+BA2EWoE,GACP,IAAIG,EAAKxD,KAAKsD,IAAID,EAAErE,EAAIkE,KAAKlE,GACzByE,EAAKzD,KAAKsD,IAAID,EAAEpE,EAAIiE,KAAKjE,GAE7B,OAAOe,KAAK0D,KAAKF,EAAKA,EAAKC,EAAKA,KA/EpC,gCAkFYJ,GACR,OAAO,IAAIP,EAAQ,CACjB9D,EAAGkE,KAAKlE,EAAIqE,EAAErE,EACdC,EAAGiE,KAAKjE,EAAIoE,EAAEpE,MArFpB,+BAyFWoE,GACP,OAAO,IAAIP,EAAQ,CACjB9D,EAAGkE,KAAKlE,EAAIqE,EAAErE,EACdC,EAAGiE,KAAKjE,EAAIoE,EAAEpE,MA5FpB,0BAgGMoE,GACF,OAAO,IAAIP,EAAQ,CACjB9D,EAAGkE,KAAKlE,EAAIqE,EAAErE,EACdC,EAAGiE,KAAKjE,EAAIoE,EAAEpE,MAnGpB,2BAuGOD,GACH,OAAO,IAAI8D,EAAQ,CACjB9D,EAAGkE,KAAKlE,EAAIA,EACZC,EAAGiE,KAAKjE,MA1Gd,2BA8GOA,GACH,OAAO,IAAI6D,EAAQ,CACjB9D,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,EAAIA,MAjHlB,6BAqHSa,EAAaC,GAClB,IAAI4D,EAAOT,KAAKjE,EAKhB,OAHI0E,EAAO7D,IAAO6D,EAAO7D,GACrB6D,EAAO5D,IAAQ4D,EAAO5D,GAEnB,IAAI+C,EAAQ,CACjB9D,EAAGkE,KAAKlE,EACRC,EAAG0E,MA7HT,4BAiIQC,EAAiCC,GACrC,OAAO,IAAIf,EAAQ,CACjB9D,GAAIkE,KAAKlE,EAAI4E,EAAM5E,GAAK6E,EAAO7E,EAAI4E,EAAM5E,EACzCC,GAAIiE,KAAKjE,EAAI2E,EAAM3E,GAAK4E,EAAO5E,EAAI2E,EAAM3E,MApI/C,6BAwIS6E,EAAiBC,GAGtB,OAFAA,GAAiB,IAAM/D,KAAKgE,GAErB,IAAIlB,EAAQ,CACjB9D,EAAGgB,KAAKiE,IAAIF,IAAUb,KAAKlE,EAAI8E,EAAO9E,GAAKgB,KAAKkE,IAAIH,IAAUb,KAAKjE,EAAI6E,EAAO7E,GAAK6E,EAAO9E,EAC1FC,EAAGe,KAAKkE,IAAIH,IAAUb,KAAKlE,EAAI8E,EAAO9E,GAAKgB,KAAKiE,IAAIF,IAAUb,KAAKjE,EAAI6E,EAAO7E,GAAK6E,EAAO7E,MA7IhG,6BAiJSkF,GACL,YAAc3E,IAAV2E,IAKFnE,KAAKsD,IAAIJ,KAAKlE,EAAImF,EAAMnF,GF/JP,MEgKjBgB,KAAKsD,IAAIJ,KAAKjE,EAAIkF,EAAMlF,GFhKP,QEQvB,+BA4JWkF,GACP,OACS,IAAIrB,EADQ,kBAAVqB,EACU,CACjBnF,EAAGkE,KAAKlE,EAAImF,EACZlF,EAAGiE,KAAKjE,EAAIkF,GAGK,CACjBnF,EAAGkE,KAAKlE,EAAImF,EAAMnF,EAClBC,EAAGiE,KAAKjE,EAAIkF,EAAMlF,MArK1B,6BA0KSkF,GACL,OACS,IAAIrB,EADQ,kBAAVqB,EACU,CACjBnF,EAAGkE,KAAKlE,EAAImF,EACZlF,EAAGiE,KAAKjE,EAAIkF,GAGK,CACjBnF,EAAGkE,KAAKlE,EAAImF,EAAMnF,EAClBC,EAAGiE,KAAKjE,EAAIkF,EAAMlF,MAnL1B,+BAyLI,MAAO,CACLmF,OAAQ,UACRpF,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,KA5Ld,gCAgMYoF,EAAgBC,GACxB,OAAO,IAAIxB,EAAQ,CACjB9D,EAAGgB,KAAKC,OAAOiD,KAAKlE,EAAIqF,EAAMrF,GAAKsF,GACnCrF,EAAGe,KAAKC,OAAOiD,KAAKjE,EAAIoF,EAAMpF,GAAKqF,OAnMzC,kCAwMI,GAAe,IAAXpB,KAAKlE,GAAsB,IAAXkE,KAAKjE,EACvB,OAAOiE,KAGT,IAAMR,EAAS1C,KAAK0D,KAAKR,KAAKlE,EAAIkE,KAAKlE,EAAIkE,KAAKjE,EAAIiE,KAAKjE,GAEzD,OAAO,IAAI6D,EAAQ,CACjB9D,EAAGkE,KAAKlE,EAAI0D,EACZzD,EAAGiE,KAAKjE,EAAIyD,MAhNlB,4BAoNQ6B,GACJ,OAAO,IAAIzB,EAAQ,CACjB9D,EAAGuF,EACHtF,EAAGiE,KAAKjE,MAvNd,4BA2NQ0E,GACJ,OAAO,IAAIb,EAAQ,CACjB9D,EAAGkE,KAAKlE,EACRC,EAAG0E,MA9NT,gCAmOI,OAAO,IAAIb,EAAQ,CACjB9D,GAAIkE,KAAKlE,EACTC,EAAGiE,KAAKjE,MArOd,2BAyOOkF,EAAgBK,GAEnB,OADIA,EAAI,GAAKA,EAAI,IAAKC,QAAQC,MAAM,mCAC1B,IAANF,EAAgBtB,KACV,IAANsB,EAAgBL,EAEbjB,KAAKoB,MAAM,CAAEtF,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAIwF,EAAGvF,EAAG,EAAIuF,IAAKG,IAAIR,EAAMG,MAAM,CAAEtF,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAGwF,EAAGvF,EAAGuF,OA9OzG,6BAiPSL,EAAgBS,EAAYC,GAEjC,OADID,EAAK,GAAKA,EAAK,GAAKC,EAAK,GAAKA,EAAK,IAAKJ,QAAQC,MAAM,mCACnDxB,KAAKoB,MAAM,CAAEtF,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG,EAAI4F,EAAI3F,EAAG,EAAI4F,IAAMF,IAAIR,EAAMG,MAAM,CAAEtF,EAAG,EAAGC,EAAG,GAAK,CAAED,EAAG4F,EAAI3F,EAAG4F,OAnP5G,6BAsPSV,EAAgBK,GAGrB,OAFAA,EAAI,IAAO,EAAIxE,KAAKiE,IAAI,EAAIO,EAAIxE,KAAKgE,KAE9Bd,KAAK4B,KAAKX,EAAOK,KAzP5B,2BAqBI,OAAO,IAAI1B,EAAQ,CAAE9D,EAAGkE,KAAKlE,EAAI,EAAGC,EAAGiE,KAAKjE,EAAI,OArBpD,iCA2BmBD,GACf,OAAOA,aAAa8D,IA5BxB,6BA+BgBiC,EAAeC,GAAoC,IAArBC,EAAoB,uDAAb,EAAGC,EAAU,uDAAH,EAC3D,OAAO,IAAIpC,EAAQ,CACjB9D,EAAGI,EAAK+F,UAAUF,EAAMF,GACxB9F,EAAGG,EAAK+F,UAAUD,EAAMF,OAlC9B,kCA4PqBzC,GAKjB,OAJKA,EAAI6C,eAAe,MAAS7C,EAAI6C,eAAe,MAClDX,QAAQC,MAAM,8BAGT,IAAI5B,EAAQ,CACjB9D,EAAGuD,EAAIvD,EACPC,EAAGsD,EAAItD,MAnQb,gCAuQmBsD,GACf,OAAO8C,KAAKC,UAAU,CAAEtG,EAAGuD,EAAIvD,EAAGC,EAAGsD,EAAItD,QAxQ7C,KAAa6D,EAwBGyC,KAAgB,IAAIzC,EAAQ,EAAG,GAxBlCA,EAyBG0C,IAAe,IAAI1C,EAAQ,EAAG,GC7BvC,ICQK2C,EDRCC,EAAb,WAqCE,WAAYC,GAEV,IAAIC,EAAIC,EAAIC,EAAIC,EADoC,yBArC9CC,SAqC6C,OApC7CC,SAoC6C,OAnC7CC,SAmC6C,OAlC7CC,SAkC6C,OAH9CC,WAAa,GAMd,OAAQT,GACVC,EAAKD,EAAMC,GACXC,EAAKF,EAAME,GACXC,EAAKH,EAAMG,GACXC,EAAKJ,EAAMI,KAEXH,EAAKD,EAAMU,MAAMrH,EACjB6G,EAAKF,EAAMW,IAAItH,EACf8G,EAAKH,EAAMU,MAAMpH,EACjB8G,EAAKJ,EAAMW,IAAIrH,GAGjBiE,KAAK8C,IAAMJ,EACX1C,KAAKgD,IAAMJ,EACX5C,KAAK+C,IAAMJ,EACX3C,KAAKiD,IAAMJ,EAEX7C,KAAKkD,WAAL,UAAsBlD,KAAK0C,GAA3B,YAAmC1C,KAAK2C,GAAxC,YAAgD3C,KAAK4C,GAArD,YAA6D5C,KAAK6C,IA1DtE,+CAM4B,OAAO7C,KAAK8C,MANxC,yBAO4B,OAAO9C,KAAK+C,MAPxC,yBAQ4B,OAAO/C,KAAKgD,MARxC,yBAS4B,OAAOhD,KAAKiD,MATxC,4BAWgC,OAAO,IAAIrD,EAAQ,CAAE9D,EAAGkE,KAAK0C,GAAI3G,EAAGiE,KAAK4C,OAXzE,0BAYgC,OAAO,IAAIhD,EAAQ,CAAE9D,EAAGkE,KAAK2C,GAAI5G,EAAGiE,KAAK6C,OAZzE,qCAeI,IAAMQ,EAAKrD,KAAK8C,IACVQ,EAAKtD,KAAKgD,IAEVO,EAAKvD,KAAK+C,IAGVxC,EAFKP,KAAKiD,IAEAK,EACVhD,EAAKiD,EAAKF,EAEZG,EAAQ1G,KAAK2G,MAAMlD,EAAID,GAQ3B,OANAkD,GAAS,IAAM1G,KAAKgE,IAER,IACV0C,EAAQ,IAAMA,GAGTA,MAhCX,iDAwEqB5C,EAAiBC,GAClC,IAAMsC,EAAQnD,KAAKmD,MACbC,EAAMpD,KAAKoD,IAEjB,OAAO,IAAIZ,EAAK,CACdW,MAAOA,EAAMO,OAAO9C,EAAQC,GAC5BuC,IAAKA,EAAIM,OAAO9C,EAAQC,OA9E9B,iCAkFoBH,EAAgBC,GAChC,OAAO,IAAI6B,EAAK,CACdW,MAAOnD,KAAKmD,MAAM/B,MAAMV,EAAOC,GAC/ByC,IAAKpD,KAAKoD,IAAIhC,MAAMV,EAAOC,OArFjC,wCAyFoBM,GAChB,OAAIjB,KAAKmD,MAAMQ,OAAO1C,EAAMkC,QACxBnD,KAAKmD,MAAMQ,OAAO1C,EAAMmC,KADiBpD,KAAKmD,MAG9CnD,KAAKoD,IAAIO,OAAO1C,EAAMkC,QACtBnD,KAAKoD,IAAIO,OAAO1C,EAAMmC,KADiBpD,KAAKoD,IAGzC,OAhGX,mCA0GI,OAAOpD,KAAK0C,KAAO1C,KAAK2C,KA1G5B,mCA8GI,OAAO3C,KAAK4C,KAAO5C,KAAK6C,KA9G5B,iCAmHa5B,GACT,IAAM2C,EACJ5D,KAAK0C,KAAO1C,KAAK2C,IACjB3C,KAAK0C,KAAOzB,EAAMyB,IAClB1C,KAAK0C,KAAOzB,EAAM0B,GAGdkB,EACJ7D,KAAK4C,KAAO5C,KAAK6C,IACjB7C,KAAK4C,KAAO3B,EAAM2B,IAClB5C,KAAK4C,KAAO3B,EAAM4B,GAGpB,GAAKe,GAAgBC,EAArB,CAEA,IAAMC,EAAgB9D,KAAKR,OAASyB,EAAMzB,OAQ1C,KAPsB,IAAIgD,EAAK,CAC7BE,GAAI5F,KAAKiH,IAAI/D,KAAK0C,GAAIzB,EAAMyB,IAC5BE,GAAI9F,KAAKiH,IAAI/D,KAAK4C,GAAI3B,EAAM2B,IAC5BD,GAAI7F,KAAKuD,IAAIL,KAAK2C,GAAI1B,EAAM0B,IAC5BE,GAAI/F,KAAKuD,IAAIL,KAAK6C,GAAI5B,EAAM4B,MAC3BrD,QAEkBsE,GAMrB,OACS,IAAItB,EADToB,EACc,CACdlB,GAAI1C,KAAK0C,GACTC,GAAI3C,KAAK2C,GACTC,GAAI9F,KAAKuD,IAAIL,KAAK4C,GAAI3B,EAAM2B,IAC5BC,GAAI/F,KAAKiH,IAAI/D,KAAK6C,GAAI5B,EAAM4B,KAGd,CACdD,GAAI5C,KAAK4C,GACTC,GAAI7C,KAAK6C,GACTH,GAAI5F,KAAKuD,IAAIL,KAAK0C,GAAIzB,EAAMyB,IAC5BC,GAAI7F,KAAKiH,IAAI/D,KAAK2C,GAAI1B,EAAM0B,SA5JpC,gDAmK4B1B,GACxB,IAAM2C,EACJ5D,KAAK0C,KAAO1C,KAAK2C,IACjB3C,KAAK0C,KAAOzB,EAAMyB,IAClB1C,KAAK0C,KAAOzB,EAAM0B,GAGdkB,EACJ7D,KAAK4C,KAAO5C,KAAK6C,IACjB7C,KAAK4C,KAAO3B,EAAM2B,IAClB5C,KAAK4C,KAAO3B,EAAM4B,GAGpB,GAAKe,GAAgBC,EAArB,CAEA,IAAMC,EAAgB,IAAItB,EAAKxC,MAAMR,OAAS,IAAIgD,EAAKvB,GAAOzB,OAQ9D,KAPsB,IAAIgD,EAAK,CAC7BE,GAAI5F,KAAKiH,IAAI/D,KAAK0C,GAAIzB,EAAMyB,IAC5BE,GAAI9F,KAAKiH,IAAI/D,KAAK4C,GAAI3B,EAAM2B,IAC5BD,GAAI7F,KAAKuD,IAAIL,KAAK0C,GAAIzB,EAAMyB,IAC5BG,GAAI/F,KAAKuD,IAAIL,KAAK4C,GAAI3B,EAAM2B,MAC3BpD,QAEkBsE,GAMrB,OAAIF,EACK,CACL,IAAIpB,EAAK,CAAEE,GAAI1C,KAAK0C,GAAIC,GAAI3C,KAAK2C,GAAIC,GAAI9F,KAAKiH,IAAI/D,KAAK4C,GAAI3B,EAAM2B,IAAKC,GAAI/F,KAAKuD,IAAIL,KAAK4C,GAAI3B,EAAM2B,MAClG,IAAIJ,EAAK,CAAEE,GAAI1C,KAAK0C,GAAIC,GAAI3C,KAAK2C,GAAIC,GAAI9F,KAAKiH,IAAI/D,KAAK6C,GAAI5B,EAAM4B,IAAKA,GAAI/F,KAAKuD,IAAIL,KAAK6C,GAAI5B,EAAM4B,OAClGmB,QAAO,SAAAC,GAAC,OAAKA,EAAEC,gBAEV,CACL,IAAI1B,EAAK,CAAEI,GAAI5C,KAAK4C,GAAIC,GAAI7C,KAAK6C,GAAIH,GAAI5F,KAAKiH,IAAI/D,KAAK0C,GAAIzB,EAAMyB,IAAKC,GAAI7F,KAAKuD,IAAIL,KAAK0C,GAAIzB,EAAMyB,MAClG,IAAIF,EAAK,CAAEI,GAAI5C,KAAK4C,GAAIC,GAAI7C,KAAK6C,GAAIH,GAAI5F,KAAKiH,IAAI/D,KAAK2C,GAAI1B,EAAM0B,IAAKA,GAAI7F,KAAKuD,IAAIL,KAAK2C,GAAI1B,EAAM0B,OAClGqB,QAAO,SAAAC,GAAC,OAAKA,EAAEC,mBAzMvB,8BA8MI,OAAO,IAAI1B,EAAK,CAAEE,GAAI1C,KAAK0C,GAAIC,GAAI3C,KAAK2C,GAAIC,GAAI5C,KAAK4C,GAAIC,GAAI7C,KAAK6C,OA9MtE,gCAiNY1C,GACR,OAAO,IAAIqC,EAAK,CACdE,GAAI1C,KAAK0C,GAAKvC,EAAErE,EAChB6G,GAAI3C,KAAK2C,GAAKxC,EAAErE,EAEhB8G,GAAI5C,KAAK4C,GAAKzC,EAAEpE,EAChB8G,GAAI7C,KAAK6C,GAAK1C,EAAEpE,MAvNtB,gCA2NYoF,EAAgBC,GACxB,OAAO,IAAIoB,EAAK,CACdW,MAAOnD,KAAKmD,MAAMgB,UAAUhD,EAAOC,GACnCgC,IAAKpD,KAAKoD,IAAIe,UAAUhD,EAAOC,OA9NrC,+BAmOI,MAAO,CACLsB,GAAS1C,KAAK0C,GACdC,GAAS3C,KAAK2C,GACdC,GAAS5C,KAAK4C,GACdC,GAAS7C,KAAK6C,GACduB,QAAS,UAxOf,iCA6OI,MAAM,WAAN,OAAmBpE,KAAK0C,GAAxB,YAAgC1C,KAAK4C,GAArC,iBAAkD5C,KAAK2C,GAAvD,YAA+D3C,KAAK6C,GAApE,QA7OJ,6BAgPS5B,GACL,OAAc,OAAVA,IAGFjB,KAAK0C,KAAOzB,EAAMyB,IAClB1C,KAAK2C,KAAO1B,EAAM0B,IAClB3C,KAAK4C,KAAO3B,EAAM2B,IAClB5C,KAAK6C,KAAO5B,EAAM4B,IAElB7C,KAAK0C,KAAOzB,EAAM0B,IAClB3C,KAAK2C,KAAO1B,EAAMyB,IAClB1C,KAAK4C,KAAO3B,EAAM4B,IAClB7C,KAAK6C,KAAO5B,EAAM2B,MA5PxB,iCAgQayB,GACT,OAAO,IAAI7B,EAAK,CACdE,GAAI1C,KAAK0C,GACTE,GAAI5C,KAAK4C,GACTD,GAAI0B,EAAOvI,EACX+G,GAAIwB,EAAOtI,MArQjB,mCAyQeuI,GACX,OAAO,IAAI9B,EAAK,CACdE,GAAI4B,EAASxI,EACb8G,GAAI0B,EAASvI,EACb4G,GAAI3C,KAAK2C,GACTE,GAAI7C,KAAK6C,OA9Qf,+BA6SW0B,GAAuC,IAAnBC,EAAkB,uDAAV,SACnCD,EAASE,UAAU,EAAGD,EAAO,GAE7BD,EAASG,OAAO1E,KAAK0C,GAAI1C,KAAK4C,IAC9B2B,EAASI,OAAO3E,KAAK2C,GAAI3C,KAAK6C,MAjTlC,uCAwTmB5B,GACf,IAAM2D,EAAK5E,KAAKmD,MACV0B,EAAK7E,KAAKoD,IACV0B,EAAK7D,EAAMkC,MACX4B,EAAK9D,EAAMmC,IAEX4B,IACHD,EAAGjJ,EAAIgJ,EAAGhJ,IACV8I,EAAG7I,EAAI+I,EAAG/I,IACVgJ,EAAGhJ,EAAI+I,EAAG/I,IACV6I,EAAG9I,EAAIgJ,EAAGhJ,MACViJ,EAAGhJ,EAAI+I,EAAG/I,IACV8I,EAAG/I,EAAI8I,EAAG9I,IACViJ,EAAGjJ,EAAIgJ,EAAGhJ,IACV+I,EAAG9I,EAAI6I,EAAG7I,IAGPD,EAAI8I,EAAG9I,EAAIkJ,GAAKH,EAAG/I,EAAI8I,EAAG9I,GAC1BC,EAAI6I,EAAG7I,EAAIiJ,GAAKH,EAAG9I,EAAI6I,EAAG7I,GAEhC,OAAO,IAAI6D,EAAQ,CAAE9D,IAAGC,QA5U5B,0CAkVsBkF,GAClB,IAAMgE,EAAmBjF,KAAKiF,iBAAiBhE,GAEzCnF,EAAImJ,EAAiBnJ,EACrBC,EAAIkJ,EAAiBlJ,EAE3B,OAIIF,EAAeC,EAAGgB,KAAKiH,IAAI/D,KAAK0C,GAAI1C,KAAK2C,MACzC3G,EAAeF,EAAGgB,KAAKuD,IAAIL,KAAK0C,GAAI1C,KAAK2C,MACzC9G,EAAeE,EAAGe,KAAKiH,IAAI/D,KAAK4C,GAAI5C,KAAK6C,MACzC7G,EAAeD,EAAGe,KAAKuD,IAAIL,KAAK4C,GAAI5C,KAAK6C,MAIzChH,EAAeC,EAAGgB,KAAKiH,IAAI9C,EAAMyB,GAAIzB,EAAM0B,MAC3C3G,EAAeF,EAAGgB,KAAKuD,IAAIY,EAAMyB,GAAIzB,EAAM0B,MAC3C9G,EAAeE,EAAGe,KAAKiH,IAAI9C,EAAM2B,GAAI3B,EAAM4B,MAC3C7G,EAAeD,EAAGe,KAAKuD,IAAIY,EAAM2B,GAAI3B,EAAM4B,KAGtCoC,EAGF,OA5WX,kCAgXI,IAAMC,EAAMpI,KAAK0D,KACf,SAACR,KAAK0C,GAAK1C,KAAK2C,GAAO,GAAvB,SACC3C,KAAK4C,GAAK5C,KAAK6C,GAAO,IAGzB,OAAO,IAAIL,EAAK,CACdW,MAAOnD,KAAKmD,MACZC,IAAK,IAAIxD,EAAQ,CACf9D,EAAGkE,KAAKmD,MAAMrH,GAAKkE,KAAKoD,IAAItH,EAAIkE,KAAKmD,MAAMrH,GAAKoJ,EAChDnJ,EAAGiE,KAAKmD,MAAMrH,GAAKkE,KAAKoD,IAAIrH,EAAIiE,KAAKmD,MAAMpH,GAAKmJ,QAzXxD,6BA+XI,OAAOlF,KAAKC,aA/XhB,0BAkYMnE,GACF,OAAO,IAAI0G,EAAK,CACdW,MAAOnD,KAAKmD,MAAM1B,IAAI3F,GACtBsH,IAAKpD,KAAKoD,IAAI3B,IAAI3F,OArYxB,6BA8DI,OAAOgB,KAAK0D,MACTR,KAAK2C,GAAK3C,KAAK0C,KAAO1C,KAAK2C,GAAK3C,KAAK0C,KACrC1C,KAAK6C,GAAK7C,KAAK4C,KAAO5C,KAAK6C,GAAK7C,KAAK4C,OAhE5C,mCAqEI,OAAuB,IAAhB5C,KAAKR,UArEhB,uCAmGyBwF,GAAkB,IAAD,EACXA,EAAEG,MAAM,KAAKC,KAAI,SAAAtJ,GAAC,OAAIuJ,OAAOvJ,MADlB,mBAGtC,OAAO,IAAI0G,EAAK,CAAEE,GAHoB,KAGhBC,GAHgB,KAGZC,GAHY,KAGRC,GAHQ,SAnG1C,kCAkRqBxD,GAUjB,OARGA,EAAI6C,eAAe,OACnB7C,EAAI6C,eAAe,OACnB7C,EAAI6C,eAAe,OACnB7C,EAAI6C,eAAe,OAEpBX,QAAQC,MAAM,6BAGT,IAAIgB,EAAK,CACdE,GAAIrD,EAAIqD,GACRE,GAAIvD,EAAIuD,GACRD,GAAItD,EAAIsD,GACRE,GAAIxD,EAAIwD,OAhSd,gCAoSmBxD,GACf,OAAO8C,KAAKC,UAAU,CACpBM,GAAIrD,EAAIqD,GACRE,GAAIvD,EAAIuD,GACRD,GAAItD,EAAIsD,GACRE,GAAIxD,EAAIwD,SAzSd,KEEayC,EAAb,WAkOE,WAAY7C,GAAiE,yBAjOrE3C,QAiOoE,OAhOpEC,QAgOoE,OA/NpEwF,YA+NoE,OA9NpEC,aA8NoE,EAC1ExF,KAAKF,GAAK2C,EAAM3G,EAChBkE,KAAKD,GAAK0C,EAAM1G,EAChBiE,KAAKuF,OAAS9C,EAAMgD,MACpBzF,KAAKwF,QAAU/C,EAAMiD,OAtOzB,sDAuFmBjJ,GACf,OAAO,IAAI6I,EAAK,CACdxJ,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,EACR0J,MAAOhJ,EAAQuD,KAAKlE,EACpB4J,OAAQ1F,KAAK0F,WA5FnB,gCAgGmBjJ,GACf,OAAO,IAAI6I,EAAK,CACdxJ,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,EACR0J,MAAOhJ,EACPiJ,OAAQ1F,KAAK0F,WArGnB,iCAyGoBjJ,GAChB,OAAO,IAAI6I,EAAK,CACdxJ,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,EACR0J,MAAOzF,KAAKyF,MACZC,OAAQjJ,MA9Gd,iCAkHoBA,GAChB,OAAO,IAAI6I,EAAK,CACdxJ,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,EACR0J,MAAOzF,KAAKyF,MACZC,OAAQjJ,EAAQuD,KAAKjE,MAvH3B,4BA2HeU,GACX,OAAO,IAAI6I,EAAK,CACdxJ,EAAGW,EACHV,EAAGiE,KAAKjE,EACR0J,MAAOzF,KAAKyF,MACZC,OAAQ1F,KAAK0F,WAhInB,4BAoIejJ,GACX,OAAO,IAAI6I,EAAK,CACdxJ,EAAGkE,KAAKlE,EACRC,EAAGU,EACHgJ,MAAOzF,KAAKyF,MACZC,OAAQ1F,KAAK0F,WAzInB,8BA6IiBjJ,GACb,OAAOuD,KAAK2F,MAAMlJ,KA9ItB,+BAiJkBA,GACd,OAAOuD,KAAK4F,MAAMnJ,KAlJtB,kCAwJqBoJ,GACjB,OAAOP,EAAKQ,WAAWD,EAAS7F,KAAK+F,eAzJzC,mCA+JsBC,GAClB,OAAOV,EAAKQ,WAAWE,EAAUhG,KAAKiG,cAhK1C,sCAsKyBF,GACrB,OAAOT,EAAKQ,WAAWC,EAAa/F,KAAK6F,WAvK7C,qCA6KwBI,GACpB,OAAOX,EAAKQ,WAAWG,EAAYjG,KAAKgG,YA9K5C,iCAiLoBE,GAChB,OAAO,IAAIZ,EAAK,CACdxJ,EAAGoK,EAAOpK,EAAIkE,KAAKyF,MAAQ,EAC3B1J,EAAGmK,EAAOnK,EAAIiE,KAAK0F,OAAS,EAC5BD,MAAOzF,KAAKyF,MACZC,OAAQ1F,KAAK0F,WAtLnB,gCA6LmBjD,GACf,OAAO,IAAI6C,EAAK,CACdxJ,EAAGkE,KAAKmG,SAAW1D,EAAMgD,OAASzF,KAAKyF,OAAS,EAChD1J,EAAGiE,KAAKoG,SAAW3D,EAAMiD,QAAU1F,KAAK0F,QAAU,EAClDD,MAAOhD,EAAMgD,OAASzF,KAAKyF,MAC3BC,OAAQjD,EAAMiD,QAAU1F,KAAK0F,WAlMnC,wBAOI,OAAO1F,KAAKF,KAPhB,wBAWI,OAAOE,KAAKD,KAXhB,4BAeI,OAAOC,KAAKuF,SAfhB,6BAmBI,OAAOvF,KAAKwF,UAnBhB,8BAuBI,OAAOxF,KAAKF,GAAKE,KAAKuF,OAAS,IAvBnC,8BA2BI,OAAOvF,KAAKD,GAAKC,KAAKwF,QAAU,IA3BpC,4BA+BI,OAAOxF,KAAKF,GAAKE,KAAKuF,SA/B1B,6BAmCI,OAAOvF,KAAKD,GAAKC,KAAKwF,UAnC1B,0BAuCI,OAAOxF,KAAKD,KAvChB,2BA2CI,OAAOC,KAAKF,KA3ChB,6BA+CI,OAAO,IAAIF,EAAQ,CACjB9D,EAAGkE,KAAKlE,EAAIkE,KAAKyF,MAAQ,EACzB1J,EAAGiE,KAAKjE,EAAIiE,KAAK0F,OAAS,MAjDhC,iCAsDI,OAAO,IAAI9F,EAAQ,CAAE9D,EAAGkE,KAAKyF,MAAO1J,EAAGiE,KAAK0F,WAtDhD,8BAuMI,OAAO,IAAI9F,EAAQ,CACjB9D,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,MAzMd,+BA8MI,OAAO,IAAI6D,EAAQ,CACjB9D,EAAGkE,KAAKqG,MACRtK,EAAGiE,KAAKjE,MAhNd,kCAqNI,OAAO,IAAI6D,EAAQ,CACjB9D,EAAGkE,KAAKqG,MACRtK,EAAGiE,KAAKsG,WAvNd,iCA4NI,OAAO,IAAI1G,EAAQ,CACjB9D,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKsG,YA9Nd,iCAyD0BC,EAAiBC,GACvC,OAAO,IAAIlB,EAAK,CACdxJ,EAAGyK,EAAMzK,EACTC,EAAGwK,EAAMxK,EACT0J,MAAOe,EACPd,OAAQc,MA9Dd,iCAkE2B5B,EAAcC,GACrC,OAAO,IAAIS,EAAK,CACdxJ,EAAGgB,KAAKiH,IAAIa,EAAG9I,EAAG+I,EAAG/I,GACrBC,EAAGe,KAAKiH,IAAIa,EAAG7I,EAAG8I,EAAG9I,GACrB0J,MAAO3I,KAAKsD,IAAIwE,EAAG9I,EAAI+I,EAAG/I,GAC1B4J,OAAQ5I,KAAKsD,IAAIwE,EAAG7I,EAAI8I,EAAG9I,OAvEjC,iCA2E2B0G,GAIvB,OAAO,IAAI6C,EAAK,CACdxJ,EAAG2G,EAAMyD,OAAOpK,EAAI2G,EAAMgE,WAAW3K,EAAI,EACzCC,EAAG0G,EAAMyD,OAAOnK,EAAI0G,EAAMgE,WAAW1K,EAAI,EACzC0J,MAAOhD,EAAMgE,WAAW3K,EACxB4J,OAAQjD,EAAMgE,WAAW1K,QAnF/B,wDAmPI,MAAO,CACL,IAAIyG,EAAK,CAAEE,GAAI1C,KAAKlE,EAAG8G,GAAI5C,KAAKjE,EAAG4G,GAAI3C,KAAKlE,EAAIkE,KAAKyF,MAAO5C,GAAI7C,KAAKjE,IACrE,IAAIyG,EAAK,CACPE,GAAI1C,KAAKlE,EACT8G,GAAI5C,KAAKjE,EACT4G,GAAI3C,KAAKlE,EACT+G,GAAI7C,KAAKjE,EAAIiE,KAAK0F,SAEpB,IAAIlD,EAAK,CACPE,GAAI1C,KAAKlE,EAAIkE,KAAKyF,MAClB7C,GAAI5C,KAAKjE,EAAIiE,KAAK0F,OAClB/C,GAAI3C,KAAKlE,EAAIkE,KAAKyF,MAClB5C,GAAI7C,KAAKjE,IAEX,IAAIyG,EAAK,CACPE,GAAI1C,KAAKlE,EAAIkE,KAAKyF,MAClB7C,GAAI5C,KAAKjE,EAAIiE,KAAK0F,OAClB/C,GAAI3C,KAAKlE,EACT+G,GAAI7C,KAAKjE,EAAIiE,KAAK0F,YArQ1B,mCA8QI,MAAO,CACL,IAAI9F,EAAQ,CAAE9D,EAAGkE,KAAKlE,EAAGC,EAAGiE,KAAKjE,IACjC,IAAI6D,EAAQ,CAAE9D,EAAGkE,KAAKlE,EAAIkE,KAAKyF,MAAO1J,EAAGiE,KAAKjE,IAC9C,IAAI6D,EAAQ,CAAE9D,EAAGkE,KAAKlE,EAAGC,EAAGiE,KAAKjE,EAAIiE,KAAK0F,SAC1C,IAAI9F,EAAQ,CAAE9D,EAAGkE,KAAKlE,EAAIkE,KAAKyF,MAAO1J,EAAGiE,KAAKjE,EAAIiE,KAAK0F,YAlR7D,kCAuRI,MAAM,GAAN,OAAU1F,KAAKlE,EAAf,YAAoBkE,KAAKjE,EAAzB,YAA8BiE,KAAKyF,MAAnC,YAA4CzF,KAAK0F,UAvRrD,iCA4RIzE,GAIU,IAHVwB,EAGS,uDAHuC,CAC9CiE,2BAA2B,GAGvBC,EAAe3G,KAAK4G,gBAAgB3F,GAAO,GAEjD,OAAIwB,EAAMiE,4BAEJC,IAAiBA,EAAalB,MAAQ,GAAKkB,EAAajB,OAAS,KAG5DiB,GAAgBA,EAAalB,MAAQkB,EAAajB,OAAS,IAxS1E,yCA4SqBmB,GACjB,OACE7G,KAAKlE,GAAK+K,EAAQ/K,GAClBkE,KAAKlE,EAAIkE,KAAKyF,OAASoB,EAAQ/K,EAAI+K,EAAQpB,OAC3CzF,KAAKjE,GAAK8K,EAAQ9K,GAClBiE,KAAKjE,EAAIiE,KAAK0F,QAAUmB,EAAQ9K,EAAI8K,EAAQnB,SAjTlD,sCAsTIzE,GAEmB,IADnByF,EACkB,wDACZI,EAAOhK,KAAKuD,IAAIL,KAAKlE,EAAGmF,EAAMnF,GAC9BiL,EAAQ/G,KAAKlE,EAAIkE,KAAKyF,MACtBuB,EAAQ/F,EAAMnF,EAAImF,EAAMwE,MACxBwB,EAAOnK,KAAKiH,IAAIgD,EAAOC,GAE7B,GAAIC,EAAOH,GAASJ,GAA6BO,GAAQH,EAAO,CAC9D,IAAMI,EAAOpK,KAAKuD,IAAIL,KAAKjE,EAAGkF,EAAMlF,GAC9BoL,EAAQnH,KAAKjE,EAAIiE,KAAK0F,OACtB0B,EAAQnG,EAAMlF,EAAIkF,EAAMyE,OACxB2B,EAAOvK,KAAKiH,IAAIoD,EAAOC,GAE7B,GAAIC,GAAQH,GAASR,GAA6BW,GAAQH,EACxD,OAAO,IAAI5B,EAAK,CACdxJ,EAAGgL,EACH/K,EAAGmL,EACHzB,MAAOwB,EAAOH,EACdpB,OAAQ2B,EAAOH,OAzUzB,+BAiVW/G,GACP,OACEA,EAAErE,GAAKkE,KAAKlE,GACZqE,EAAErE,EAAIkE,KAAKlE,EAAIkE,KAAKyF,OACpBtF,EAAEpE,GAAKiE,KAAKjE,GACZoE,EAAEpE,EAAIiE,KAAKjE,EAAIiE,KAAK0F,SAtV1B,8BA2VI,OAAO,IAAIJ,EAAK,CACdxJ,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,EACR0J,MAAOzF,KAAKyF,MACZC,OAAQ1F,KAAK0F,WA/VnB,0BAmWMvF,GACF,OAAOH,KAAKsH,UAAUnH,KApW1B,+BAuWWA,GACP,OAAOH,KAAKsH,UAAU,CAAExL,GAAIqE,EAAErE,EAAGC,GAAIoE,EAAEpE,MAxW3C,gCA2WYoE,GACR,OAAO,IAAImF,EAAK,CACdxJ,EAAGkE,KAAKlE,EAAIqE,EAAErE,EACdC,EAAGiE,KAAKjE,EAAIoE,EAAEpE,EACd0J,MAAOzF,KAAKyF,MACZC,OAAQ1F,KAAK0F,WAhXnB,4BAoXQvF,GACJ,OAAO,IAAImF,EAAK,CACdxJ,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,EACR0J,MAAOzF,KAAKyF,MAAQtF,EAAErE,EACtB4J,OAAQ1F,KAAK0F,OAASvF,EAAEpE,MAzX9B,yCA8XI,OAAO,IAAIuJ,EAAK,CACdxJ,GAAIkE,KAAKyF,MAAQ,EACjB1J,GAAIiE,KAAK0F,OAAS,EAClBD,MAAOzF,KAAKyF,MACZC,OAAQ1F,KAAK0F,WAlYnB,6BAsYS6B,GACL,QAAKA,IAKHvH,KAAKlE,IAAMyL,EAAEzL,GACbkE,KAAKjE,IAAMwL,EAAExL,GACbiE,KAAKyF,QAAU8B,EAAE9B,OACjBzF,KAAK0F,SAAW6B,EAAE7B,UA/YxB,+BAoZI,MAAO,CACL5J,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,EACRyL,EAAGxH,KAAKyF,MACRgC,EAAGzH,KAAK0F,OACRtB,QAAS,UAzZf,6BA8ZI,OAAOpE,KAAKC,aA9ZhB,6BAoaSU,GACL,OAAO,IAAI2E,EAAK,CACdxJ,EAAGkE,KAAKlE,EACRC,EAAGiE,KAAKjE,EACR0J,MAAOzF,KAAKyF,MAAQ9E,EACpB+E,OAAQ1F,KAAK0F,OAAS/E,MAza5B,6BA6aSA,GACL,OAAO,IAAI2E,EAAK,CACdxJ,EAAGkE,KAAKlE,EAAI6E,EACZ5E,EAAGiE,KAAKjE,EAAI4E,EACZ8E,MAAO3I,KAAKuD,IAAIL,KAAKyF,MAAiB,EAAT9E,EAAY,GACzC+E,OAAQ5I,KAAKuD,IAAIL,KAAK0F,OAAkB,EAAT/E,EAAY,OAlbjD,8BAubI,OAAO,IAAI2E,EAAK,CACdxJ,EAAGgB,KAAKC,MAAMiD,KAAKlE,GACnBC,EAAGe,KAAKC,MAAMiD,KAAKjE,GACnB0J,MAAO3I,KAAKC,MAAMiD,KAAKyF,OACvBC,OAAQ5I,KAAKC,MAAMiD,KAAK0F,YA3b9B,6BAkcS/E,GACL,OAAOX,KAAK0H,QAAQ/G,KAncxB,gCAscYQ,EAAgBC,GACxB,IAAMyE,EAAU7F,KAAK6F,QAAQ1B,UAAUhD,EAAOC,GACxCuG,EAAW3H,KAAK+F,YAAY5B,UAAUhD,EAAOC,GAEnD,OAAO,IAAIkE,EAAK,CACdxJ,EAAG+J,EAAQ/J,EACXC,EAAG8J,EAAQ9J,EACX0J,MAAOkC,EAAS7L,EAAI+J,EAAQ/J,EAC5B4J,OAAQiC,EAAS5L,EAAI8J,EAAQ9J,MA9cnC,iCA8eI,MAAM,IAAN,OAAWiE,KAAKlE,EAAhB,aAAsBkE,KAAKjE,EAA3B,QA9eJ,uCAyOyBiJ,GAAkB,IAAD,EACjBA,EAAEG,MAAM,KAAKC,KAAI,SAACtJ,GAAD,OAAOuJ,OAAOvJ,MADd,mBAGtC,OAAO,IAAIwJ,EAAK,CAAExJ,EAHoB,KAGjBC,EAHiB,KAGd0J,MAHc,KAGJC,OAHI,SAzO1C,kCAkdqBrG,GAUjB,OARGA,EAAI6C,eAAe,MACnB7C,EAAI6C,eAAe,MACnB7C,EAAI6C,eAAe,MACnB7C,EAAI6C,eAAe,MAEpBX,QAAQC,MAAM,6BAGT,IAAI8D,EAAK,CACdxJ,EAAGuD,EAAIvD,EACPC,EAAGsD,EAAItD,EACP0J,MAAOpG,EAAImI,EACX9B,OAAQrG,EAAIoI,MAhelB,gCAoemBG,GACf,OAAOzF,KAAKC,UAAU,CACpBtG,EAAG8L,EAAE9L,EACLC,EAAG6L,EAAE7L,EACLyL,EAAGI,EAAEnC,MACLgC,EAAGG,EAAElC,aAzeX,KCNamC,EAAb,WAIE,WAAYC,EAAUC,GAAY,yBAH1BC,YAGyB,OAFzBC,aAEyB,EAC/BjI,KAAKgI,OAAUF,EACf9H,KAAKiI,QAAUF,EANnB,mDAUI,MAAM,GAAN,OAAW/H,KAAKgI,OAAOE,OAAvB,YAAmClI,KAAKiI,QAAQC,UAVpD,4BAcI,OAAOlI,KAAKgI,SAdhB,6BAkBI,OAAOhI,KAAKiI,YAlBhB,KC8BaE,EAAb,WA0BE,WACEC,EACAC,EACAC,GACC,yBA7BKA,OAA4B,CAClCC,0BAA2B,GAC3BC,aAAc,IACdC,aAAc,IACdC,iBAAkB,IAClBC,iBAAkB,IAClBC,WAAY,EACZC,cAAe,OACfC,eAAgB,SAChBC,iBAAkB,EAClBC,gBAAiB,SACjBC,eAAgB,SAChBC,cAAe,SACfC,gBAAiB,EACjBC,yBAA0B,IAC1BC,yBAA0B,EAC1BC,mBAAoB,IACpBC,mBAAoB,GACpBC,mBAAoB,GACpBC,oBAAoB,EACpBC,eAAe,GASf,KAPMrB,mBAON,OANMD,WAMN,EACApI,KAAKoI,MAAQA,EACbpI,KAAKqI,cAAgBA,EACrBrI,KAAKsI,OAAS5K,OAAOiM,OAAO,GAAI3J,KAAKsI,OAAQA,GAAU,IAjC3D,wDAwCI,IAAMsB,EAAY5J,KAAKsI,OAAOmB,mBACxBI,EACJ7J,KAAKqI,cAAc3C,OAAS1F,KAAKsI,OAAOC,0BACpCuB,EAAU9J,KAAKqI,cAAc0B,UAAU,CAC3CrE,OAAQmE,EACRpE,MAAOoE,EAAY7J,KAAKsI,OAAOE,eAEjCxI,KAAKgK,SAASF,EAASF,EAAW5J,KAAKsI,OAAOgB,oBAAsB,GAEpE,IAAMW,EAASjK,KAAKkK,aAClBJ,EACA9J,KAAKsI,OAAOI,iBACZ1I,KAAKsI,OAAO6B,cAAgBnK,KAAKsI,OAAOE,aACxCxI,KAAKsI,OAAOc,0BAEdpJ,KAAKgK,SACHC,EAAOnC,MACP8B,EACA5J,KAAKsI,OAAOiB,oBAAsBvJ,KAAKsI,OAAOgB,oBAAsB,GAEtEtJ,KAAKgK,SACHC,EAAOlC,OACP6B,EACA5J,KAAKsI,OAAOiB,oBAAsBvJ,KAAKsI,OAAOgB,oBAAsB,GAGtE,IAAMc,EAAS,IAAIvC,EACjB7H,KAAKkK,aACHD,EAAOnC,MACP9H,KAAKsI,OAAOK,kBAAoB3I,KAAKsI,OAAOI,iBAC5C1I,KAAKsI,OAAOG,cACVzI,KAAKsI,OAAO6B,cACZnK,KAAKsI,OAAOE,aACdxI,KAAKsI,OAAOe,0BACVrJ,KAAKsI,OAAOc,0BAEhBpJ,KAAKkK,aACHD,EAAOlC,OACP/H,KAAKsI,OAAOK,kBAAoB3I,KAAKsI,OAAOI,iBAC5C1I,KAAKsI,OAAOG,cACVzI,KAAKsI,OAAO6B,cACZnK,KAAKsI,OAAOE,aACdxI,KAAKsI,OAAOe,0BACVrJ,KAAKsI,OAAOc,2BAGlBpJ,KAAKgK,SACHI,EAAOtC,MAAMA,MACb8B,EACA5J,KAAKsI,OAAOkB,oBACVxJ,KAAKsI,OAAOiB,oBACZvJ,KAAKsI,OAAOgB,oBACZ,GAEJtJ,KAAKgK,SACHI,EAAOrC,OAAOD,MACd8B,EACA5J,KAAKsI,OAAOkB,oBACVxJ,KAAKsI,OAAOiB,oBACZvJ,KAAKsI,OAAOgB,oBACZ,GAEJtJ,KAAKgK,SACHI,EAAOtC,MAAMC,OACb6B,EACA5J,KAAKsI,OAAOkB,oBACVxJ,KAAKsI,OAAOiB,oBACZvJ,KAAKsI,OAAOgB,oBACZ,GAEJtJ,KAAKgK,SACHI,EAAOrC,OAAOA,OACd6B,EACA5J,KAAKsI,OAAOkB,oBACVxJ,KAAKsI,OAAOiB,oBACZvJ,KAAKsI,OAAOgB,oBACZ,KApHR,mCAyHIe,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAW3N,KAAKiH,IAAIsG,EAAS3E,OAAQ2E,EAAS5E,OAAS6E,EACvDI,EAAYD,EAAWF,EAIvBI,GAHY7N,KAAKuD,IAAIgK,EAAS3E,OAAQ2E,EAAS5E,OAAS,EAAIiF,IAElD,EAAIF,GAA4BA,EACrB,EAAIE,EAAY,EAE3C,GAAIL,EAAS3E,OAAS2E,EAAS5E,MAAO,CACpC,IAAMoE,EAAYY,EACZG,EAAWF,EAEXG,EAAa,IAAIjL,EACrByK,EAASlE,QAAUwE,EACnBN,EAASjE,SAEL0E,EAAc,IAAIlL,EACtByK,EAASlE,QAAUwE,EACnBN,EAASjE,SAEX,OAAO,IAAIyB,EACTvC,EAAKyF,WAAW,CACd7E,OAAQ2E,EACRpE,WAAY,IAAI7G,EAAQgL,EAAUf,KAEpCvE,EAAKyF,WAAW,CACd7E,OAAQ4E,EACRrE,WAAY,IAAI7G,EAAQgL,EAAUf,MAItC,IAAMA,EAAYa,EACZE,EAAWH,EAEXO,EAAY,IAAIpL,EACpByK,EAASlE,QACTkE,EAASjE,QAAUuE,GAEfM,EAAe,IAAIrL,EACvByK,EAASlE,QACTkE,EAASjE,QAAUuE,GAErB,OAAO,IAAI9C,EACTvC,EAAKyF,WAAW,CACd7E,OAAQ8E,EACRvE,WAAY,IAAI7G,EAAQgL,EAAUf,KAEpCvE,EAAKyF,WAAW,CACd7E,OAAQ+E,EACRxE,WAAY,IAAI7G,EAAQgL,EAAUf,QA9K5C,+BAqLIqB,EACAtB,EACAuB,GACC,IAAD,OACMC,EAAUF,EAAKnB,UAAU,CAC7BtE,MACEyF,EAAKzF,MAAQ0F,GAA0B,EAAID,EAAKzF,MAAQyF,EAAKxF,QAAQ,EACvEA,OACEwF,EAAKxF,OACLyF,GAA0BD,EAAKzF,MAAQ,EAAIyF,EAAKxF,QAAQ,IAEtD2F,EAAY,CAChBC,KAAM,IAAI1L,EAAQsL,EAAKI,KAAMJ,EAAK9E,SAClCC,MAAO,IAAIzG,EAAQsL,EAAK7E,MAAO6E,EAAK9E,SACpCmF,IAAK,IAAI3L,EAAQsL,EAAK/E,QAAS+E,EAAKK,KACpCjF,OAAQ,IAAI1G,EAAQsL,EAAK/E,QAAS+E,EAAK5E,SAGzC,GAAIsD,EAAW,CACb,IAAMrF,EAAW,IAAIiH,IACrBjH,EAASE,UAAUzE,KAAKsI,OAAOa,gBAAiBnJ,KAAKsI,OAAOW,eAAgB,GAC5E1E,EAASyF,SAASkB,EAAKpP,EAAGoP,EAAKnP,EAAGmP,EAAKzF,MAAOyF,EAAKxF,QACnD1F,KAAKoI,MAAMqD,SAASlH,GAEtBvE,KAAK0L,SAASN,EAAQvF,QAASwF,EAAUC,MACzCtL,KAAK0L,SAASN,EAAQvF,QAASwF,EAAUE,KACzCvL,KAAK0L,SAASN,EAAQpF,SAAUqF,EAAUhF,OAC1CrG,KAAK0L,SAASN,EAAQpF,SAAUqF,EAAUE,KAC1CvL,KAAK0L,SAASN,EAAQnF,WAAYoF,EAAUC,MAC5CtL,KAAK0L,SAASN,EAAQnF,WAAYoF,EAAU/E,QAC5CtG,KAAK0L,SAASN,EAAQrF,YAAasF,EAAUhF,OAC7CrG,KAAK0L,SAASN,EAAQrF,YAAasF,EAAU/E,QAE7CtG,KAAK2L,YAAYP,GACjB1N,OAAOkO,OAAOP,GAAWjG,KAAI,SAACjF,GAAD,OAAO,EAAK0L,aAAa1L,QAvN1D,kCA0NsB+K,GAClBlL,KAAK6L,aAAaX,EAAKrF,SACvB7F,KAAK6L,aAAaX,EAAKlF,UACvBhG,KAAK6L,aAAaX,EAAKjF,YACvBjG,KAAK6L,aAAaX,EAAKnF,eA9N3B,+BAiOkBnB,EAAcC,GAC5B,IAAMN,EAAW,IAAIiH,IAEjBxL,KAAKsI,OAAOoB,eAAiB5M,KAAKE,SAAW,GAC/CuH,EAASE,UAAUzE,KAAKsI,OAAOa,gBAAiBnJ,KAAKsI,OAAOY,cAAe,GAE3E3E,EAASE,UAAUzE,KAAKsI,OAAOa,gBAAiBnJ,KAAKsI,OAAOW,eAAgB,GAE9E1E,EAASG,OAAOE,EAAG9I,EAAG8I,EAAG7I,GACzBwI,EAASI,OAAOE,EAAG/I,EAAG+I,EAAG9I,GACzBiE,KAAKoI,MAAMqD,SAASlH,KA3OxB,mCA8OsBgC,GAClB,IAAMhC,EAAW,IAAIiH,IAWrB,OATIxL,KAAKsI,OAAOoB,eAAiB5M,KAAKE,SAAW,GAC/CuH,EAASE,UAAU,EAAGzE,KAAKsI,OAAOO,cAAe,GAEjDtE,EAASE,UAAU,EAAGzE,KAAKsI,OAAOQ,eAAgB,GAEpDvE,EAASuH,UAAU9L,KAAKsI,OAAOU,gBAAiB,GAChDzE,EAASwH,WAAWxF,EAAMzK,EAAGyK,EAAMxK,EAAGiE,KAAKsI,OAAOM,YAClDrE,EAASyH,UACThM,KAAKoI,MAAMqD,SAASlH,GACbgC,MA1PX,KCpBM0F,EAAwB,CAC5BC,YAAa,IACbC,aAAc,KAKHC,EAAb,WAUE,WAAY9D,EAAiB+D,GAAyB,yBAT/CA,SAS8C,OAP9C/D,YAO8C,OAL9CgE,iBAK8C,EACnDtM,KAAKsI,OAAS5K,OAAOiM,OAAO,GAAIsC,EAAe3D,GAE/CtI,KAAKqM,IAAMA,GAAO,IAAIb,IAAiB,CACrC/F,MAAOzF,KAAKsI,OAAO4D,YACnBxG,OAAQ1F,KAAKsI,OAAO6D,aACpBI,WAAW,EACXC,gBAAiB,WAGnBxM,KAAKsM,YAAc,IAAInE,EACrBnI,KAAKqM,IAAIjE,MACT,IAAI9C,EAAK,CACPxJ,EAAG,EACHC,EAAG,EACH0J,MAAOzF,KAAKsI,OAAO4D,YACnBxG,OAAQ1F,KAAKsI,OAAO6D,gBA1B5B,qDAkCkBM,GACdA,EAAKC,YAAY1M,KAAKqM,IAAIM,QAnC9B,sEAsDsBC,MAtDtB,kCAyDI5M,KAAKsM,YAAYO,cAzDrB,mCA6DI7M,KAAKsM,YAAYT,aACf,IAAIjM,EACF9C,KAAKE,SAAWgD,KAAKsI,OAAO4D,YAC5BpP,KAAKE,SAAWgD,KAAKsI,OAAO6D,mBAhEpC,K,iCJLY5J,O,+BAAAA,I,gCAAAA,M,KAUL,IAAMuK,EAAb,4MACEC,YADF,cAAqCC,KAYxBC,EAAb,WAsBE,WAAYxK,GAKR,IAAD,IAQD,GARC,yBAvBIyK,UAuBJ,OArBIC,YAAsB,CAAC,UAqB3B,KAnBIC,GHvCAnR,IG0DJ,KAjBIoR,SAAWzN,EAAQyC,KAiBvB,KAZIiL,YAYJ,OAVIC,QAAmB,CAAEC,KAAK,EAAOC,WAAY,GAAIC,aAAc,IAUnE,KAROC,iBAQP,OAPOC,mBAOP,OAwJKC,cAAiD,GAxJtD,KAyJKC,mBAAoB,EAxJ1B9N,KAAKsN,OAAS,IAAIR,EAAgBrK,EAAMsL,SACxC/N,KAAKkN,KAAOzK,EAAMyK,KAClBlN,KAAKsN,OAAOP,OAAS/M,KAErBA,KAAK2N,YAAL,UAAmBlL,EAAMuL,kBAAzB,SACAhO,KAAK4N,cAAL,UAAqBnL,EAAMwL,oBAA3B,SAEIxL,EAAMwL,cAAgBxL,EAAMuL,WAC9B,MAAM,IAAIE,MAAM,6CAGlBlO,KAAKmO,gBAELnO,KAAKsN,OAAOc,kBAAmB,EAC/BpO,KAAKsN,OAAOe,OAAOC,IAAI,GA1C3B,qDA6CWC,GAAkE,IAAnDzS,EAAkD,uDAA/B,KAAMC,EAAyB,uDAAN,KAClEiE,KAAKsN,OAAO7B,SAAS8C,EAAMjB,QAEjB,OAANxR,IAAYyS,EAAMzS,EAAIA,GAChB,OAANC,IAAYwS,EAAMxS,EAAIA,KAjD9B,kCAoDcwS,GACVvO,KAAKsN,OAAOkB,YAAYD,EAAMjB,UArDlC,sCAiEImB,EAAcC,MAAMC,SAASC,IAAI5O,QAjErC,qCAqEIyO,EAAcC,MAAMC,SAASE,OAAO7O,QArExC,mCAwEe0O,GACX,OAAO1O,KAAKmN,YAAY2B,SAASJ,EAAMK,QAzE3C,6BA4ESL,MA5ET,kCA8EcA,MA9Ed,qCAgFiBM,GACbhP,KAAK2N,YAAcqB,IAjFvB,iCAoFaC,GACTjP,KAAKsN,OAAOS,QAAUkB,IArF1B,wCA6FI,OAAO,IAAI3J,EAAK,CACdxJ,EAAG,EACHC,EAAG,EACH0J,MAAOzF,KAAKyF,MACZC,OAAQ1F,KAAK0F,WAjGnB,yCAyGsC,IAAD,IACjC,OAAI1F,KAAKkP,QACPlP,KAAKkP,OAAOhC,OAASiC,GACrBnP,KAAKkP,OAAOhC,OAASkC,GACrBpP,KAAKkP,OAAOhC,OAASmC,EAKhBrP,KAAKsP,SAAS7N,IAAd,oBAAkBzB,KAAKkP,cAAvB,aAAkB,EAAaK,0BAA/B,QAAqD,IAAI3P,GAHvDI,KAAKsP,WA/GlB,iCA6HI,IADmB,EACbE,EAAWxP,KAAKsN,OAAOkC,SACvBnR,EAAmB,GAFN,cAICmR,GAJD,IAInB,2BAA8B,CAAC,IAApBjB,EAAmB,QACxBA,aAAiBzB,GACnBzO,EAAOoR,KAAKlB,EAAMxB,SANH,8BAUnB,OAAO1O,IAtIX,8BAyIUqQ,GACNA,EAAMgB,cAAcD,KAAKzP,QA1I7B,6BA8II,MAAM,WAAN,OAAkBA,KAAKoN,GAAvB,OA9IJ,sCAkJI,OAAOpN,KAAK2N,cAlJhB,uCAsJI,OAAO3N,KAAK4N,gBAtJhB,mCA0JI,IAAM+B,EAAS3P,KAAK4P,kBAEpB,GAAID,aAAkBrK,EACpB,OAAO,IAAI1F,EAAQ+P,EAAO7T,EAAG6T,EAAO5T,GAEpC,MAAM,IAAImS,MAAM,4CA/JtB,iCAsLaQ,GACT,GAAI1O,KAAK6P,aAAanB,GAAQ,CAAC,IAAD,gBACX1O,KAAK6N,eADM,IAC5B,2BAAqC,EACnCiC,EADmC,SAChCpB,IAFuB,8BAKvB1O,KAAK8N,oBACR9N,KAAK8N,mBAAoB,EACzB9N,KAAK+P,YAAYrB,IAEnB1O,KAAKgQ,OAAOtB,GAGd1O,KAAK6N,cAAgB,KAnMzB,iCAsMaoC,GAAwC,IAAD,OAChDjQ,KAAKsN,OAAO4C,aAAc,EAE1BlQ,KAAKsN,OAAO6C,GAAG,SAAS,WACtB,EAAKtC,cAAc4B,KAAKQ,QA1M9B,qCA8MiBA,GAAwC,IAAD,OACpDjQ,KAAKsN,OAAO4C,aAAc,EAE1BlQ,KAAKsN,OAAO6C,GAAG,aAAa,WAC1B,EAAKtC,cAAc4B,KAAKQ,QAlN9B,oCAsNgBA,GAAwC,IAAD,OACnDjQ,KAAKsN,OAAO4C,aAAc,EAE1BlQ,KAAKsN,OAAO6C,GAAG,YAAY,WACzB,EAAKtC,cAAc4B,KAAKQ,QA1N9B,+BAiQkBhP,GACd,OAAOjB,KAAKsP,SAASc,SAASnP,KAlQlC,6BAsHI,OAAO,IAAIrB,EAAQI,KAAKsP,UAAU7N,IAAI,CACpC3F,EAAGkE,KAAKyF,MAAQ,EAChB1J,EAAGiE,KAAK0F,OAAS,MAxHvB,6BAsKI,IAAMwJ,EAASlP,KAAKsN,OAAO4B,OAE3B,GAAIA,aAAkBpC,EAAiB,CACrC,IAAMuD,EAAenB,EAAOnC,OAE5B,GAAIsD,EACF,OAAOA,EAIX,OAAO,OAhLX,wBA8N2B,OAAOrQ,KAAKsN,OAAOxR,GA9N9C,aA+NeW,GAAiBuD,KAAKsN,OAAOxR,EAAIW,IA/NhD,wBAiO2B,OAAOuD,KAAKsN,OAAOvR,GAjO9C,aAkOeU,GAAiBuD,KAAKsN,OAAOvR,EAAIU,IAlOhD,4BAoO+B,OAAOuD,KAAKsN,OAAO7H,OApOlD,aAqOmBhJ,GAAiBuD,KAAKsN,OAAO7H,MAAQhJ,IArOxD,6BAuOgC,OAAOuD,KAAKsN,OAAO5H,QAvOnD,aAwOoBjJ,GAAiBuD,KAAKsN,OAAO5H,OAASjJ,IAxO1D,4BA0O+B,OAAOuD,KAAKsN,OAAOgD,OA1OlD,aA2OmB7T,GAAiBuD,KAAKsN,OAAOgD,MAAQ7T,IA3OxD,+BA6OmC,OAAO,IAAImD,EAAQ,CAAE9D,EAAGkE,KAAKlE,EAAGC,EAAGiE,KAAKjE,KA7O3E,aA8OsBU,GAAkBuD,KAAKlE,EAAIW,EAAMX,EAAGkE,KAAKjE,EAAIU,EAAMV,IA9OzE,6BAgPgC,OAAOiE,KAAKsN,OAAOiD,QAhPnD,aAiPoB9T,GAAiBuD,KAAKsN,OAAOiD,OAAS9T,EAAOuD,KAAKsN,OAAO4B,QAAUlP,KAAKsN,OAAO4B,OAAOsB,iBAjP1G,8BAmPkC,OAAOxQ,KAAKsN,OAAOmD,SAnPrD,aAoPqBhU,GAAkBuD,KAAKsN,OAAOmD,QAAUhU,IApP7D,4BAsPqBA,GAAkBuD,KAAKsN,OAAOS,QAAUtR,IAtP7D,yBAwPkBA,GAAsCuD,KAAKsN,OAAOoD,KAAOjU,GAxP3E,eAyPmD,OAAOuD,KAAKsN,OAAOoD,OAzPtE,4BA2PgC,OAAO,IAAI9Q,EAAQ,CAAE9D,EAAGkE,KAAKsN,OAAOlM,MAAMtF,EAAGC,EAAGiE,KAAKsN,OAAOlM,MAAMrF,KA3PlG,aA4PmBU,GACfuD,KAAKsN,OAAOlM,MAAMtF,EAAIW,EAAMX,EAC5BkE,KAAKsN,OAAOlM,MAAMrF,EAAIU,EAAMV,MA9PhC,KK9Ba4U,EAAb,WAGE,WAAYC,GAAgB,yBAFpBC,YAEmB,EACzB7Q,KAAK6Q,OAASD,EAJlB,uDAOa3P,GACT,GAAIA,aAAiBqE,EAAM,CAAC,IAAD,gBACNtF,KAAK6Q,QADC,IACzB,2BAAgC,CAC9B,GAD8B,QACrBC,WAAW7P,GAClB,OAAO,GAHc,8BAOzB,OAAO,EAGT,GAAIA,aAAiB0P,EAAW,CAAC,IAAD,gBACb3Q,KAAK6Q,QADQ,IAC9B,2BAA8B,CAAC,IAAD,EAAnBE,EAAmB,sBACX/Q,KAAK6Q,QADM,IAC5B,2BAA8B,CAAC,IAApBG,EAAmB,QAC5B,GAAID,EAAGD,WAAWE,GAChB,OAAO,GAHiB,gCADA,8BAS9B,OAAO,KA3Bb,iCAgCI,OAAOhR,KAAK6Q,SAhChB,0BAmCMI,GAGF,OAAO,IAAIN,EAFM3Q,KAAK6Q,OAAOzL,KAAI,SAAA8F,GAAI,OAAIA,EAAKzJ,IAAIwP,SApCtD,+BAyCWA,GAGP,OAAO,IAAIN,EAFM3Q,KAAK6Q,OAAOzL,KAAI,SAAA8F,GAAI,OAAIA,EAAKgG,SAASD,WA1C3D,KCJaE,GAAkBC,OAAOC,SAASC,KAAKxC,SAAS,cAAgBsC,OAAOC,SAASC,KAAKxC,SAAS,eAE9FyC,IADkBJ,GACkBC,OAAOC,SAASC,KAAKxC,SAAS,iBAAoBsC,OAAOC,SAASC,KAAKxC,SAAS,eCUpH0C,EAAb,qGAO+B,IAAD,gBACNA,EAAMC,mBADA,IAC1B,2BAA6C,CAAC,IAAnCC,EAAkC,QAC3CA,EAAMxC,OAAOV,YAAYkD,GACzBA,EAAMC,WAHkB,8BAM1BH,EAAMC,kBAAoB,KAb9B,gCAuB0BlL,GAAkE,IAAjD/B,EAAgD,uDAAxC,SAAUoN,EAA8B,wDACnFT,GACF5P,QAAQC,MAAM,qBAGhB,IAAM+C,EAAW,IAAIsN,IAoBrB,GAlBA,IAAIrP,EAAK,CACPE,GAAI6D,EAAMzK,EAAI,GACd6G,GAAI4D,EAAMzK,EAAI,GAEd8G,GAAI2D,EAAMxK,EAAI,GACd8G,GAAI0D,EAAMxK,EAAI,KACb+V,SAASvN,EAAUC,GAEtB,IAAIhC,EAAK,CACPE,GAAI6D,EAAMzK,EAAI,GACd6G,GAAI4D,EAAMzK,EAAI,GAEd8G,GAAI2D,EAAMxK,EAAI,GACd8G,GAAI0D,EAAMxK,EAAI,KACb+V,SAASvN,EAAUC,GAEtBiK,EAAcrG,MAAMkF,OAAO7B,SAASlH,IAE/BqN,IACH5R,KAAKyR,kBAAkBhC,KAAKlL,GAExBvE,KAAKyR,kBAAkBjS,OArDI,KAqDmC,CAChE,IAAMuS,EAAc/R,KAAKyR,kBAAkBO,QAE3CD,EAAY7C,OAAOV,YAAYuD,GAC/BA,EAAYJ,UAIhB,OAAOpN,IA3DX,iCAsE2BpB,EAAgBC,GAA+D,IAAjDoB,EAAgD,uDAAxC,SAAUoN,EAA8B,wDAKrG,OAJIT,GACF5P,QAAQC,MAAM,qBAGTgQ,EAAMS,SAAS,IAAIzP,EAAK,CAAEW,QAAOC,QAAQoB,EAAOoN,KA3E3D,+BAsFyBM,GAAkG,IAAtF1N,EAAqF,uDAA7E,SAAUoN,EAAmE,wDAA/CO,EAA+C,uDAAnB,QAC/FhB,GACF5P,QAAQC,MAAM,qBAGhB,IAAM+C,EAAW,IAAIsN,IAUrB,GARAK,EAAKJ,SAASvN,EAAUC,GAET,UAAX2N,EACF1D,EAAc2D,iBAAiB9E,OAAO7B,SAASlH,GAE/CkK,EAAcrG,MAAMkF,OAAO7B,SAASlH,IAGjCqN,IACH5R,KAAKyR,kBAAkBhC,KAAKlL,GAExBvE,KAAKyR,kBAAkBjS,OA1GI,KA0GmC,CAChE,IAAMuS,EAAc/R,KAAKyR,kBAAkBO,QAE3CD,EAAY7C,OAAOV,YAAYuD,GAC/BA,EAAYJ,UAIhB,OAAOpN,IAhHX,+BA2HyB2G,GAAoG,IAAxF1G,EAAuF,uDAA/E,SAAUoN,EAAqE,wDAAjDO,EAAiD,uDAArB,QAC/FhB,GACF5P,QAAQC,MAAM,qBAGhB,IALwH,EAKlH6Q,EAAoB,GAL8F,cAOrGnH,EAAKoH,oBAPgG,IAOxH,2BAA4C,CAAC,IAAlCJ,EAAiC,QAC1CG,EAAM5C,KAAK+B,EAAMS,SAASC,EAAM1N,EAAOoN,EAAYO,KARmE,8BAWxH,OAAOE,IAtIX,iCAkJItF,GAIa,IAHbvI,EAGY,uDAHJ,SACRoN,EAEY,wDADZO,EACY,uDADgB,QAY5B,GAVIhB,GACF5P,QAAQC,MAAM,qBAGZuL,aAAkBE,IACpBF,EAASA,EAAO6C,kBACbnO,IAAIsL,EAAOwC,qBAIZxC,aAAkB4D,EAAW,CAC/B,IAD+B,EACzB4B,EAAsB,GADG,cAGZxF,EAAOyF,YAHK,IAG/B,2BAAsC,CAAC,IAAD,EAA3BtH,EAA2B,QAC9BmH,EAAQb,EAAMiB,SAASvH,EAAM1G,EAAOoN,EAAYO,GADlB,cAGjBE,GAHiB,IAGpC,2BAA0B,CAAC,IAAhBH,EAAe,QACxBK,EAAQ9C,KAAKyC,IAJqB,gCAHP,8BAW/B,OAAOK,EAEP,OAAOf,EAAMiB,SAAS,IAAInN,EAAK,CAC7BxJ,EAAQiR,EAAOjR,EACfC,EAAQgR,EAAOhR,EACf0J,MAAQsH,EAAOtH,MACfC,OAAQqH,EAAOrH,SACblB,EAAOoN,EAAYO,KAnL7B,8BA4LwBjF,EAAc4C,GAClC0B,EAAMkB,SAASxF,GAAQsE,EAAMkB,SAASxF,IAAS,GAE/C,IAAM/J,EAAQiO,OAAOuB,YAAYC,MAEjC9C,IAEA,IAAM1M,EAAMgO,OAAOuB,YAAYC,MAI/B,GAFApB,EAAMkB,SAASxF,GAAMuC,KAAKrM,EAAMD,GAEI,KAAhCqO,EAAMkB,SAASxF,GAAM1N,OAAe,CACtC,IAAMqT,EAAUrB,EAAMkB,SAASxF,GAAM4F,QAAO,SAAC1V,EAAGC,GAAJ,OAAUD,EAAIC,KAAK,GACzD0V,EAAUjW,KAAKC,MAAgB,IAAV8V,GAAiB,IAE5CrB,EAAMkB,SAASxF,GAAQ,GAEvB3L,QAAQyR,IAAR,UAAgB9F,EAAhB,aAA2B6F,EAA3B,UA7MN,uCAkNK/F,IAAeiG,UAAY,EAC3BC,IAAkBD,UAAY,EAC/BE,EAAQ,KApNZ,wCAwNI,OAAOA,IAxNX,qCA4NI,OACGnG,IAAeiG,UACfC,IAAkBD,YA9NzB,iCAkO2BvE,GACnBA,EAAM/Q,KAAKyV,SAASC,IACtB7B,EAAM8B,WAAY,EAElB5E,EAAMtG,MAAMtM,EAAI,EAChB4S,EAAMtG,MAAMrM,EAAI,EAEY,KAAxB2S,EAAMtG,MAAMhH,MAAMtF,EACpB4S,EAAMtG,MAAMhH,MAAQ,IAAIxB,EAAQ,CAAE9D,EAAG,EAAGC,EAAG,IAE3C2S,EAAMtG,MAAMhH,MAAQ,IAAIxB,EAAQ,CAAE9D,EAAG,GAAKC,EAAG,MAI7CyV,EAAM8B,YACJ5E,EAAM/Q,KAAK4V,KAAKC,IAClB9E,EAAMtG,MAAMrM,GAAK,IAGf2S,EAAM/Q,KAAK4V,KAAKE,IAClB/E,EAAMtG,MAAMrM,GAAK,IAGf2S,EAAM/Q,KAAK4V,KAAKG,IAClBhF,EAAMtG,MAAMtM,GAAK,IAGf4S,EAAM/Q,KAAK4V,KAAKI,IAClBjF,EAAMtG,MAAMtM,GAAK,OA9PzB,oCAmQ8B4S,EAAsBxD,GAChDwD,EAAMtG,MAAMhH,MAAQ,IAAIxB,EAAQ,CAAE9D,EAAG,GAAKC,EAAG,KAC7C2S,EAAMtG,MAAMtM,EAAc,IAAToP,EAAKpP,EACtB4S,EAAMtG,MAAMrM,EAAc,IAATmP,EAAKnP,MAtQ1B,KAAayV,EACGoC,oB,EADHpC,EAGG8B,WAAY,EAHf9B,EAKGC,kBAAgC,GALnCD,EAuLIkB,SAAwC,GAmFzD,IAAIS,EAAe,GAEf5B,IACDvE,IAAeiG,UAAY,EAE3BjG,IAAO6G,UAAkBC,SAAY9G,IAAO6G,UAAkBE,QAC9D/G,IAAO6G,UAAkBE,QAAU,SAAUC,GAC3ChH,IAAeiG,YAChBjT,KAAK8T,SAASE,GACdb,EAAM1D,KAAKzP,OAIZgN,IAAO6G,UAAkBI,eAAkBjH,IAAO6G,UAAkBK,cACpElH,IAAO6G,UAAkBK,cAAgB,SAAUF,GACjDhH,IAAeiG,YAChBjT,KAAKiU,eAAeD,GACpBb,EAAM1D,KAAKzP,OAMZkT,IAAkBD,UAAY,EAE9BC,IAAUW,UAAkBC,SAAYZ,IAAUW,UAAkBE,QACpEb,IAAUW,UAAkBE,QAAU,SAAUC,GAC9Cd,IAAkBD,YACnBjT,KAAK8T,SAASE,GACdb,EAAM1D,KAAKzP,OAIZkT,IAAUW,UAAkBI,eAAkBf,IAAUW,UAAkBK,cAC1EhB,IAAUW,UAAkBK,cAAgB,SAAUF,GACpDd,IAAkBD,YACnBjT,KAAKiU,eAAeD,GACpBb,EAAM1D,KAAKzP,QC3TR,IAAMmU,EAAb,WAGE,aAAsC,IAA1BC,EAAyB,uDAAJ,GAAI,yBAF7BC,aAE6B,EACnCrU,KAAKqU,QAAU,IAAIC,EADgB,oBAGfF,GAHe,IAGnC,2BAAmC,CAAC,IAAzB3X,EAAwB,QACjCuD,KAAK4O,IAAInS,IAJwB,+BAHvC,mDAWSS,GACL8C,KAAKqU,QAAQxF,OAAO3R,KAZxB,0BAeMA,GACF8C,KAAKqU,QAAQzF,IAAI1R,EAAKA,KAhB1B,0BAmBMA,GACF,YAAiCZ,IAA1B0D,KAAKqU,QAAQE,IAAIrX,KApB5B,+BAwBI,OAAO8C,KAAKqU,QAAQzI,aAxBxB,KA4Ba0I,EAAb,iDACUD,QAAgC,GAD1C,gDAGMnX,EAAQT,GACVuD,KAAKqU,QAAQnX,EAAIgL,QAAUzL,IAJ/B,6BAOSS,UACE8C,KAAKqU,QAAQnX,EAAIgL,UAR5B,0BAWMhL,GACF,OAAO8C,KAAKqU,QAAQnX,EAAIgL,UAZ5B,+BAeiB,IAAD,OACZ,OAAOxK,OAAOC,KAAKqC,KAAKqU,SAASjP,KAAI,SAAAlI,GAAG,OAAI,EAAKmX,QAAQnX,UAhB7D,KCtBasX,EAAb,WAeE,WAAY/R,GAOR,IAAD,gCAdKgS,UAAY7U,EAAQyC,KAczB,KAbKqS,iBAAmB9U,EAAQyC,KAahC,KAZKsS,YAYL,OAXKC,kBAWL,OAVKC,mBAUL,OATKC,oBASL,OA6CKC,qBAAuB,SAACzF,GAC9B,EAAKmF,UAAY,IAAI7U,EAAQ0P,GAAU4B,SAAS,EAAK8D,mBA9CpD,KAiDHC,SAAW,SAAC3F,GAA2C,IAAvB4F,EAAsB,wDAChDA,EACF,EAAKH,qBAAqBzF,GAE1B,EAAKoF,iBAAmB,IAAI9U,EAAQ0P,GAAU4B,SAAS,EAAK8D,mBArD7D,KAyDHG,yBAA2B,WACzB,IAAIC,EAAkB,EAAKV,iBAErBW,EAAgB,EAAKP,eAE3B,IAAKO,EAGH,OAFA9T,QAAQC,MAAM,yBAEP4T,EAGT,GAAIC,EAAc5P,MAAQ,EAAKmP,cAAgBS,EAAc3P,OAAS,EAAKmP,cACzE,MAAM,IAAI3G,MAAJ,+EAAkFmH,EAAcvZ,EAAhG,eAAwGuZ,EAActZ,EAAtH,MAqBR,OAhBIqZ,EAAgBtZ,EAAIuZ,EAAc/J,OACpC8J,EAAkBA,EAAgBxP,MAAMyP,EAAc/J,OAGpD8J,EAAgBtZ,EAAI,EAAKwZ,cAAc7P,MAAQ4P,EAAchP,QAC/D+O,EAAkBA,EAAgBxP,MAAMyP,EAAchP,MAAQ,EAAKuO,eAGjEQ,EAAgBrZ,EAAIsZ,EAAc9J,MACpC6J,EAAkBA,EAAgBzP,MAAM0P,EAAc9J,MAGpD6J,EAAgBrZ,EAAI,EAAKuZ,cAAc5P,OAAS2P,EAAc/O,SAChE8O,EAAkBA,EAAgBzP,MAAM0P,EAAc/O,OAAS,EAAKuO,gBAG/DO,GA1FN,KA6FHpF,OAAS,SAACtB,GACR,IAAI8C,EAAM8B,UAAV,CAIA,IAAM8B,EAAkB,EAAKD,2BAE7B,EAAKV,UAAY,EAAKA,UAAUc,OAAOH,EAAiBZ,EAAOgB,aAAchB,EAAOiB,cAEpF,EAAKhB,UAAY,IAAI7U,EACgB,EAAnC9C,KAAKC,MAAM,EAAK0X,UAAU3Y,EAAI,GACK,EAAnCgB,KAAKC,MAAM,EAAK0X,UAAU1Y,EAAI,IAGhC,EAAK4Y,OAAO7Y,EAAIgB,KAAKC,OAAO,EAAK0X,UAAU3Y,GAC3C,EAAK6Y,OAAO5Y,EAAIe,KAAKC,OAAO,EAAK0X,UAAU1Y,KA3G3CiE,KAAK2U,OAASlS,EAAM2F,MACpBpI,KAAK4U,aAAenS,EAAMyJ,YAAczJ,EAAMrB,MAC9CpB,KAAK6U,cAAgBpS,EAAM0J,aAAe1J,EAAMrB,MAChDpB,KAAK8U,eAAiBrS,EAAMkN,OAE5B3P,KAAK+U,qBAAqB,IAAInV,EAAQ,CACpC9D,EAAGkE,KAAK4U,aAAe,EACvB7Y,EAAGiE,KAAK6U,cAAgB,KAG1B7U,KAAK0U,iBAAmB1U,KAAKyU,UAjCjC,sDA2CmBiB,GACf1V,KAAK8U,eAAiBY,IA5C1B,kCAgDI,OAAO1V,KAAK8U,iBAhDhB,oCAoDI,OAAO,IAAIxP,EAAK,CACdxJ,EAAGkE,KAAKkG,OAAOpK,EAAIkE,KAAK4U,aAAe,EACvC7Y,EAAGiE,KAAKkG,OAAOnK,EAAIiE,KAAK6U,cAAgB,EACxCpP,MAAOzF,KAAK4U,aACZlP,OAAQ1F,KAAK6U,kBAxDnB,uCA6DI,OAAO,IAAIjV,EAAQ,CACjB9D,EAAGkE,KAAK4U,aAAe,EACvB7Y,EAAGiE,KAAK6U,cAAgB,MA/D9B,6BAqCI,OAAO,IAAIjV,EAAQ,CACjB9D,EAAGkE,KAAKyU,UAAU3Y,EAAIkE,KAAK4U,aAAe,EAC1C7Y,EAAGiE,KAAKyU,UAAU1Y,EAAIiE,KAAK6U,cAAgB,QAvCjD,KAAaL,EACIgB,aAAe,IADnBhB,EAEIiB,aAAe,G,ICMrBhH,E,OCbEkH,EAAb,WAKE,WAAYC,GAA2C,yBAJ/CC,MAAgD,GAIF,KAH9CC,kBAG8C,OAF9CC,OAAS,EAGf/V,KAAK8V,aAAeF,EANxB,uDAUI,OAAO5V,KAAK+V,SAVhB,6BAgBI,IAFA,IAAM1X,EAAqC,GAE3C,MAAgBX,OAAOC,KAAKqC,KAAK6V,OAAjC,eAGE,IAHG,IAAM/Z,EAAC,KACJka,EAAQhW,KAAK6V,MAAMxQ,OAAOvJ,IAEhC,MAAgB4B,OAAOC,KAAKqY,GAA5B,eAAoC,CAA/B,IAAMja,EAAC,KACVsC,EAAOoR,KAAK,CACV3T,EAAGuJ,OAAOvJ,GACVC,EAAGsJ,OAAOtJ,KAKhB,OAAOsC,IA3BX,+BAiCI,IAFA,IAAMA,EAAc,GAEpB,MAAgBX,OAAOC,KAAKqC,KAAK6V,OAAjC,eAGE,IAHG,IAAM/Z,EAAC,KACJka,EAAQhW,KAAK6V,MAAMxQ,OAAOvJ,IAEhC,MAAgB4B,OAAOC,KAAKqY,GAA5B,eAAoC,CAA/B,IAAMja,EAAC,KACVsC,EAAOoR,KAAKuG,EAAM3Q,OAAOtJ,KAI7B,OAAOsC,IAzCX,0BA6CMvC,EAAWC,EAAWU,GACnBuD,KAAK6V,MAAM/Z,KACdkE,KAAK6V,MAAM/Z,GAAK,IAGbkE,KAAK6V,MAAM/Z,GAAGC,IACjBiE,KAAK+V,SAGP/V,KAAK6V,MAAM/Z,GAAGC,GAAKU,IAtDvB,0BAyDMX,EAAWC,GASb,OARKiE,KAAK6V,MAAM/Z,KACdkE,KAAK6V,MAAM/Z,GAAK,SAGOQ,IAArB0D,KAAK6V,MAAM/Z,GAAGC,KAChBiE,KAAK6V,MAAM/Z,GAAGC,GAAKiE,KAAK8V,aAAaha,EAAGC,IAGnCiE,KAAK6V,MAAM/Z,GAAGC,OAlEzB,KCuBaka,EAAb,WAUE,WAAYxT,GAA6D,IAAD,gCAThEgS,UAAqB7U,EAAQyC,KASmC,KARhEkD,YAQgE,OAPhEC,aAOgE,OANhE0Q,eAMgE,OALhEC,qBAKgE,OAJhEC,qBAIgE,OAHhEC,YAGgE,OAFhEC,aAAgC,KAEgC,KAqDxEC,kBAAoB,SAClBrL,EACAsL,GAUA,IARA,IAAMC,EAAgB,GAEhB1U,EAAOjF,KAAKC,MAAMmO,EAAKpP,EAAI,EAAKoa,WAChCrU,EAAQ/E,KAAK4Z,MAAMxL,EAAKpP,EAAIoP,EAAKzF,OAAS,EAAKyQ,WAE/ClU,EAAOlF,KAAKC,MAAMmO,EAAKnP,EAAI,EAAKma,WAChCpU,EAAQhF,KAAK4Z,MAAMxL,EAAKnP,EAAImP,EAAKxF,QAAU,EAAKwQ,WAE7Cpa,EAAIiG,EAAMjG,EAAI+F,EAAO/F,IAC5B,IAAK,IAAIC,EAAIiG,EAAMjG,EAAI+F,EAAO/F,IAC5B0a,EAAMhH,KAAK,EAAK4G,OAAO9B,IAAIzY,EAAGC,IAMlC,IAFA,IAAM0R,EAAoC,GAE1C,MAAmBgJ,EAAnB,eAA0B,CAArB,IAAqB,EAAfE,EAAI,KAAW,cACiCA,EAAKC,WADtC,IACxB,2BAAyE,CAAC,IAAD,UAAtDC,EAAsD,EAA5D3L,KAA0B4L,EAAkC,EAA1C/J,OAC7B,GAAI+J,IAAiBN,EAArB,CAIA,IAAMO,EAAU7L,EAAKtE,gBAAgBiQ,GAEjCE,GACFtJ,EAAWgC,KAAK,CACduH,UAAWH,EACXI,YAAaH,EAEbI,WAAYhM,EACZiM,WAAYX,EAEZO,cAhBkB,+BAsB1B,OAAOtJ,GA/F+D,KAkGxE2J,uBAAyB,SACvBC,EACAtK,GAEA,IAD0B,EACtBU,EAAoC,GADd,cAGP4J,EAAM7E,YAHC,IAG1B,2BAAqC,CAAC,IAA3BtH,EAA0B,QACnCuC,EAAU,sBAAOA,GAAP,YAAsB,EAAK8I,kBAAkBrL,EAAM6B,MAJrC,8BAO1B,OAAOU,GA5G+D,KAkHxE6J,iBAAmB,SAACpM,EAAY6B,GAC9B,IAD2D,EAErD0J,EADUvL,EAAKqM,aACCnS,KAAI,SAACoS,GAAD,OACxB,EAAKnB,OAAO9B,IACVzX,KAAKC,MAAMya,EAAO1b,EAAI,EAAKoa,WAC3BpZ,KAAKC,MAAMya,EAAOzb,EAAI,EAAKma,eAIzBuB,EAAuC,GATc,cAWxChB,GAXwC,IAW3D,2BAA0B,CAAC,IAAhBE,EAAe,QACxBc,EAAYd,EAAKzO,QAAUyO,GAZ8B,8BAiB3D,IAFA,IAEA,MAFejZ,OAAOkO,OAAO6L,GAE7B,eAA2B,CAAtB,IAAsB,EAAhBd,EAAI,KAAY,cACgCA,EAAKC,WADrC,IACzB,2BAAyE,CAAC,IAAD,UAAtDC,EAAsD,EAA5D3L,KACX,GADuE,EAA1C6B,SACRA,EAMrB,GAFgB7B,EAAK4F,WAAW+F,GAG9B,OAAO,GATc,+BAc3B,OAAO,GAjJ+D,KAoJxEa,cAAgB,SACdnR,GAE4B,IAAD,EAD3BoR,EAC2B,wDACrBhB,EAAO,EAAKN,OAAO9B,IACvBzX,KAAKC,MAAMwJ,EAAMzK,EAAI,EAAKoa,WAC1BpZ,KAAKC,MAAMwJ,EAAMxK,EAAI,EAAKma,YAEtBzI,EAAqC,GALhB,cAOkBkJ,EAAKC,WAPvB,IAO3B,2BAA6D,CAAC,IAAD,UAAhD1L,EAAgD,EAAhDA,KAAc4L,EAAkC,EAA1C/J,OACXgK,EAAU7L,EAAK0M,SAASrR,GAE9B,GAAIwQ,IACFtJ,EAAWgC,KAAK,CACduH,UAAW9L,EACX2M,YAAaf,EAEbI,WAAYhM,EACZ4M,kBAAcxb,EAEdya,QAASxQ,IAGPoR,GACF,OAAOlK,GAtBc,8BA2B3B,OAAOA,GAlL+D,KAwLxEsK,iBAAmB,WACjB,IAD8C,EACxC1Z,EAAgC,GADQ,cAG7B,EAAKoY,OAHwB,IAG9C,2BAGE,IAH4B,IACtBuB,EADqB,QACJpB,UAEdqB,EAAI,EAAGA,EAAID,EAAUxY,OAAQyY,IACpC,IAAK,IAAIC,EAAID,EAAGC,EAAIF,EAAUxY,OAAQ0Y,IACpC,GAAID,IAAMC,EAAV,CAEA,IAAMC,EAAYH,EAAUC,GACtBG,EAAYJ,EAAUE,GAEtBvR,EAAewR,EAAUjN,KAAKtE,gBAClCwR,EAAUlN,MACV,QAGmB5O,IAAjBqK,GACFtI,EAAOoR,KAAK,CACVuH,UAAWmB,EAAUjN,KACrBgM,WAAYkB,EAAUlN,KACtB+L,YAAakB,EAAUpL,OACvBoK,WAAYiB,EAAUrL,OACtBgK,QAASpQ,KAxB2B,8BA+B9C,OAAOtI,GAvN+D,KA8NxEga,MAAQ,WAAO,IAAD,gBACO,EAAKhC,OAAOzK,UADnB,IACZ,2BAAyC,SAClC0M,aAFK,gCA9N0D,KAsOxE7W,IAAM,SAACyJ,EAAYqN,GAMjB,IALA,IAAMC,EAAS1b,KAAKC,MAAMmO,EAAKpP,EAAI,EAAKoa,WAClCuC,EAAQ3b,KAAKC,MAAMmO,EAAK7E,MAAQ,EAAK6P,WACrCwC,EAAS5b,KAAKC,MAAMmO,EAAKnP,EAAI,EAAKma,WAClCyC,EAAQ7b,KAAKC,MAAMmO,EAAK5E,OAAS,EAAK4P,WAEnCpa,EAAI0c,EAAQ1c,GAAK2c,EAAO3c,IAC/B,IAAK,IAAIC,EAAI2c,EAAQ3c,GAAK4c,EAAO5c,IAC/B,EAAKsa,OAAO9B,IAAIzY,EAAGC,GAAG0F,IAAIyJ,EAAMqN,IA9OkC,KAmPxEK,aAAe,SAACvB,EAAkBkB,GAA+B,IAAD,gBAC3ClB,EAAM7E,YADqC,IAC9D,2BAAqC,CAAC,IAA3BtH,EAA0B,QACnC,EAAKzJ,IAAIyJ,EAAMqN,IAF6C,gCAnPQ,IAC9D9S,EAA4BhD,EAA5BgD,MAAOC,EAAqBjD,EAArBiD,OAAQmT,EAAapW,EAAboW,SAEvB7Y,KAAKuF,OAASE,EACdzF,KAAKwF,QAAUE,EACf1F,KAAKkW,UAAY2C,EAEjB7Y,KAAKmW,gBAAkBrZ,KAAK4Z,KAAKjR,EAAQoT,GACzC7Y,KAAKoW,gBAAkBtZ,KAAK4Z,KAAKhR,EAASmT,GAE1C7Y,KAAKqW,OAAS,IAAIV,GAChB,SAAC7Z,EAAGC,GAAJ,OACE,IAAI+c,EAAK,IAAIlZ,EAAQ,CAAE9D,EAAGA,EAAI+c,EAAU9c,EAAGA,EAAI8c,IAAaA,MAtBpE,oDA2BI,IAAK,IAAI/c,EAAI,EAAGA,EAAI,GAAIA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAG3ByV,EAAMiB,SACJ,IAAInN,EAAK,CACPxJ,EAAGA,EAAIkE,KAAKkW,UACZna,EAAGA,EAAIiE,KAAKkW,UACZzQ,MAAOzF,KAAKkW,UACZxQ,OAAQ1F,KAAKkW,YAEf,UACA,EACA,SAZyB,oBAeTlW,KAAKqW,OAAO9B,IAAIzY,EAAGC,GAAG6a,WAfb,IAe3B,2BAAmD,CAAC,IAAzCvX,EAAwC,QACjDmS,EAAMiB,SAASpT,EAAI6L,KAAM,UAAU,EAAM,UAhBhB,kCA5BnC,8BAmDI,OAAOlL,KAAKyU,YAnDhB,6BAuDI,OAAOzU,KAAKyU,UAAUhT,IAAI,CAAE3F,EAAGkE,KAAKuF,OAAS,EAAGxJ,EAAGiE,KAAKwF,QAAU,MAvDtE,4BAqOI,OAAOxF,KAAKqW,OAAOzK,aArOvB,KAyQakN,EAAb,WAIE,WAAYjT,EAAkBgT,GAAmB,IAAD,gCAHxCE,aAGwC,OAFxClI,OAAqB,GAEmB,KAQhDpP,IAAM,SAACyJ,EAAY6B,GACjB,EAAK8D,OAAOpB,KAAK,CAAEvE,OAAM6B,YATqB,KAYhDuL,UAAY,WACV,EAAKzH,OAAS,IAZd7Q,KAAK+Y,QAAUzT,EAAK0T,UAAUnT,EAASgT,GAL3C,mDAqBI,OAAO7Y,KAAK+Y,QAAQ9Y,aArBxB,gCASI,OAAOD,KAAK6Q,WAThB,KChRaoI,EAKX,WAAYxW,GAKR,IAAD,OACD,GADC,yBATKmS,kBASL,OARKC,mBAQL,OAPKqE,eAOL,OAUHC,mBAAqB,SAAC1W,GAGA,IAAD,EACXkM,EAAqBlM,EAArBkM,SAAUgB,EAAWlN,EAAXkN,OAEZyJ,EAAO,IAAInD,EAAc,CAC7BxQ,MAAO,EAAI,EAAKmP,aAChBlP,OAAQ,EAAI,EAAKmP,cACjBgE,SAAU,EAAI,EAAKK,YAGfG,EAAsB1K,EAAS/C,SAAS5H,QAAO,SAAAlI,GAAC,OAAIA,EAAEkT,iBAAmBlT,EAAEwd,oBAT9D,cAWED,GAXF,IAWnB,2BAA0C,CAAC,IAAhCtM,EAA+B,QAClCwM,EAAgBxM,EAAO6C,kBAAkBnO,IAAIsL,EAAOwC,oBAE1D,GAAIgK,EAAczI,WAAWnB,GAAS,CACpC,IAAM6J,EAAkBD,EAEpBC,aAA2BlU,EAC7B8T,EAAK3X,IAAI+X,EAAiBzM,GAE1BqM,EAAKR,aAAaY,EAAiBzM,KApBtB,8BAyBnB,OAAOqM,GAtCN,KAyCHK,UAAY,SAACL,EAAqBzJ,EAA0B5C,GAC1D,IAAM2M,EACJ/J,aAAkBrK,EACd8T,EAAK7C,kBAAkB5G,EAAQ5C,GAC/BqM,EAAKhC,uBAAuBzH,EAAQ5C,GAK1C,MAAO,CACL4M,KAJWD,EAAM1V,QAAO,SAAAlI,GAAC,OAAKA,EAAEmb,aAAgBnb,EAAEmb,cAAgBnb,EAAEmb,YAAYqC,oBAKhF5L,aAJmBgM,EAAM1V,QAAO,SAAAlI,GAAC,OAAKA,EAAEmb,aAAenb,EAAEmb,YAAYqC,sBAhDtE,KAwDHM,kBAAoB,SAACnX,GAGd,IAAD,EACIkM,EAAmBlM,EAAnBkM,SAAUyK,EAAS3W,EAAT2W,KADd,cAGiBzK,EAAS/C,UAH1B,IAGJ,2BAAwC,CAAC,IAA9BmB,EAA6B,QAChCQ,EAAmB,CACvBC,KAAK,EACLC,WAAY,GACZC,aAAc,IAGhB,GAA0B,IAAtBX,EAAOM,SAASvR,GAAiC,IAAtBiR,EAAOM,SAAStR,EAA/C,CAEA,IAAI8d,EAAgB9M,EAAO6C,kBAAkBnO,IAAIsL,EAAOwC,oBAElDuK,EAAY,IAAIla,EAAQ,CAAE9D,EAAGiR,EAAOM,SAASvR,EAAGC,EAAG,IACnDge,EAAY,IAAIna,EAAQ,CAAE9D,EAAG,EAAGC,EAAGgR,EAAOM,SAAStR,IAErDkV,EAAQrR,EAAQyC,KAIpB4O,EAAQA,EAAMxP,IAAIqY,GAClBD,EAAgBA,EAAcpY,IAAIqY,GAnBI,MAqBe,EAAKL,UAAUL,EAAMS,EAAe9M,GAA3E2M,EArBwB,EAqB9BC,KAA2BK,EArBG,EAqBjBtM,aAErB,GAAIgM,EAAMla,OAAS,EAAG,CACpB+N,EAAQC,KAAM,EACdD,EAAQlH,MAAQ0G,EAAOM,SAASvR,EAAI,EACpCyR,EAAQjC,KAAOyB,EAAOM,SAASvR,EAAI,EACnCyR,EAAQE,WAAR,sBAAyBF,EAAQE,YAAjC,YAAgDiM,IAEhDzI,EAAQA,EAAMC,SAAS4I,GACvBD,EAAgBA,EAAc3I,SAAS4I,GAEvC,IAAK,IAAIhe,EAAI,EAAGA,EAAIge,EAAUhe,EAAGA,IAAK,CAMpC,GALA+d,EAAgBA,EAAcpY,IAAI,IAAI7B,EAAQ,EAAG,IACjDqR,EAAQA,EAAMxP,IAAI,IAAI7B,EAAQ,EAAG,IAEN,EAAK6Z,UAAUL,EAAMS,EAAe9M,GAAvD4M,KAEKna,OAAS,EAAG,CACvBqa,EAAgBA,EAAcpY,IAAI,IAAI7B,GAAS,EAAG,IAClDqR,EAAQA,EAAMxP,IAAI,IAAI7B,GAAS,EAAG,IAElC,QAKFoa,EAAcxa,OAAS,IACzB+N,EAAQG,aAAR,sBAA2BH,EAAQG,cAAnC,YAAoDsM,KAKtD/I,EAAQA,EAAMxP,IAAIsY,GAClBF,EAAgBA,EAAcpY,IAAIsY,GAtDI,MAwDe,EAAKN,UAAUL,EAAMS,EAAe9M,GAA3EkN,EAxDwB,EAwD9BN,KAA2BO,EAxDG,EAwDjBxM,aAErB,GAAIuM,EAAMza,OAAS,EAAG,CACpB+N,EAAQC,KAAM,EACdD,EAAQ4M,GAAKpN,EAAOM,SAAStR,EAAI,EACjCwR,EAAQgG,KAAOxG,EAAOM,SAAStR,EAAI,EACnCwR,EAAQE,WAAR,sBAAyBF,EAAQE,YAAjC,YAAgDwM,IAEhDhJ,EAAQA,EAAMC,SAAS6I,GACvBF,EAAgBA,EAAc3I,SAAS6I,GAEvC,IAAK,IAAIhe,EAAI,EAAGA,EAAIge,EAAUhe,EAAGA,IAAK,CAMpC,GALA8d,EAAgBA,EAAcpY,IAAI,IAAI7B,EAAQ,EAAG,IACjDqR,EAAQA,EAAMxP,IAAI,IAAI7B,EAAQ,EAAG,IAEN,EAAK6Z,UAAUL,EAAMS,EAAe9M,GAAvD4M,KAEKna,OAAS,EAAG,CACvBqa,EAAgBA,EAAcpY,IAAI,IAAI7B,EAAQ,GAAI,IAClDqR,EAAQA,EAAMxP,IAAI,IAAI7B,EAAQ,GAAI,IAElC,QAKFsa,EAAc1a,OAAS,IACzB+N,EAAQG,aAAR,sBAA2BH,EAAQG,cAAnC,YAAoDwM,KAGtDnN,EAAOQ,QAAUA,EAEjBA,EAAQC,IAAMD,EAAQE,WAAWjO,OAAS,EAE1CuN,EAAOjR,EAAIiR,EAAOjR,EAAImV,EAAMnV,EAC5BiR,EAAOhR,EAAIgR,EAAOhR,EAAIkV,EAAMlV,IA9F1B,gCA1DA0G,EAAM2X,YAAc3X,EAAM4X,WAC5B,MAAM,IAAInM,MAAM,wEAGlBlO,KAAK4U,aAAenS,EAAMyJ,YAC1BlM,KAAK6U,cAAgBpS,EAAM0J,aAC3BnM,KAAKkZ,UAAYzW,EAAM2X,WCSdE,EAAb,WAOE,aAAe,IAAD,gCANP/G,KA5Cc,CACrBgH,GAAU,EACV/G,GAAU,EACVgH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVpH,GAAU,EACVF,GAAU,EACVC,GAAU,EACVsH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVhI,GAAU,EACViI,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,IAAU,EACVC,MAAU,EACVC,MAAU,EACVC,OAAU,EACVC,OAAU,EACVC,UAAU,EACVC,OAAU,GAiBI,KALP9I,SA7Cc,CACrBmH,GAAU,EACV/G,GAAU,EACVgH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVpH,GAAU,EACVF,GAAU,EACVC,GAAU,EACVsH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVhI,GAAU,EACViI,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,IAAU,EACVC,MAAU,EACVC,MAAU,EACVC,OAAU,EACVC,OAAU,EACVC,UAAU,EACVC,OAAU,GAiBI,KAJPC,OA9Cc,CACrB5B,GAAU,EACV/G,GAAU,EACVgH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVpH,GAAU,EACVF,GAAU,EACVC,GAAU,EACVsH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVhI,GAAU,EACViI,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,IAAU,EACVC,MAAU,EACVC,MAAU,EACVC,OAAU,EACVC,OAAU,EACVC,UAAU,EACVC,OAAU,GAiBI,KAFNE,cAAuC,GAG7CC,SAASC,iBAAiB,WAAW,SAAAC,GAAC,OAAI,EAAKC,QAAQD,MAAI,GAC3DF,SAASC,iBAAiB,SAAW,SAAAC,GAAC,OAAI,EAAKE,MAAMF,MAAM,GAC3DnL,OAAOkL,iBAAiB,QAAa,WACnC,EAAKjE,WACJ,GAZP,oDAgBIrY,KAAKuT,KA3Dc,CACrBgH,GAAU,EACV/G,GAAU,EACVgH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVpH,GAAU,EACVF,GAAU,EACVC,GAAU,EACVsH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVhI,GAAU,EACViI,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,IAAU,EACVC,MAAU,EACVC,MAAU,EACVC,OAAU,EACVC,OAAU,EACVC,UAAU,EACVC,OAAU,GA2BRlc,KAAKoT,SA5Dc,CACrBmH,GAAU,EACV/G,GAAU,EACVgH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVpH,GAAU,EACVF,GAAU,EACVC,GAAU,EACVsH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVhI,GAAU,EACViI,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,IAAU,EACVC,MAAU,EACVC,MAAU,EACVC,OAAU,EACVC,OAAU,EACVC,UAAU,EACVC,OAAU,GA4BRlc,KAAKmc,OA7Dc,CACrB5B,GAAU,EACV/G,GAAU,EACVgH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVpH,GAAU,EACVF,GAAU,EACVC,GAAU,EACVsH,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVhI,GAAU,EACViI,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,GAAU,EACVC,IAAU,EACVC,MAAU,EACVC,MAAU,EACVC,OAAU,EACVC,OAAU,EACVC,UAAU,EACVC,OAAU,GA6BRlc,KAAKoc,cAAgB,KAnBzB,4BAsBgBG,GAIZvc,KAAKoc,cAAc3M,KAAK,CAAEiN,MAAOH,EAAGI,QAAQ,MA1BhD,8BA6BkBJ,GACdvc,KAAKoc,cAAc3M,KAAK,CAAEiN,MAAOH,EAAGI,QAAQ,MA9BhD,iCAiCqBD,GACjB,IACIpf,EADEsf,EAASF,EAAMG,SAAWH,EAAMI,MAGtC,OAAQF,GACN,KAAK,GAAItf,EAAM,QAAS,MACxB,KAAK,GAAIA,EAAM,QAAS,MACxB,KAAK,GAAIA,EAAM,OAAS,MACxB,KAAK,GAAIA,EAAM,KAAS,MACxB,KAAK,GAAIA,EAAM,QAAS,MACxB,KAAK,GAAIA,EAAM,OAAS,MAGxB,QAASA,EAAMyf,OAAOC,aAAaJ,GAGrC,MAAY,MAARtf,EACK,WAGU,IAAfA,EAAIkC,OACClC,EAAI2f,cAGN3f,EAAI,GAAG2f,cAAgB3f,EAAI4f,MAAM,KAzD5C,+BA6DI,cAAkBxf,OAAOC,KAAKqC,KAAKoT,UAAnC,eAA8C,CAAzC,IAAMlW,EAAG,KACZ8C,KAAKoT,SAASlW,IAA4B,EAC1C8C,KAAKmc,OAAOjf,IAA4B,EAH7B,oBAMa8C,KAAKoc,eANlB,IAMb,2BAA8C,CAAC,IAApCe,EAAmC,QACtCjgB,EAAM8C,KAAKod,WAAWD,EAAYT,OAEpCS,EAAYR,QACT3c,KAAKuT,KAAKrW,KACb8C,KAAKoT,SAASlW,IAA4B,GAG5C8C,KAAKuT,KAAKrW,IAA4B,IAElC8C,KAAKuT,KAAKrW,KACZ8C,KAAKmc,OAAOjf,IAA4B,GAG1C8C,KAAKuT,KAAKrW,IAA4B,IApB7B,8BAwBb8C,KAAKoc,cAAgB,OApFzB,KClCaiB,EAWX,aAAe,yBAVfC,YAUc,OATd3f,UASc,OARdqW,cAQc,OAPdrF,SAAW,IAAIwF,EAOD,KANdzE,cAA0B,GAMZ,KALdtH,WAKc,OAJdmV,eAA4C,GAI9B,KAHdxO,KAAa,SAGC,KAFdyO,uBAEc,EACZxd,KAAKrC,KAAO,IAAI2c,GLMPlL,EAAY,QACZD,EAAiB,aACjBE,EAAoB,gBAEpBoO,EAAb,WA6BE,WAAYhb,GAAkB,IAAD,gCA5B7B4J,SA4B6B,OA1B7BqC,WA0B6B,OApB7BtG,WAoB6B,OAlB7BsV,mBAkB6B,OAZ7BtL,sBAY6B,OAVrBuL,YAUqB,OAR7B3J,cAQ6B,OAN7BsJ,YAM6B,OAJ7BM,sBAI6B,OA+E7BC,cAAgB,WACd,EAAKxR,IAAIyR,OAAOrc,KAAI,kBAAM,EAAKsc,eA/E/BtP,EAAgBzO,KAGhBA,KAAK0O,MAAL,2BACM,IAAI2O,GACL5a,EAAMiM,OAGX,IAAM/B,EAAO0P,SAAS2B,eAAe,UAMrChe,KAAK4d,iBAAmB,IAAI3E,EAAiB,CAC3C/M,YAAazJ,EAAMyJ,YAAczJ,EAAMrB,MACvC+K,aAAc1J,EAAM0J,aAAe1J,EAAMrB,MACzCiZ,WAAY5X,EAAM4X,WAClBD,UAAW3X,EAAM2X,YAGnBpa,KAAKqM,IAAM,IAAID,IAAY,CACzB3G,MAAOhD,EAAMyJ,YACbxG,OAAQjD,EAAM0J,aACd8R,gBAAiB,YACjB1R,WAAW,EACX2R,aAAa,EACbC,WAAY/M,OAAOgN,iBACnBC,aAAa,EACb7R,gBAAiB,QACjBG,KAAMA,IAGR3M,KAAKqM,IAAIjE,MAAMhH,MAAQ,IAAIkd,IAAM7b,EAAMrB,MAAOqB,EAAMrB,OAEpDpB,KAAK0d,cAAgB,IAAIzQ,EAAO,CAAEC,KAAMmC,IACxCrP,KAAKoI,MAAQ,IAAI6E,EAAO,CAAEC,KAAMkC,IAChCpP,KAAKoS,iBAAmB,IAAInF,EAAO,CAAEC,KAAMiC,IAE3CnP,KAAK0O,MAAMtG,MAAQpI,KAAKoI,MAExBpI,KAAKqM,IAAIjE,MAAMqD,SAASzL,KAAK0d,cAAcpQ,QAC3CtN,KAAKqM,IAAIjE,MAAMqD,SAASzL,KAAKoI,MAAMkF,QACnCtN,KAAKqM,IAAIjE,MAAMqD,SAASzL,KAAKoS,iBAAiB9E,QAE9CtN,KAAK0O,MAAMsF,SAAWhU,KAAKqM,IAAI2H,SAC/BhU,KAAK0O,MAAMtG,MAAQpI,KAAKoI,MAExBpI,KAAK2d,OAASlb,EAAMkb,OACpB3d,KAAK2d,OAAOY,gBAAe,kBAAM,EAAKV,mBACtC7d,KAAK2d,OAAOY,gBAAe,kBAAM,EAAKC,gBAEtCxe,KAAKgU,SAAWhU,KAAKqM,IAAI2H,SAEzBhU,KAAKsd,OAAS,IAAI9I,EAAO,CACvBpM,MAAOpI,KAAKoI,MACZsG,MAAO1O,KAAK0O,MACZxC,YAAazJ,EAAMyJ,YACnBC,aAAc1J,EAAM0J,aACpB/K,MAAOqB,EAAMrB,MACbuO,OAAQ,IAAIrK,EAAK,CAAExJ,GAAI,IAAMC,GAAI,IAAM0J,MAAO,IAAOC,OAAQ,QAG/D1F,KAAK0O,MAAM4O,OAAStd,KAAKsd,OAIzBtd,KAAKoI,MAAMkF,OAAOc,kBAAmB,EACrCpO,KAAKoS,iBAAiB9E,OAAOc,kBAAmB,EAlGpD,6FAgHc,IAAD,OACToD,EAAMiN,QADG,IAGD9P,EAAa3O,KAAK0O,MAAlBC,SAER,IAAK3O,KAAK0O,MAAM8O,kBAAmB,CACjC,IAAMpE,EAAOpZ,KAAK4d,iBAAiBzE,mBAAmB,CACpDxJ,OAAQ,IAAIrK,EAAK,CAAExJ,EAAG,EAAGC,EAAG,EAAG0J,MAAO,IAAMC,OAAQ,MACpDiJ,SAAU3O,KAAK0O,MAAMC,WAGvB3O,KAAK0O,MAAM8O,kBAAoBpE,EAGjCpZ,KAAK0O,MAAMgQ,OAEX1e,KAAK0O,MAAM/Q,KAAKqS,SAhBP,oBAkBYrB,EAAS/C,UAlBrB,IAkBT,2BAAwC,SAC/B+S,WAAW3e,KAAK0O,QAnBhB,8BAsBT1O,KAAK0O,MAAMC,SAAW,IAAIwF,EAAQxF,EAAS/C,SAAS5H,QAAO,SAAA4a,GAAG,OAAK,EAAKlQ,MAAMgB,cAAcZ,SAAS8P,OAtB5F,oBAwBY5e,KAAK0O,MAAMgB,eAxBvB,IAwBT,2BAA+C,CAAC,IAArC3C,EAAoC,QACzCA,EAAOO,OAAO4B,QAChBnC,EAAOO,OAAO4B,OAAOV,YAAYzB,EAAOO,SA1BnC,8BAgCTtN,KAAK0O,MAAMgB,cAAgB,GAE3B,IAAMmP,EAAiB,IAAI1K,EAAQnU,KAAK0O,MAAMC,SAAS/C,SAAS5H,QAAO,SAAAuY,GAAC,OAAIA,EAAEpP,YAAY2B,SAAS,EAAKJ,MAAMK,UAExGqK,EAAOpZ,KAAK4d,iBAAiBzE,mBAAmB,CACpDxJ,OAAQ3P,KAAKsd,OAAOwB,YACpBnQ,SAAUkQ,IAGZ7e,KAAK0O,MAAM8O,kBAAoBpE,EAE/BpZ,KAAK4d,iBAAiBhE,kBAAkB,CACtCjL,SAAUkQ,EACVzF,KAAMA,IAGRpZ,KAAKsd,OAAOtN,OAAOhQ,KAAK0O,OAgBxB8C,EAAMuN,qBAhLV,KM9BaC,EAAb,iDACUnJ,MAAgD,GAD1D,uDAMI,IAFA,IAAIoJ,EAAQ,EAEZ,MAAkBvhB,OAAOC,KAAKqC,KAAK6V,OAAnC,eAA2C,CAAtC,IAAM3Y,EAAG,KACN8Y,EAAQhW,KAAK6V,MAAMxQ,OAAOnI,IAEhC+hB,GAASvhB,OAAOC,KAAKqY,GAAOxW,OAG9B,OAAOyf,IAZX,6BAkBI,IAFA,IAAM5gB,EAAqC,GAE3C,MAAgBX,OAAOC,KAAKqC,KAAK6V,OAAjC,eAGE,IAHG,IAAM/Z,EAAC,KACJka,EAAQhW,KAAK6V,MAAMxQ,OAAOvJ,IAEhC,MAAgB4B,OAAOC,KAAKqY,GAA5B,eAAoC,CAA/B,IAAMja,EAAC,KACVsC,EAAOoR,KAAK,CACV3T,EAAGuJ,OAAOvJ,GACVC,EAAGsJ,OAAOtJ,KAKhB,OAAOsC,IA7BX,0BAgCMvC,EAAWC,EAAWU,GACnBuD,KAAK6V,MAAM/Z,KACdkE,KAAK6V,MAAM/Z,GAAK,IAGlBkE,KAAK6V,MAAM/Z,GAAGC,GAAKU,IArCvB,0BAwCMX,EAAWC,GACb,OAAKiE,KAAK6V,MAAM/Z,QAISQ,IAArB0D,KAAK6V,MAAM/Z,GAAGC,GACT,KAGFiE,KAAK6V,MAAM/Z,GAAGC,GAPZ,OA1Cb,mCAoDeD,EAAWC,EAAWmjB,GACjC,IAAM7gB,EAAS2B,KAAKuU,IAAIzY,EAAGC,GAE3B,OAAe,OAAXsC,EACK6gB,EAEA7gB,MA1Db,KCKa8gB,EAAb,0HAiBe,IAbGC,EAaJ,EAbVC,aACAvjB,EAYU,EAZVA,EACAC,EAWU,EAXVA,EACAujB,EAUU,EAVVA,UACAC,EASU,EATVA,WACA5B,EAQU,EARVA,OASMzgB,EAAG,UAAMkiB,EAAN,YAAqBtjB,EAArB,YAA0BC,GAEnC,IAAKojB,EAAaK,MAAMtiB,GAAM,CAC5B,IAAM6Q,EAAW4P,EAAO8B,YAAYL,GAAyBM,QAE7D3R,EAAQ4R,MAAQ,IAAIC,IAClB9jB,EAAIwjB,EACJvjB,EAAIwjB,EACJD,EACAC,GAGFvf,KAAKwf,MAAMtiB,GAAO6Q,EAGpB,OAAO/N,KAAKwf,MAAMtiB,KAjCtB,2CA0Ce,IALXygB,EAKU,EALVA,OACAkC,EAIU,EAJVA,KAIU,EAGNA,EADFA,KAAQC,EAFA,EAEAA,uBAAwBC,EAFxB,EAEwBA,aAAcC,EAFtC,EAEsCA,aAGhD,OAAOb,EAAac,0BAA0B,CAG5CZ,aAAcS,EAAuB5C,MACnC,EACA4C,EAAuBI,YAAY,MAErCpkB,EAAGikB,EACHhkB,EAAGikB,EACHV,UAAWO,EAAKA,KAAKP,UACrBC,WAAYM,EAAKA,KAAKN,WACtB5B,OAAQA,QA1Dd,KAAawB,EACJK,MAAoC,GCsCtC,IAAMW,EAAb,WAYE,WAAY1d,GAKR,yBAhBI2d,aAgBL,OAfKC,oBAeL,OAdKC,UAcL,OATKC,YAA4B,GASjC,KAPKC,aAOL,MACOC,EAA+Bhe,EAA/Bge,OAAQC,EAAuBje,EAAvBie,cAAetb,EAAQ3C,EAAR2C,IAE/BpF,KAAKwgB,QAAiB/d,EAAMkb,OAC5B3d,KAAKogB,QAAiBK,EACtBzgB,KAAKqgB,eAAiBK,EACtB1gB,KAAKsgB,KAAiBlb,EANrB,oBAQmBpF,KAAKogB,SARxB,IAQD,2BAAkC,CAAC,IAAxBO,EAAuB,QAC1BC,EAAiB5gB,KAAK6gB,UAAUF,GAEtC3gB,KAAKugB,YAAL,sBAAuBvgB,KAAKugB,aAA5B,YAA4CK,KAX7C,8BAcD5gB,KAAK8gB,oBA/BT,gEAkCuB,IAAD,gBACS9gB,KAAKugB,aADd,IAClB,2BAA6C,SAC9BxT,OAAOgU,gBAFJ,iCAlCtB,yCAyCI/gB,KAAK8gB,oBAEL,IAH6B,EAGzBziB,EAAqB,GAHI,cAKT2B,KAAKogB,SALI,IAK7B,2BAAkC,CAAC,IAAxBO,EAAuB,QAChCtiB,EAAOoR,KAAK,CACV1C,OAAa,IAAIE,EAAO,CAAEC,KAAMyT,EAAMzT,OACtC8T,UAAaL,EAAMzT,KACnB+T,aAAa,KATY,kDAaRjhB,KAAKugB,aAbG,yBAalBW,EAbkB,QAcH7iB,EAAO8iB,MAAK,SAAA9hB,GAAG,OAAIA,EAAI2hB,YAAcE,EAAOF,aAEpDjU,OAAOtB,SAASyV,EAAOnU,QACvCmU,EAAOnU,OAAOoB,iBAJhB,2BAAwC,IAbX,8BAoB7B,OAAO9P,IA5DX,gCA+DoBsiB,GAA4C,IAAD,SACrDpO,EAAwB,GASxB6O,EAAkC,GAVmB,cAgBzCT,EAAMU,SAhBmC,yBAgBhDhiB,EAhBgD,QAiBzD,IAAKA,EAAIiiB,IAAK,qBAGe,EAAKjB,gBAHpB,IAGZ,2BAAgD,CAAC,IAAtCkB,EAAqC,QAC9C,GAA0B,SAAtBA,EAAaC,MAAmBD,EAAaP,YAAcL,EAAMzT,KAWnE,OAVAqU,EAAaE,QAAQ,CACnBvW,KAAM,IAAI5F,EAAK,CACXxJ,EAAQuD,EAAIvD,EACZC,EAAQsD,EAAItD,EACZ0J,MAAQpG,EAAIoG,MACZC,OAAQrG,EAAIqG,SAEhBgc,WAAYC,EAAaC,qBAAqBviB,EAAIqiB,cAGpD,8BAfQ,8BAmBZ,MAAM,IAAIxT,MAAJ,mBAAuByS,EAAMzT,KAA7B,2BAAsD7N,EAAIvD,EAA1D,mBAAwEuD,EAAItD,EAA5E,uDApCiD,QAuCjB,EAAKukB,KAAKzK,MAAMgM,QAAQxiB,EAAIiiB,KAA5DQ,EAvCiD,EAuCjDA,YAAaC,EAvCoC,EAuCpCA,eAvCoC,cA0C1B1iB,EAAIqiB,YAAc,IA1CQ,IA0CzD,2BAAsD,CAAC,IAAD,UAAzCxU,EAAyC,EAAzCA,KAAMzQ,EAAmC,EAAnCA,MACjBslB,EAAe7U,GAAQzQ,GA3CgC,8BA8CzD,IAAMulB,EAAa,2BACdD,GAP6C,IAW9CE,EAAwB,KAItBpC,EAAO,CACX/jB,EAJMuD,EAAIvD,EAKVC,EAJMsD,EAAItD,EAAI+lB,EAAYvC,WAK1BM,KAAgBiC,EAChBI,WAAgB,EAAK5B,KAAKzK,MAAMsM,iBAAiB9iB,EAAIiiB,OAAQ,EAC7DA,IAAgBjiB,EAAIiiB,IACpBS,eAAgBC,GAGZI,EAAWJ,EAAc9U,KAE/B,QAAiB5Q,IAAb8lB,EACF,MAAM,IAAIlU,MAAM,mCAGlB,IAAMmU,EAAmB,EAAKhC,eAAec,MAAK,SAAA9hB,GAChD,MAAiB,WAAbA,EAAImiB,KACCniB,EAAI6N,OAASkV,EAGL,UAAb/iB,EAAImiB,MACCniB,EAAIijB,MAAMxT,SAASsT,MAM9B,QAAyB9lB,IAArB+lB,EACF,MAAM,IAAInU,MAAJ,+BAAmCkU,IAG3C,GAA8B,WAA1BC,EAAiBb,MACnB,GAAIa,EAAiBnV,OAASkV,EAAU,CACtC,IAAMG,EAAYpD,EAAaqD,kBAAkB,CAAE7E,OAAQ,EAAK6C,QAASX,SAEzEoC,EAASI,EAAiBI,gBAAgBF,EAAWP,EAAe,CAClEhB,UAAWL,EAAMzT,KACjBpR,EAAG+jB,EAAK/jB,EACRC,EAAG8jB,EAAK9jB,SAGuB,UAA1BsmB,EAAiBb,MAGtBa,EAAiBC,MAAMxT,SAASsT,IAClChB,EAAe3R,KAAK,CAClBvC,KAAMkV,EACNvC,KAAMA,EAGN6C,MAAO7C,EAAK/jB,EAAIuD,EAAIoG,MACpBkd,MAAO9C,EAAK9jB,EAAIsD,EAAIqG,SAKtBuc,IACFA,EAAOnmB,EAAI+jB,EAAK/jB,EAChBmmB,EAAOlmB,EAAI8jB,EAAK9jB,EAEhBwW,EAAQ9C,KAAK,CACX1C,OAAWkV,EACXjB,UAAWL,EAAMzT,SArGvB,2BAAiC,IAhB0B,8BA+H3D,IAFA,IAAMkM,EAAO,IAAI4F,EAEjB,MAA4BoC,EAA5B,eAA4C,CAAvC,IAAMwB,EAAa,KACtBxJ,EAAK9K,IAAIsU,EAAcF,MAAOE,EAAcD,MAAO,CACjDtjB,IAASujB,EACTC,SAAS,IAOb,cAAkBzB,EAAlB,eAAkC,CAA7B,IAAM/hB,EAAG,KACNhB,EAAS+a,EAAK7E,IAAIlV,EAAIqjB,MAAOrjB,EAAIsjB,OAEvC,IAAKtkB,EAAU,MAAM,IAAI6P,MAAM,OAI/B,IAFoB7P,EAAZwkB,QAER,CAMA,IAbgC,EAa5BtB,EAAgD,KAbpB,cAeRvhB,KAAKqgB,gBAfG,IAehC,2BAA6C,CAAC,IAAnCyC,EAAkC,QAC3C,GAAuB,UAAnBA,EAAUtB,MACRsB,EAAUR,MAAMxT,SAASzP,EAAI6N,MAAO,CACtCqU,EAAeuB,EAEf,QApB0B,8BAyBhC,GAAqB,OAAjBvB,EACF,MAAM,IAAIrT,MAAM,WAQlB,IAHA,IAAMmJ,EAAyB,CAAChY,GAC1B0jB,EAA6B,CAAC1jB,GAE7B0jB,EAAUvjB,OAAS,GASxB,IARA,IAAMwjB,EAAUD,EAAUE,MAQ1B,MAPa,CACX,CAAE,EAAI,GACN,EAAE,EAAI,GACN,CAAE,EAAI,GACN,CAAE,GAAI,IAGR,eAA6B,CAAC,IAAD,sBAAjB3iB,EAAiB,KAAbC,EAAa,KACrBlC,EAAS+a,EAAK7E,IAAIyO,EAAQN,MAAQpiB,EAAI0iB,EAAQL,MAAQpiB,GAE5D,GAAKlC,EAAL,CAH2B,IAKd6kB,EAAsB7kB,EAA3BgB,IAA2BhB,EAAZwkB,SAGnBxL,EAAMvI,SAASoU,IACf3B,EAAae,MAAMxT,SAASoU,EAAShW,QACvCmK,EAAM5H,KAAKyT,GACXH,EAAUtT,KAAKyT,KAOrB,cAAkB7L,EAAlB,eAAyB,CAApB,IAAMhY,EAAG,KACZ+Z,EAAK7E,IAAIlV,EAAIqjB,MAAOrjB,EAAIsjB,OAAQE,SAAU,EAQ5C,IAHA,IAAIM,EAAW9d,OAAO+d,kBAClBC,EAAWhe,OAAO+d,kBAEtB,MAAkB/L,EAAlB,eAAyB,CAApB,IAAMhY,EAAG,KACZ8jB,EAAWrmB,KAAKiH,IAAIof,EAAU9jB,EAAIwgB,KAAK/jB,GACvCunB,EAAWvmB,KAAKiH,IAAIsf,EAAUhkB,EAAIwgB,KAAK9jB,GAGzC,IAAMunB,EAAc/B,EAAagC,qBAAqB,CACpDvC,UAAWL,EAAMzT,KACjBpR,EAAWqnB,EACXpnB,EAAWsnB,IAGbC,EAAYxnB,EAAIqnB,EAChBG,EAAYvnB,EAAIsnB,EAEhB,cAAkBhM,EAAlB,eAAyB,CAApB,IAAMhY,EAAG,KACNkjB,EAAYpD,EAAaqD,kBAAkB,CAAE7E,OAAQ3d,KAAKwgB,QAASX,KAAMxgB,EAAIwgB,OAC7E2D,EAAYjC,EAAakB,gBAAgBF,GAE/Ce,EAAY7X,SAAS+X,GAErBA,EAAU1nB,EAAIuD,EAAIwgB,KAAK/jB,EAAIwnB,EAAYxnB,EACvC0nB,EAAUznB,EAAIsD,EAAIwgB,KAAK9jB,EAAIunB,EAAYvnB,EAGzCwW,EAAQ9C,KAAK,CACX1C,OAAWuW,EACXtC,UAAWL,EAAMzT,QAIrB,OAAOqF,IA5SX,sCAgTI,OAAOvS,KAAKugB,gBAhThB,KC3BaoB,EAAb,WASE,cAOI,IAPgB8B,EAOjB,EAPWC,KAAY1P,EAOvB,EAPuBA,SAAU2P,EAOjC,EAPiCA,cAAejD,EAOhD,EAPgDA,cAAe/C,EAO/D,EAP+DA,OAO/D,yBAfKiG,gBAeL,OAdKC,iBAcL,OAbKC,eAaL,OAZKC,cAYL,OAXKvD,aAWL,OATH3K,WASG,OA4BKmO,MAAuC,GA3B7ChkB,KAAK6V,MAAQ,IAAIoO,EAAY,CAAER,OAAME,kBACrC3jB,KAAK8jB,UAAY9P,EACjBhU,KAAK4jB,WAAa5jB,KAAK6V,MAAMqO,eAC7BlkB,KAAK6jB,YAAc7jB,KAAK6V,MAAMsO,gBAC9BnkB,KAAKwgB,QAAU7C,EAEf3d,KAAK+jB,SAAW,IAAI5D,EAAoB,CACtCM,OAAQzgB,KAAK6V,MAAMuO,qBACnB1D,cAAeA,EACftb,IAAKpF,KACL2d,OAAQ,OA3Bd,4DAkCkBqD,GACd,IAAML,EAAQ3gB,KAAK6V,MAAMwO,SAASrD,GAElC,GAAmB,UAAfL,EAAMa,KACR,OAAOb,EAAM/P,MAGf,MAAM,IAAI1C,MAAM,sBAzCpB,6CA8CgCoW,GAe5B,IAAMpc,EAAOoc,EAAOrkB,WAMpB,OAJKD,KAAKgkB,MAAM9b,KACdlI,KAAKgkB,MAAM9b,GAAQlI,KAAKukB,iBAAiBD,IAGpCtkB,KAAKgkB,MAAM9b,KAnEtB,uCAsE2Boc,GACvB,IADiD,EAC7CE,EAAyB,GADoB,cAKzBxkB,KAAK6V,MAAM4O,iBALc,IAKjD,2BAAoD,CAAC,IAA1CzD,EAAyC,QAC5CL,EAAQ3gB,KAAK6V,MAAMwO,SAASrD,GAClC,GAAmB,UAAfL,EAAMa,KAAV,CAEA,IAAMkD,EAAgBC,IAAcC,OAAO,CACzCnf,MAAO3I,KAAK4Z,KAAK4N,EAAO7e,OACxBC,OAAQ5I,KAAK4Z,KAAK4N,EAAO5e,UAGrB0U,EAAYpa,KAAK4jB,WACjBvJ,EAAara,KAAK6jB,YAElBgB,EAASP,EAAOxoB,EAAIse,EACpB0K,EAASR,EAAOvoB,EAAIse,EAE1B,GAAIwK,IAAW/nB,KAAKC,MAAM8nB,IAAWC,IAAWhoB,KAAKC,MAAM+nB,GACzD,MAAM,IAAI5W,MAAM,oEAGlB,IAAK,IAAI+J,EAAIqM,EAAOxoB,EAAIse,EAAWnC,EAAIqM,EAAOje,MAAQ+T,EAAWnC,IAC/D,IAAK,IAAIC,EAAIoM,EAAOvoB,EAAIse,EAAYnC,EAAIoM,EAAOhe,OAAS+T,EAAYnC,IAAK,CACvE,IAAM2H,EAAOc,EAAMvH,KAAK7E,IAAI0D,EAAGC,GAE/B,GAAK2H,EAAL,CAEA,IAAMkF,EAAM5F,EAAaqD,kBAAkB,CAAE7E,OAAQ3d,KAAKwgB,QAASX,SAC7DvS,EAAS,IAAIN,IAAO+X,GAK1BzX,EAAOxR,EAAK+jB,EAAK/jB,EAAIwoB,EAAOxoB,EAAI6kB,EAAMhW,OAAO7O,EAC7CwR,EAAOvR,EAAK8jB,EAAK9jB,EAAIuoB,EAAOvoB,EAAI4kB,EAAMhW,OAAO5O,EAE7CiE,KAAK8jB,UAAUkB,OAAO1X,EAAQoX,GAAe,IAIjD,IAAMO,EAAc,IAAIhY,EAAO,CAC7Bc,QAAS2W,EACTxX,KAAM8T,IAGRiE,EAAYnpB,EAAIwoB,EAAOxoB,EACvBmpB,EAAYlpB,EAAIuoB,EAAOvoB,EACvBkpB,EAAYxf,MAAQ6e,EAAO7e,MAC3Bwf,EAAYvf,OAAS4e,EAAO5e,OAE5B8e,EAAW/U,KAAK,CACd1C,OAAQkY,EACRjE,YACAC,aAAa,MAxDgC,8BA+DjD,IA/DiD,EA+D3CiE,EAAellB,KAAK+jB,SAASoB,mBA/Dc,cAiEvBD,GAjEuB,IAiEjD,2BAAwC,SAC1BnY,OAAOwD,OAAS,GAlEmB,8BAqEjD,cAAwBiU,EAAxB,eAAoC,CAAhB,KACRzX,OAAOwD,OAAS,EAK5B,OAFAiU,EAAU,sBAAOA,GAAP,YAAsBU,MA/IpC,0CAqJIllB,KAAK+jB,SAASjD,sBArJlB,sCAyJI,OAAO9gB,KAAK+jB,SAASqB,mBAzJzB,4CA4JqC1D,GACjC,IAAMrjB,EAAoC,GAE1C,QAAmB/B,IAAfolB,EACF,MAAO,GAJ4H,oBAOnHA,GAPmH,IAOrI,2BAA8B,CAAC,IAApBriB,EAAmB,QAC5BhB,EAAOgB,EAAI6N,MAAQ7N,EAAI5C,OAR4G,8BAWrI,OAAO4B,MAvKX,KCMa4lB,EAAb,WAUE,WAAYxhB,GAGR,yBAZIoT,WAYL,OAXK+N,gBAWL,OAVKC,iBAUL,OATKzD,aASL,OARKiF,eAQL,OALHlD,iBAA8C,GAK3C,IACOsB,EAAwBhhB,EAAxBghB,KAAME,EAAkBlhB,EAAlBkhB,cAEd3jB,KAAK6V,MAAQ4N,EACbzjB,KAAK4jB,WAAmB5jB,KAAK6V,MAAMyJ,UACnCtf,KAAK6jB,YAAmB7jB,KAAK6V,MAAM0J,WACnCvf,KAAKmiB,iBAAmBniB,KAAKslB,6BAC7BtlB,KAAKqlB,UAAmBrlB,KAAKulB,aAAa5B,EAAe3jB,KAAK6V,OAC9D7V,KAAKogB,QAAmBpgB,KAAKwlB,iBArBjC,0DAwBgBlE,GACZ,OAAOthB,KAAKmiB,iBAAiBb,KAAQ,IAzBzC,qCA6BI,OAAOthB,KAAK4jB,aA7BhB,sCAiCI,OAAO5jB,KAAK6jB,cAjChB,oCAqCI,OAAO7jB,KAAKqlB,YArChB,mCAwCuB1B,EAAuBD,GAC1C,IADsE,EAChE+B,EAAsB,GAD0C,cAGoD/B,EAAK+B,UAHzD,IAGtE,2BAAyI,CAAC,IAAD,UAArHC,EAAqH,EAA5HC,MAAkCzY,EAA0F,EAA1FA,KAAM0Y,EAAoF,EAApFA,SAAUC,EAA0E,EAA1EA,YAAaC,EAA6D,EAA7DA,WAAYvG,EAAiD,EAAjDA,WAAYD,EAAqC,EAArCA,UAAWyG,EAA0B,EAA1BA,MACvGC,EAAsBH,EAAcC,GAAevG,EAAaD,GAChEQ,EACJ,IAAImG,IAAItC,EAAgB,IAAM+B,EAA2B,YAAYpU,KAAK4L,MAAM,WAAW1d,OAAS,GAEtGimB,EAAShW,KAAK,CACZvC,OACAwY,4BACA5F,yBACAgG,aACAD,cACAvG,YACAC,aACAwG,QAEAG,SAAUN,EACVO,OAAUP,EAAWI,KAnB6C,8BAuBtE,OAAOP,IA/DX,mDAyEI,IAP+D,EAOzDW,EAA6C,GAPY,cASzCpmB,KAAK6V,MAAM4P,UAT8B,IAS/D,2BAA2C,CAAC,IAAjCY,EAAgC,QACzC,GAAIA,EAAQN,MAAO,CAAC,IAAD,gBACqBM,EAAQN,OAD7B,IACjB,2BAAqD,CAAC,IAA3CO,EAA0C,QAC9CA,EAAwBC,cAIzBD,EAAwBC,YAAYlF,QAAQ7hB,OAAS,IACvD4mB,EACEE,EAAwBlZ,GAAKiZ,EAAQT,WACnC,KATS,iCAV0C,8BAyB/D,OAAOQ,IA3FX,sCA+FI,OAAO1oB,OAAOC,KAAKqC,KAAKogB,WA/F5B,qCAmGI,OAAOpgB,KAAKwmB,oBAAoBxmB,KAAK6V,MAAM4K,UAnG/C,+BAsGWO,GACP,OAAOhhB,KAAKogB,QAAQY,KAvGxB,0CA8G8ByF,GAC1B,IADkG,EAC9FpoB,EAAwD,GADsC,cAG9EooB,GAH8E,IAGlG,2BAA0B,CAAC,IAAhB9F,EAAe,QACL,UAAfA,EAAMa,KACRnjB,EAAM,sBAAOA,GAAP,YAAkB2B,KAAKwmB,oBAAoB7F,EAAMF,UAEvDpiB,EAAOoR,KAAKkR,IAPkF,8BAWlG,OAAOtiB,IAzHX,2CA6HI,IAD2C,EACrCqoB,EAAY1mB,KAAK2mB,eACjBzB,EAAuC,GAFF,cAIvBwB,GAJuB,IAI3C,2BAA+B,CAAC,IAArB/F,EAAoB,QACV,gBAAfA,EAAMa,MACR0D,EAAazV,KAAKkR,IANqB,8BAU3C,OAAOuE,IAtIX,uCA0II,IAD8D,EACxD7mB,EAAgD,GAChDoiB,EAASzgB,KAAK2mB,eAF0C,cAI1ClG,GAJ0C,IAI9D,2BAA4B,CAAC,IAAlBE,EAAiB,QAC1B,GAAmB,cAAfA,EAAMa,KAAsB,CAC9B,IAAMpI,EAAOpZ,KAAK4mB,UAAUjG,GAE5BtiB,EAAOsiB,EAAMzT,MAAQ,CACnBsU,KAAM,QACNpI,OACAzO,OAAQ,IAAI/K,EAAQ+gB,EAAMkG,QAASlG,EAAMmG,cAEnB,gBAAfnG,EAAMa,OACfnjB,EAAOsiB,EAAMzT,MAAQlN,KAAK+mB,cAAcpG,KAdkB,8BAkB9D,OAAOtiB,IA3JX,oCA8JgBsiB,GACZ,IADuD,EACjDU,EAAUV,EAAMU,QAChBzQ,EAAyB,GAFwB,cAIrCyQ,GAJqC,IAIvD,2BAA2B,CAAC,IAAjBhiB,EAAgB,QACpBA,EAAIiiB,KACP1Q,EAAMnB,KAAK,CACTvE,KAAM,IAAI5F,EAAK,CACbxJ,EAAGuD,EAAIvD,EACPC,EAAGsD,EAAItD,EACP0J,MAAOpG,EAAIoG,MACXC,OAAQrG,EAAIqG,SAEdgc,WAAYC,EAAaC,qBAAqBviB,EAAIqiB,aAAe,MAbhB,8BAkBvD,MAAO,CACLF,KAAO,QACP5Q,MAAOA,EACPjG,OAAQ/K,EAAQyC,QAnLtB,gCAuLoBse,GAChB,IADuD,EACjDtiB,EAAS,IAAI2gB,EACXgI,EAAWrG,EAAXqG,OAF+C,cAOnCA,GAPmC,IAOvD,2BACE,IAD2B,IAAlBC,EAAiB,QACjBhP,EAAI,EAAGA,EAAIgP,EAAMxD,KAAKjkB,OAAQyY,IAAK,CAC1C,IAAMqJ,EAAM2F,EAAMxD,KAAKxL,GAEvB,GAAY,IAARqJ,EAAJ,CACA,GAAIA,EAAM,IAAU,MAAM,IAAIpT,MAAM,OAEpC,IAAMgZ,EAAYjP,EAAIgP,EAAMxhB,MACtB0hB,EAAWrqB,KAAKC,MAAMkb,EAAIgP,EAAMxhB,OAElC2hB,MAAMzG,EAAMkG,WAAUlG,EAAMkG,QAAU,GACtCO,MAAMzG,EAAMmG,WAAUnG,EAAMmG,QAAU,GAE1C,IAAMO,EAAU1G,EAAMkG,QAAU7mB,KAAK4jB,WAC/B0D,EAAU3G,EAAMmG,QAAU9mB,KAAK6jB,YAErC,GAAIwD,IAAYvqB,KAAKC,MAAMsqB,IAAYC,IAAYxqB,KAAKC,MAAMuqB,GAC5D,MAAM,IAAIpZ,MAAM,6BAGlB,IAAMqZ,EAAWL,EAAWD,EAAMnrB,EAAIurB,EAChCG,EAAWL,EAAWF,EAAMlrB,EAAIurB,EApBI,EAsBFtnB,KAAK6hB,QAAQP,GAA7CQ,EAtBkC,EAsBlCA,YAAaC,EAtBqB,EAsBrBA,eAIrB1jB,EAAOiQ,IAAIiZ,EAAUC,EAAU,CAC7B1rB,EAAgByrB,EAAWvnB,KAAK4jB,WAAcjD,EAAMkG,QACpD9qB,EAAgByrB,EAAWxnB,KAAK6jB,YAAclD,EAAMmG,QACpDjH,KAAgBiC,EAChBI,WAAgBliB,KAAKynB,cAAcnG,GACnCS,eAAgBA,EAChBT,IAAgBA,MAxCiC,8BA6CvD,OAAOjjB,IApOX,8BAuOUijB,GAGL,IAAD,gBACqGthB,KAAKqlB,WAD1G,mCACaa,EADb,EACaA,SAAUC,EADvB,EACuBA,OAAQrG,EAD/B,EAC+BA,uBAAwBgG,EADvD,EACuDA,WAAYxG,EADnE,EACmEA,UAAWC,EAD9E,EAC8EA,WAAYwG,EAD1F,EAC0FA,MACxF,GAAIzE,GAAO4E,GAAY5E,EAAM6E,EAAQ,CACnC,IAAMuB,EAAgBpG,EAAM4E,EACtByB,EAAgB7B,EAAaxG,EAK7BwC,EAAc,CAClBhC,yBACAC,aALS2H,EAAgBC,EAMzB3H,aALQljB,KAAKC,MAAM2qB,EAAgBC,GAMnCrI,YACAC,aACAwC,eAAgBgE,GAGdhE,EAA6C,GAEjD,GAAIgE,EAAO,CACT,IAAM6B,EAAkB7B,EAAM5E,MAAK,SAAAtB,GAAI,OAAIyB,IAAQ4E,EAAWrG,EAAKzS,MAEnE,GAAIwa,GAAmBA,EAAgBlG,WAAY,CAAC,IAAD,gBACnBkG,EAAgBlG,YADG,IACjD,2BAA0D,CAAC,IAAD,UAA7CxU,EAA6C,EAA7CA,KAAMzQ,EAAuC,EAAvCA,MACjBslB,EAAe7U,GAAQzQ,GAFwB,gCAOrD,MAAM,CAAN,EAAO,CACLqlB,cACAC,qBA/BN,2BAAqH,CAAC,IAAD,yCADrH,8BAqCA,MAAM,IAAI7T,MAAM,+CA/QpB,iDAkRoCpS,EAAWC,GAAoB,IAAD,OAC9D,OAAOiE,KAAKykB,gBACTrf,KAAI,SAAA4b,GAAS,OAAI,EAAK6G,kCAAkC/rB,EAAGC,EAAGilB,MAC9Dhd,QAAO,SAAAlI,GAAC,OAAIA,OArRnB,wDAwR2CA,EAAWC,EAAWilB,GAC7D,IAAM5G,EAAapa,KAAK4jB,WAClBvJ,EAAara,KAAK6jB,YAElBlD,EAAQ3gB,KAAKogB,QAAQY,GAE3B,MAAmB,UAAfL,EAAMa,KACDb,EAAMvH,KAAK7E,IAChBzX,KAAKC,MAAMjB,EAAIse,GACftd,KAAKC,MAAMhB,EAAIse,IAIZ,OArSX,2CAwSuBiK,GAAuB,IAAD,OACzC,OAAOpoB,EAAK4rB,aAAa9nB,KAAKykB,gBAAgBrf,KAAI,SAAA4b,GAAS,OAAI,EAAK+G,6BAA6BzD,EAAQtD,GAAWxO,iBAzSxH,mDA4S+B8R,EAActD,GASzC,IARA,IAAMjf,EAAOjF,KAAKC,MAAMunB,EAAOxoB,EAAIkE,KAAK4jB,YAClC5hB,EAAOlF,KAAKC,MAAMunB,EAAOvoB,EAAIiE,KAAK6jB,aAElChiB,EAAQ/E,KAAK4Z,KAAK4N,EAAOje,MAASrG,KAAK4jB,YACvC9hB,EAAQhF,KAAK4Z,KAAK4N,EAAOhe,OAAStG,KAAK6jB,aAEzCjN,EAAoB,GAEf9a,EAAIiG,EAAMjG,GAAK+F,EAAO/F,IAC7B,IAAK,IAAIC,EAAIiG,EAAMjG,GAAK+F,EAAO/F,IAAK,CAClC,IAAM8jB,EAAO7f,KAAK6nB,kCAChB/rB,EAAIkE,KAAK4jB,WACT7nB,EAAIiE,KAAK6jB,YACT7C,GAGEnB,GAAQA,EAAKqC,YACftL,EAAUnH,KAAK,IAAInK,EAAK,CACtBxJ,EAAGA,EAAIkE,KAAK4jB,WACZ7nB,EAAGA,EAAIiE,KAAK6jB,YACZpe,MAAOzF,KAAK4jB,WACZle,OAAQ1F,KAAK6jB,eAMrB,OAAO,IAAIlT,EAAUiG,OAxUzB,KCnBMoR,GAAe,GCkBfC,GAAc,IAAI7b,OAAY9P,EAZnB,IAAImhB,EAAS,CACxBrc,MAAO,EACP8K,YAAa,IACbC,aAAc,IACdkO,WAAY,GACZD,UAAW,GACX8N,WAAY,GACZxZ,MAAO,CACLgQ,KAAM,GAERf,OAAQ,IDad,WAKE,WAAYwK,GAA2B,IAAD,gCAJtCC,YAIsC,OAHtCC,kBAGsC,OAFtCC,2BAEsC,OAS9BC,qBAAuB,SAACC,GAC9B,cAAkB9qB,OAAOC,KAAK6qB,GAA9B,eAA0C,CAArC,IACGC,EAAWD,EADL,MAGZ,GAAsB,cAAlBC,EAASjH,KAAsB,CAAC,IAAD,gBACdiH,EAASC,OADK,IACjC,2BAAmC,CAAC,IAAzBC,EAAwB,QACjC,EAAKP,OAAO3mB,IAAIknB,IAFe,oCAKjC,EAAKP,OAAO3mB,IAAIgnB,EAASE,MAI7B,EAAKP,OAAOQ,KAAK,EAAKC,uBAtBc,KA0B9BA,qBAAuB,WAG7B,IAFA,IAAIC,EAAsC,GAE1C,MAAuBprB,OAAOC,KAAKqqB,IAAnC,eAAkD,CAA7C,IAAMS,EAAQ,KACXM,EAAiBN,EACjB9E,EAAgB8E,EAASO,UAAU,EAAGP,EAASvI,YAAY,MAEjE,GAA0C,YAAtC8H,GAAae,GAAgBvH,KAAoB,CACnD,IAAMyH,EAAc,IAAIhF,EAAY,CAClCR,KAAM,EAAKhE,YAAYsJ,GACvBpF,kBAGFmF,EAA4BA,EAA0BxpB,OACpD2pB,EAAYC,cAAc9jB,KAAI,SAAAihB,GAAO,OAAIA,EAAQvG,4BAdpB,oBAmBCgJ,GAnBD,IAmBnC,2BAA+D,CAAC,IAArDK,EAAoD,QACxD,EAAKf,OAAOI,UAAUW,IACzB,EAAKf,OAAO3mB,IAAI0nB,IArBe,8BAyBnC,EAAKf,OAAOQ,KAAK,EAAKQ,gBAnDc,KA0E9BA,cAAgB,WACtB,EAAKf,cAAe,EADQ,oBAGL,EAAKC,uBAHA,IAG5B,2BAAmD,EACjDe,EADiD,YAHvB,8BAO5B,EAAKf,sBAAwB,IAhF7BtoB,KAAKsoB,sBAAwB,GAC7BtoB,KAAKooB,OAAS,IAAIkB,IAClBtpB,KAAKqoB,cAAe,EAEpBroB,KAAKuoB,qBAAqBJ,GAV9B,wDA2DmD9I,GAAoE,IAAD,OAC5GoJ,EAAWT,GAAa3I,GAE9B,GAAsB,UAAlBoJ,EAASjH,KACX,OAAO,IAAI+H,MAAMd,EAASE,MACrB,GAAsB,cAAlBF,EAASjH,KAClB,OAAOiH,EAASC,MAAMtjB,KAAI,SAAAujB,GAAI,OAAI,EAAKP,OAAOI,UAAUG,GAAM5a,WACzD,GAAsB,UAAlB0a,EAASjH,KAClB,OAAOxhB,KAAKooB,OAAOI,UAAUC,EAASE,MAAM5a,QACvC,GAAsB,gBAAlB0a,EAASjH,KAClB,MAAM,IAAItT,MAAM,aACX,GAAsB,YAAlBua,EAASjH,KAClB,OAAOxhB,KAAKooB,OAAOI,UAAUC,EAASE,MAAMlF,KACvC,GAAsB,cAAlBgF,EAASjH,KAClB,OAAOxhB,KAAKooB,OAAOI,UAAUC,EAASE,MAAMlF,KAG9C,MAAM,IAAIvV,MAAM,YA5EpB,qCAyFiBmb,GACTrpB,KAAKqoB,aACP1pB,YAAW,WACT0qB,MACC,GAEHrpB,KAAKsoB,sBAAsB7Y,KAAK4Z,OA/FtC,KCbc,CAAmB,MAEmBhd,KAG7C,SAASmd,GAAK/mB,GACnB,IAAMgnB,EAAYC,iBAAuB,MAYzC,OAVAC,qBAAU,WACR1B,GAAY2B,SAASH,EAAUzG,SAE/BiF,GAAY4B,cAIX,IAID,oCACE,yBAAKC,IAAKL,IACV,4BAAQM,QAAS,kBAAM9B,GAAYlc,eAAnC,eACA,4BAAQge,QAAS,kBAAM9B,GAAY4B,cAAnC,iBCfSG,OAvBf,WACE,OACE,yBAAKC,UAAU,OAAf,mBAgBE,kBAAC,GAAD,QCXcC,QACW,cAA7B9Y,OAAOC,SAAS8Y,UAEe,UAA7B/Y,OAAOC,SAAS8Y,UAEhB/Y,OAAOC,SAAS8Y,SAASC,MACvB,2DCZNC,IAASrF,OACP,kBAAC,IAAMsF,WAAP,KACE,kBAAC,GAAD,OAEFjO,SAAS2B,eAAe,SD8HpB,kBAAmBuM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACrpB,GACND,QAAQC,MAAMA,EAAMspB,c","file":"static/js/main.448a8be7.chunk.js","sourcesContent":["export const EPSILON = 0.0000001;\n\nexport const epsEqual = (x: number, y: number) => {\n  return Math.abs(x - y) < EPSILON;\n}\n\nexport const epsGreaterThan = (x: number, y: number) => {\n  return (x + EPSILON - y) > 0;\n}\n\nexport const epsLessThan = (x: number, y: number) => {\n  return (x - EPSILON - y) < 0;\n}","let lastUsedId = 0;\n\nexport const getUniqueID = () => {\n  return lastUsedId++;\n};\n\nexport class Util {\n  static MinBy<T>(list: T[], fn: (T: T) => number): T | undefined {\n    let lowestT    : T | undefined = undefined;\n    let lowestValue: number | undefined = undefined;\n\n    for (const item of list) {\n      const value = fn(item);\n\n      if (lowestValue === undefined || value < lowestValue) {\n        lowestT = item;\n        lowestValue = value;\n      }\n    }\n\n    return lowestT;\n  }\n\n  static MaxBy<T>(list: T[], fn: (T: T) => number): T | undefined {\n    let highestT    : T | undefined = undefined;\n    let highestValue: number | undefined = undefined;\n\n    for (const item of list) {\n      const value = fn(item);\n\n      if (highestValue === undefined || value > highestValue) {\n        highestT = item;\n        highestValue = value;\n      }\n    }\n\n    return highestT;\n  }\n\n  static RandRange(low: number, high: number): number {\n    return Math.floor(Math.random() * (high - low) + low);\n  }\n\n  public static SortByKey<T>(array: T[], key: (x: T) => number): T[] {\n    return array.sort((a, b) => {\n      return key(a) - key(b)\n    });\n  }\n\n  public static ReplaceAll(\n    str   : string,\n    mapObj: { [key: string]: string }\n  ): string {\n    const re = new RegExp(Object.keys(mapObj).join('|'), 'gi')\n\n    return str.replace(re, matched => {\n      return mapObj[matched.toLowerCase()]\n    });\n  }\n\n  public static Debounce<F extends (...args: any[]) => void>(\n    func: F,\n    waitMilliseconds = 50,\n    options = {\n      isImmediate: false,\n    }\n  ): F {\n    let timeoutId: any; // types are different on node vs client, so we have to use any.\n\n    const result = (...args: any[]) => {\n      const doLater = () => {\n        timeoutId = undefined;\n        if (!options.isImmediate) {\n          func.apply(this, args);\n        }\n      }\n\n      const shouldCallNow = options.isImmediate && timeoutId === undefined;\n\n      if (timeoutId !== undefined) {\n        clearTimeout(timeoutId);\n      }\n\n      timeoutId = setTimeout(doLater, waitMilliseconds);\n\n      if (shouldCallNow) {\n        func.apply(this, args);\n      }\n    }\n\n    return result as any;\n  }\n\n  public static FormatDate(d: Date): string {\n    const monthName = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ][d.getMonth()]\n\n    return `${monthName} ${d.getDate()}, ${('00' + d.getHours()).substr(-2)}:${(\n      '00' + d.getMinutes()\n    ).substr(-2)}:${('00' + d.getSeconds()).substr(-2)}`;\n  }\n\n  public static FlattenByOne<T>(arr: T[][]): T[] {\n    let result: T[] = []\n\n    for (const obj of arr) {\n      result = result.concat(obj)\n    }\n\n    return result\n  }\n\n  public static PadString(string: string, length: number, intersperse = \"\", character = \" \") {\n    return string + intersperse + character.repeat(length - string.length);\n  }\n}\n","import { EPSILON } from \"../epsilon_math\";\nimport { Util } from \"../util\";\n\nexport interface IVector2 {\n  x: number;\n  y: number;\n}\n\nexport class Vector2 {\n  private _x: number;\n  private _y: number;\n\n  public get x(): number { return this._x; }\n  public get y(): number { return this._y; }\n\n  constructor();\n  constructor(x: number, y: number);\n  constructor(props: { x: number, y: number });\n  constructor(propsOrX: { x: number, y: number } | number = { x: 0, y: 0 }, y?: number) {\n    if (typeof propsOrX === \"number\") {\n      this._x = propsOrX;\n      this._y = y!;\n    } else {\n      this._x = propsOrX.x;\n      this._y = propsOrX.y;\n    }\n  }\n\n  public get half(): Vector2 {\n    return new Vector2({ x: this.x / 2, y: this.y / 2 });\n  }\n\n  public static Zero: Vector2 = new Vector2(0, 0);\n  public static One: Vector2 = new Vector2(1, 1);\n\n  static IsVector2(x: any): x is Vector2 {\n    return x instanceof Vector2;\n  }\n\n  static Random(highX: number, highY: number, lowX = 0, lowY = 0) {\n    return new Vector2({\n      x: Util.RandRange(lowX, highX),\n      y: Util.RandRange(lowY, highY),\n    });\n  }\n\n  hash(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return `[${this.x}, ${this.y}]`;\n  }\n\n  invert(): Vector2 {\n    return new Vector2({\n      x: -this.x,\n      y: -this.y,\n    });\n  }\n\n  round(): Vector2 {\n    return new Vector2({\n      x: Math.round(this.x),\n      y: Math.round(this.y),\n    });\n  }\n\n  floor(): Vector2 {\n    return new Vector2({\n      x: Math.floor(this.x),\n      y: Math.floor(this.y),\n    });\n  }\n\n  taxicabDistance(p: Vector2): number {\n    return Math.abs(p.x - this.x) + Math.abs(p.y - this.y);\n  }\n\n  diagonalDistance(p: IVector2): number {\n    return Math.max(Math.abs(p.x - this.x), Math.abs(p.y - this.y));\n  }\n\n  distance(p: IVector2): number {\n    let dx = Math.abs(p.x - this.x);\n    let dy = Math.abs(p.y - this.y);\n\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  translate(p: { x: number, y: number }): Vector2 {\n    return new Vector2({\n      x: this.x + p.x,\n      y: this.y + p.y,\n    });\n  }\n\n  subtract(p: { x: number, y: number }): Vector2 {\n    return new Vector2({\n      x: this.x - p.x,\n      y: this.y - p.y,\n    });\n  }\n\n  add(p: { x: number, y: number }): Vector2 {\n    return new Vector2({\n      x: this.x + p.x,\n      y: this.y + p.y,\n    });\n  }\n\n  addX(x: number): Vector2 {\n    return new Vector2({\n      x: this.x + x,\n      y: this.y,\n    });\n  }\n\n  addY(y: number): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: this.y + y,\n    });\n  }\n\n  clampY(low: number, high: number): Vector2 {\n    let newY = this.y;\n\n    if (newY < low) { newY = low; }\n    if (newY > high) { newY = high; }\n\n    return new Vector2({\n      x: this.x,\n      y: newY,\n    });\n  }\n\n  scale(about: { x: number; y: number }, amount: { x: number; y: number }): Vector2 {\n    return new Vector2({\n      x: (this.x - about.x) * amount.x + about.x,\n      y: (this.y - about.y) * amount.y + about.y,\n    });\n  }\n\n  rotate(origin: Vector2, angle: number): Vector2 {\n    angle = angle / (180 / Math.PI);\n\n    return new Vector2({\n      x: Math.cos(angle) * (this.x - origin.x) - Math.sin(angle) * (this.y - origin.y) + origin.x,\n      y: Math.sin(angle) * (this.x - origin.x) + Math.cos(angle) * (this.y - origin.y) + origin.y,\n    });\n  }\n\n  equals(other: Vector2 | undefined): boolean {\n    if (other === undefined) {\n      return false;\n    }\n\n    return (\n      Math.abs(this.x - other.x) < EPSILON &&\n      Math.abs(this.y - other.y) < EPSILON\n    );\n  }\n\n  multiply(other: Vector2 | number): Vector2 {\n    if (typeof other === \"number\") {\n      return new Vector2({\n        x: this.x * other,\n        y: this.y * other,\n      });\n    } else {\n      return new Vector2({\n        x: this.x * other.x,\n        y: this.y * other.y,\n      });\n    }\n  }\n\n  divide(other: Vector2 | number): Vector2 {\n    if (typeof other === \"number\") {\n      return new Vector2({\n        x: this.x / other,\n        y: this.y / other,\n      });\n    } else {\n      return new Vector2({\n        x: this.x / other.x,\n        y: this.y / other.y,\n      });\n    }\n  }\n\n  toJSON(): any {\n    return {\n      __type: \"Vector2\",\n      x: this.x,\n      y: this.y,\n    }\n  }\n\n  transform(trans: Vector2, scale: number): Vector2 {\n    return new Vector2({\n      x: Math.floor((this.x - trans.x) * scale),\n      y: Math.floor((this.y - trans.y) * scale),\n    });\n  }\n\n  normalize(): Vector2 {\n    if (this.x === 0 && this.y === 0) {\n      return this;\n    }\n\n    const length = Math.sqrt(this.x * this.x + this.y * this.y);\n\n    return new Vector2({\n      x: this.x / length,\n      y: this.y / length\n    });\n  }\n\n  withX(newX: number): Vector2 {\n    return new Vector2({\n      x: newX,\n      y: this.y,\n    });\n  }\n\n  withY(newY: number): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: newY,\n    });\n  }\n\n  invertX(): Vector2 {\n    return new Vector2({\n      x: -this.x,\n      y: this.y,\n    });\n  }\n\n  lerp(other: Vector2, t: number): Vector2 {\n    if (t > 1 || t < 0) { console.error(\"Lerp t must be between 0 and 1.\"); }\n    if (t === 0) return this;\n    if (t === 1) return other;\n\n    return this.scale({ x: 0, y: 0 }, { x: 1 - t, y: 1 - t }).add(other.scale({ x: 0, y: 0 }, { x: t, y: t }))\n  }\n\n  lerp2D(other: Vector2, tx: number, ty: number): Vector2 {\n    if (tx > 1 || tx < 0 || ty > 1 || ty < 0) { console.error(\"Lerp t must be between 0 and 1.\"); }\n    return this.scale({ x: 0, y: 0 }, { x: 1 - tx, y: 1 - ty }).add(other.scale({ x: 0, y: 0 }, { x: tx, y: ty }))\n  }\n\n  coserp(other: Vector2, t: number): Vector2 {\n    t = 0.5 * (1 + Math.cos(2 * t * Math.PI));\n\n    return this.lerp(other, t);\n  }\n\n  static Deserialize(obj: any): Vector2 {\n    if (!obj.hasOwnProperty(\"x\") || !obj.hasOwnProperty(\"y\")) {\n      console.error(\"Failed deserializing point\");\n    }\n\n    return new Vector2({\n      x: obj.x,\n      y: obj.y,\n    });\n  }\n\n  static Serialize(obj: Vector2): string {\n    return JSON.stringify({ x: obj.x, y: obj.y });\n  }\n}","import { Vector2 } from \"./vector2\"\nimport { Graphics } from \"pixi.js\";\nimport { epsGreaterThan, epsLessThan } from \"../epsilon_math\";\n\nexport class Line {\n  private _x1: number;\n  private _x2: number;\n  private _y1: number;\n  private _y2: number;\n\n  public get x1(): number { return this._x1; }\n  public get x2(): number { return this._x2; }\n  public get y1(): number { return this._y1; }\n  public get y2(): number { return this._y2; }\n\n  public get start(): Vector2 { return new Vector2({ x: this.x1, y: this.y1 }); }\n  public get end()  : Vector2 { return new Vector2({ x: this.x2, y: this.y2 }); }\n\n  public get angleInDegrees(): number {\n    const cx = this._x1;\n    const cy = this._y1;\n\n    const ex = this._x2;\n    const ey = this._y2;\n\n    const dy = ey - cy;\n    const dx = ex - cx;\n\n    let theta = Math.atan2(dy, dx);\n\n    theta *= 180 / Math.PI;\n\n    if (theta < 0) {\n      theta = 360 + theta;\n    }\n\n    return theta;\n  }\n\n  public serialized = \"\";\n\n  constructor(props: { x1: number, x2: number, y1: number, y2: number } |\n                     { start: Vector2, end: Vector2 }) {\n    let x1, x2, y1, y2;\n\n    if ('x1' in props) {\n      x1 = props.x1;\n      x2 = props.x2;\n      y1 = props.y1;\n      y2 = props.y2;\n    } else {\n      x1 = props.start.x;\n      x2 = props.end.x;\n      y1 = props.start.y;\n      y2 = props.end.y;\n    }\n\n    this._x1 = x1;\n    this._y1 = y1;\n    this._x2 = x2;\n    this._y2 = y2;\n\n    this.serialized = `${ this.x1 }|${ this.x2 }|${ this.y1 }|${ this.y2 }`;\n  }\n\n  public get length(): number {\n    return Math.sqrt(\n      (this.x2 - this.x1) * (this.x2 - this.x1) +\n      (this.y2 - this.y1) * (this.y2 - this.y1)\n    );\n  }\n\n  public get isDegenerate(): boolean {\n    return this.length === 0;\n  }\n\n  public rotateAbout(origin: Vector2, angle: number): Line {\n    const start = this.start;\n    const end = this.end;\n\n    return new Line({\n      start: start.rotate(origin, angle),\n      end: end.rotate(origin, angle),\n    });\n  }\n\n  public scaleAbout(about: Vector2, amount: Vector2): Line {\n    return new Line({\n      start: this.start.scale(about, amount),\n      end: this.end.scale(about, amount),\n    });\n  }\n\n  sharesAVertexWith(other: Line): Vector2 | null {\n    if (this.start.equals(other.start)) { return this.start; }\n    if (this.start.equals(other.end))   { return this.start; }\n\n    if (this.end.equals(other.start)) { return this.end; }\n    if (this.end.equals(other.end))   { return this.end; }\n\n    return null;\n  }\n\n  static DeserializeLine(s: string): Line {\n    const [ x1, x2, y1, y2 ] = s.split(\"|\").map(x => Number(x));\n\n    return new Line({ x1, x2, y1, y2 });\n  }\n\n  isXAligned(): boolean {\n    return this.x1 === this.x2;\n  }\n\n  isYAligned(): boolean {\n    return this.y1 === this.y2;\n  }\n\n  // Must be horizontally/vertically oriented lines\n  // Does not consider intersection, only overlap\n  getOverlap(other: Line): Line | undefined {\n    const orientedByX = (\n      this.x1 === this.x2 &&\n      this.x1 === other.x1 &&\n      this.x1 === other.x2\n    );\n\n    const orientedByY = (\n      this.y1 === this.y2 &&\n      this.y1 === other.y1 &&\n      this.y1 === other.y2\n    );\n\n    if (!orientedByX && !orientedByY) { return undefined; }\n\n    const summedLength  = this.length + other.length;\n    const overallLength = new Line({\n      x1: Math.min(this.x1, other.x1),\n      y1: Math.min(this.y1, other.y1),\n      x2: Math.max(this.x2, other.x2),\n      y2: Math.max(this.y2, other.y2),\n    }).length;\n\n    if (overallLength >= summedLength) {\n      // These lines do not overlap.\n\n      return undefined;\n    }\n\n    if (orientedByX) {\n      return new Line({\n        x1: this.x1,\n        x2: this.x2,\n        y1: Math.max(this.y1, other.y1),\n        y2: Math.min(this.y2, other.y2),\n      });\n    } else /* if (orientedByY) */ {\n      return new Line({\n        y1: this.y1,\n        y2: this.y2,\n        x1: Math.max(this.x1, other.x1),\n        x2: Math.min(this.x2, other.x2),\n      });\n    }\n  }\n\n  // A----B----C----D\n  // AD - BC returns AB and CD.\n  getNonOverlappingSections(other: Line): Line[] | undefined {\n    const orientedByX = (\n      this.x1 === this.x2 &&\n      this.x1 === other.x1 &&\n      this.x1 === other.x2\n    );\n\n    const orientedByY = (\n      this.y1 === this.y2 &&\n      this.y1 === other.y1 &&\n      this.y1 === other.y2\n    );\n\n    if (!orientedByX && !orientedByY) { return undefined; }\n\n    const summedLength  = new Line(this).length + new Line(other).length;\n    const overallLength = new Line({\n      x1: Math.min(this.x1, other.x1),\n      y1: Math.min(this.y1, other.y1),\n      x2: Math.max(this.x1, other.x1),\n      y2: Math.max(this.y1, other.y1),\n    }).length;\n\n    if (overallLength >= summedLength) {\n      // These lines do not overlap.\n\n      return undefined;\n    }\n\n    if (orientedByX) {\n      return [\n        new Line({ x1: this.x1, x2: this.x2, y1: Math.min(this.y1, other.y1), y2: Math.max(this.y1, other.y1), }),\n        new Line({ x1: this.x1, x2: this.x2, y1: Math.min(this.y2, other.y2), y2: Math.max(this.y2, other.y2), }),\n      ].filter(l => !l.isDegenerate);\n    } else /* if (orientedByY) */ {\n      return [\n        new Line({ y1: this.y1, y2: this.y2, x1: Math.min(this.x1, other.x1), x2: Math.max(this.x1, other.x1), }),\n        new Line({ y1: this.y1, y2: this.y2, x1: Math.min(this.x2, other.x2), x2: Math.max(this.x2, other.x2), }),\n      ].filter(l => !l.isDegenerate);\n    }\n  }\n\n  clone(): Line {\n    return new Line({ x1: this.x1, x2: this.x2, y1: this.y1, y2: this.y2 });\n  }\n\n  translate(p: Vector2): Line {\n    return new Line({\n      x1: this.x1 + p.x,\n      x2: this.x2 + p.x,\n\n      y1: this.y1 + p.y,\n      y2: this.y2 + p.y,\n    });\n  }\n\n  transform(trans: Vector2, scale: number): Line {\n    return new Line({\n      start: this.start.transform(trans, scale),\n      end: this.end.transform(trans, scale),\n    });\n  }\n\n  toJSON(): any {\n    return {\n      x1     : this.x1,\n      x2     : this.x2,\n      y1     : this.y1,\n      y2     : this.y2,\n      reviver: \"Line\",\n    };\n  }\n\n  toString(): string {\n    return `Line: [(${ this.x1 },${ this.y1 }) -> (${ this.x2 },${ this.y2 })]`;\n  }\n\n  equals(other: Line | null) {\n    if (other === null) { return false; }\n\n    return (\n      this.x1 === other.x1 &&\n      this.x2 === other.x2 &&\n      this.y1 === other.y1 &&\n      this.y2 === other.y2\n    ) || (\n      this.x1 === other.x2 &&\n      this.x2 === other.x1 &&\n      this.y1 === other.y2 &&\n      this.y2 === other.y1\n    );\n  }\n\n  withNewEnd(newEnd: Vector2): Line {\n    return new Line({\n      x1: this.x1,\n      y1: this.y1,\n      x2: newEnd.x,\n      y2: newEnd.y,\n    });\n  }\n\n  withNewStart(newStart: Vector2): Line {\n    return new Line({\n      x1: newStart.x,\n      y1: newStart.y,\n      x2: this.x2,\n      y2: this.y2,\n    });\n  }\n\n  static Deserialize(obj: any): Line {\n    if (\n      !obj.hasOwnProperty(\"x1\") ||\n      !obj.hasOwnProperty(\"y1\") ||\n      !obj.hasOwnProperty(\"x2\") ||\n      !obj.hasOwnProperty(\"y2\")) {\n\n      console.error(\"Failed deserializing Rect\");\n    }\n\n    return new Line({\n      x1: obj.x1,\n      y1: obj.y1,\n      x2: obj.x2,\n      y2: obj.y2,\n    });\n  }\n\n  static Serialize(obj: Line): string {\n    return JSON.stringify({\n      x1: obj.x1,\n      y1: obj.y1,\n      x2: obj.x2,\n      y2: obj.y2,\n    });\n  }\n\n  drawOnto(graphics: Graphics, color = 0xff0000) {\n    graphics.lineStyle(3, color, 1);\n\n    graphics.moveTo(this.x1, this.y1);\n    graphics.lineTo(this.x2, this.y2);\n  }\n\n  /** \n   * Returns the point where these two lines, if extended arbitrarily, would\n   * intersect.\n   */\n  lineIntersection(other: Line): Vector2 {\n    const p1 = this.start;\n    const p2 = this.end;\n    const p3 = other.start;\n    const p4 = other.end;\n\n    const s = (\n      (p4.x - p3.x) * \n      (p1.y - p3.y) - \n      (p4.y - p3.y) * \n      (p1.x - p3.x)) / (\n      (p4.y - p3.y) * \n      (p2.x - p1.x) - \n      (p4.x - p3.x) * \n      (p2.y - p1.y)\n    );\n\n    const x = p1.x + s * (p2.x - p1.x);\n    const y = p1.y + s * (p2.y - p1.y);\n\n    return new Vector2({ x, y });\n  }\n\n  /**\n   * Returns the point where these two segments exist, if there is one.\n   */\n  segmentIntersection(other: Line): Vector2 | null {\n    const lineIntersection = this.lineIntersection(other);\n\n    const x = lineIntersection.x;\n    const y = lineIntersection.y;\n\n    if (\n      (\n        // within us\n\n        epsGreaterThan(x, Math.min(this.x1, this.x2)) &&\n        epsLessThan   (x, Math.max(this.x1, this.x2)) &&\n        epsGreaterThan(y, Math.min(this.y1, this.y2)) &&\n        epsLessThan   (y, Math.max(this.y1, this.y2))\n      ) && (\n        // within other\n\n        epsGreaterThan(x, Math.min(other.x1, other.x2)) &&\n        epsLessThan   (x, Math.max(other.x1, other.x2)) &&\n        epsGreaterThan(y, Math.min(other.y1, other.y2)) &&\n        epsLessThan   (y, Math.max(other.y1, other.y2))\n      )\n    ) {\n      return lineIntersection;\n    }\n\n    return null;\n  }\n\n  normalize(): Line {\n    const mag = Math.sqrt(\n      (this.x1 - this.x2) ** 2 +\n      (this.y1 - this.y2) ** 2\n    );\n\n    return new Line({\n      start: this.start,\n      end: new Vector2({\n        x: this.start.x + (this.end.x - this.start.x) / mag,\n        y: this.start.x + (this.end.y - this.start.y) / mag,\n      })\n    })\n  }\n\n  hash(): string {\n    return this.toString();\n  }\n\n  add(x: Vector2): Line {\n    return new Line({ \n      start: this.start.add(x),\n      end: this.end.add(x),\n    })\n  }\n}\n","import { Vector2, IVector2 } from \"./geometry/vector2\";\nimport { Rect } from \"./geometry/rect\";\nimport { Sprite, Texture, MaskData, Container } from \"pixi.js\";\nimport { getUniqueID } from \"./util\";\nimport { RectGroup } from \"./geometry/rect_group\";\nimport { BaseGameState } from \"./base_state\";\nimport { GameReference, FixedStageName, StageName, ParallaxStageName } from \"./base_game\";\n// import { CoroutineId, GameCoroutine } from \"./coroutine_manager\";\nimport { IGameState, Mode } from \"Library\";\nimport { HitInfo } from \"./collision_handler\";\nimport { serialized } from \"./serializer\";\n\nexport enum EntityType {\n  NormalEntity,\n\n  /** \n   * The collision information for this entity will be calculated by the main\n   * game loop.\n   */\n  MovingEntity,\n}\n\nexport class AugmentedSprite extends Sprite {\n  entity!: Entity;\n}\n\n\n// export class ModeEntity extends Entity<GameState> {\n//   shouldUpdate(state: GameState) {\n//     return this.activeModes.includes(state.mode);\n//   }\n// }\n\n// TODO: probably make less of these methods abstract?\nexport class Entity {\n  /**\n   * This is the name that is displayed in the hierarchy.\n   */\n  public name: string;\n\n  public activeModes: Mode[] = [\"Normal\"];\n\n  public id = getUniqueID();\n\n  public velocity = Vector2.Zero;\n\n  /**\n   * The PIXI Sprite that this Entity wraps.\n   */\n  public sprite: AugmentedSprite;\n\n  public hitInfo: HitInfo = { hit: false, collisions: [], interactions: [] };\n\n  protected _collidable: boolean;\n  protected _interactable: boolean;\n\n  constructor(props: {\n    name: string;\n    collidable?: boolean;\n    texture?: Texture;\n    interactable?: boolean;\n  }) {\n    this.sprite = new AugmentedSprite(props.texture);\n    this.name = props.name;\n    this.sprite.entity = this;\n\n    this._collidable = props.collidable ?? false;\n    this._interactable = props.interactable ?? false;\n\n    if (props.interactable && props.collidable) {\n      throw new Error(\"Cant be both interactable and collideable\");\n    }\n\n    this.startUpdating();\n\n    this.sprite.sortableChildren = true;\n    this.sprite.anchor.set(0);\n  }\n\n  addChild(child: Entity, x: number | null = null, y: number | null = null) {\n    this.sprite.addChild(child.sprite);\n\n    if (x !== null) child.x = x;\n    if (y !== null) child.y = y;\n  }\n\n  removeChild(child: Entity) {\n    this.sprite.removeChild(child.sprite);\n  }\n\n  // startCoroutine(name: string, coroutine: GameCoroutine): CoroutineId {\n  //   return GameReference.coroutineManager.startCoroutine(name, coroutine, this);\n  // }\n\n  // stopCoroutine(id: CoroutineId): void {\n  //   GameReference.coroutineManager.stopCoroutine(id);\n  // }\n\n  startUpdating() {\n    GameReference.state.entities.put(this);\n  }\n\n  stopUpdating() {\n    GameReference.state.entities.remove(this);\n  }\n\n  shouldUpdate(state: IGameState): boolean {\n    return this.activeModes.includes(state.mode);\n  }\n\n  update(state: IGameState): void { }\n\n  firstUpdate(state: IGameState): void { }\n\n  setCollideable(isCollideable: boolean) {\n    this._collidable = isCollideable;\n  }\n\n  setTexture(newTexture: Texture) {\n    this.sprite.texture = newTexture;\n  }\n\n  /** \n   * Used for collision detection. (x, y) is relative to the sprite, btw, not\n   * the map or anything else.\n   */\n  public collisionBounds(): Rect | RectGroup {\n    return new Rect({\n      x: 0,\n      y: 0,\n      width: this.width,\n      height: this.height\n    })\n  }\n\n  /** \n   * Returns the position of this Entity relative to the stage (rather than its\n   * parent, like position would).\n   */\n  public positionAbsolute(): Vector2 {\n    if (this.parent && (\n      this.parent.name === FixedStageName ||\n      this.parent.name === StageName ||\n      this.parent.name === ParallaxStageName\n    )) {\n      return this.position;\n    }\n\n    return this.position.add(this.parent?.positionAbsolute() ?? new Vector2());\n  }\n\n  public get center(): Vector2 {\n    return new Vector2(this.position).add({\n      x: this.width / 2,\n      y: this.height / 2\n    });\n  }\n\n  children(): Entity[] {\n    const children = this.sprite.children;\n    const result: Entity[] = [];\n\n    for (const child of children) {\n      if (child instanceof AugmentedSprite) {\n        result.push(child.entity);\n      }\n    }\n\n    return result;\n  }\n\n  destroy(state: BaseGameState) {\n    state.toBeDestroyed.push(this);\n  }\n\n  hash(): string {\n    return `[Entity ${this.id}]`;\n  }\n\n  isCollideable(): boolean {\n    return this._collidable;\n  }\n\n  isInteractable(): boolean {\n    return this._interactable;\n  }\n\n  dimensions(): Vector2 {\n    const bounds = this.collisionBounds();\n\n    if (bounds instanceof Rect) {\n      return new Vector2(bounds.x, bounds.y);\n    } else {\n      throw new Error(\"oh no grant doesnt handle this case!!!\");\n    }\n  }\n\n  // Sprite wrapper stuff\n\n  public get parent(): Entity | null {\n    const parent = this.sprite.parent;\n\n    if (parent instanceof AugmentedSprite) {\n      const entityParent = parent.entity;\n\n      if (entityParent) {\n        return entityParent;\n      }\n    }\n\n    return null;\n  }\n\n  private queuedUpdates: ((state: IGameState) => void)[] = [];\n  private firstUpdateCalled = false;\n\n  baseUpdate(state: IGameState): void {\n    if (this.shouldUpdate(state)) {\n      for (const cb of this.queuedUpdates) {\n        cb(state);\n      }\n\n      if (!this.firstUpdateCalled) {\n        this.firstUpdateCalled = true;\n        this.firstUpdate(state);\n      }\n      this.update(state);\n    }\n\n    this.queuedUpdates = [];\n  }\n\n  addOnClick(listener: (state: IGameState) => void) {\n    this.sprite.interactive = true;\n\n    this.sprite.on('click', () => {\n      this.queuedUpdates.push(listener);\n    });\n  }\n\n  addOnMouseOver(listener: (state: IGameState) => void) {\n    this.sprite.interactive = true;\n\n    this.sprite.on('mouseover', () => {\n      this.queuedUpdates.push(listener);\n    });\n  }\n\n  addOnMouseOut(listener: (state: IGameState) => void) {\n    this.sprite.interactive = true;\n\n    this.sprite.on('mouseout', () => {\n      this.queuedUpdates.push(listener);\n    });\n  }\n\n  public get x(): number { return this.sprite.x; }\n  public set x(value: number) { this.sprite.x = value; }\n\n  public get y(): number { return this.sprite.y; }\n  public set y(value: number) { this.sprite.y = value; }\n\n  public get width(): number { return this.sprite.width; }\n  public set width(value: number) { this.sprite.width = value; }\n\n  public get height(): number { return this.sprite.height; }\n  public set height(value: number) { this.sprite.height = value; }\n\n  public get alpha(): number { return this.sprite.alpha; }\n  public set alpha(value: number) { this.sprite.alpha = value; }\n\n  public get position(): Vector2 { return new Vector2({ x: this.x, y: this.y }); }\n  public set position(value: Vector2) { this.x = value.x; this.y = value.y; }\n\n  public get zIndex(): number { return this.sprite.zIndex; }\n  public set zIndex(value: number) { this.sprite.zIndex = value; this.sprite.parent && this.sprite.parent.sortChildren(); }\n\n  public get visible(): boolean { return this.sprite.visible; }\n  public set visible(value: boolean) { this.sprite.visible = value; }\n\n  public set texture(value: Texture) { this.sprite.texture = value; }\n\n  public set mask(value: Container | MaskData | null) { this.sprite.mask = value; }\n  public get mask(): Container | MaskData | null { return this.sprite.mask; }\n\n  public get scale(): Vector2 { return new Vector2({ x: this.sprite.scale.x, y: this.sprite.scale.y }); }\n  public set scale(value: Vector2) {\n    this.sprite.scale.x = value.x;\n    this.sprite.scale.y = value.y;\n  }\n\n  public distance(other: IVector2) {\n    return this.position.distance(other);\n  }\n}\n","import { Line } from \"./line\";\nimport { Vector2, IVector2 } from \"./vector2\";\n\n/**\n * Immutable rectangle class.\n */\nexport class Rect {\n  private _x: number;\n  private _y: number;\n  private _width: number;\n  private _height: number;\n\n  public get x(): number {\n    return this._x;\n  }\n\n  public get y(): number {\n    return this._y;\n  }\n\n  public get width(): number {\n    return this._width;\n  }\n\n  public get height(): number {\n    return this._height;\n  }\n\n  public get centerX(): number {\n    return this._x + this._width / 2;\n  }\n\n  public get centerY(): number {\n    return this._y + this._height / 2;\n  }\n\n  public get right(): number {\n    return this._x + this._width;\n  }\n\n  public get bottom(): number {\n    return this._y + this._height;\n  }\n\n  public get top(): number {\n    return this._y;\n  }\n\n  public get left(): number {\n    return this._x;\n  }\n\n  public get center(): Vector2 {\n    return new Vector2({\n      x: this.x + this.width / 2,\n      y: this.y + this.height / 2,\n    });\n  }\n\n  public get dimensions(): Vector2 {\n    return new Vector2({ x: this.width, y: this.height });\n  }\n\n  public static FromPoint(point: IVector2, size: number): Rect {\n    return new Rect({\n      x: point.x,\n      y: point.y,\n      width: size,\n      height: size,\n    });\n  }\n\n  public static FromPoints(p1: IVector2, p2: IVector2): Rect {\n    return new Rect({\n      x: Math.min(p1.x, p2.x),\n      y: Math.min(p1.y, p2.y),\n      width: Math.abs(p1.x - p2.x),\n      height: Math.abs(p1.y - p2.y),\n    });\n  }\n\n  public static FromCenter(props: {\n    center: IVector2;\n    dimensions: IVector2;\n  }): Rect {\n    return new Rect({\n      x: props.center.x - props.dimensions.x / 2,\n      y: props.center.y - props.dimensions.y / 2,\n      width: props.dimensions.x,\n      height: props.dimensions.y,\n    });\n  }\n\n  public withRight(value: number): Rect {\n    return new Rect({\n      x: this.x,\n      y: this.y,\n      width: value - this.x,\n      height: this.height,\n    });\n  }\n\n  public withWidth(value: number): Rect {\n    return new Rect({\n      x: this.x,\n      y: this.y,\n      width: value,\n      height: this.height,\n    });\n  }\n\n  public withHeight(value: number): Rect {\n    return new Rect({\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: value,\n    });\n  }\n\n  public withBottom(value: number): Rect {\n    return new Rect({\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: value - this.y,\n    });\n  }\n\n  public withX(value: number): Rect {\n    return new Rect({\n      x: value,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n    });\n  }\n\n  public withY(value: number): Rect {\n    return new Rect({\n      x: this.x,\n      y: value,\n      width: this.width,\n      height: this.height,\n    });\n  }\n\n  public withTop(value: number): Rect {\n    return this.withY(value);\n  }\n\n  public withLeft(value: number): Rect {\n    return this.withX(value);\n  }\n\n  /**\n   * bottomRight is held constant.\n   */\n  public withTopLeft(topLeft: IVector2): Rect {\n    return Rect.FromPoints(topLeft, this.bottomRight);\n  }\n\n  /**\n   * bottomLeft is held constant.\n   */\n  public withTopRight(topRight: IVector2): Rect {\n    return Rect.FromPoints(topRight, this.bottomLeft);\n  }\n\n  /**\n   * topLeft is held constant.\n   */\n  public withBottomRight(bottomRight: IVector2): Rect {\n    return Rect.FromPoints(bottomRight, this.topLeft);\n  }\n\n  /**\n   * topRight is held constant.\n   */\n  public withBottomLeft(bottomLeft: IVector2): Rect {\n    return Rect.FromPoints(bottomLeft, this.topRight);\n  }\n\n  public withCenter(center: IVector2): Rect {\n    return new Rect({\n      x: center.x - this.width / 2,\n      y: center.y - this.height / 2,\n      width: this.width,\n      height: this.height,\n    });\n  }\n\n  /**\n   * center is held constant\n   */\n  public withScale(props: { width?: number; height?: number }): Rect {\n    return new Rect({\n      x: this.centerX - (props.width || this.width) / 2,\n      y: this.centerY - (props.height || this.height) / 2,\n      width: props.width || this.width,\n      height: props.height || this.height,\n    });\n  }\n\n  public get topLeft(): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: this.y,\n    });\n  }\n\n  public get topRight(): Vector2 {\n    return new Vector2({\n      x: this.right,\n      y: this.y,\n    });\n  }\n\n  public get bottomRight(): Vector2 {\n    return new Vector2({\n      x: this.right,\n      y: this.bottom,\n    });\n  }\n\n  public get bottomLeft(): Vector2 {\n    return new Vector2({\n      x: this.x,\n      y: this.bottom,\n    });\n  }\n\n  constructor(props: { x: number; y: number; width: number; height: number }) {\n    this._x = props.x;\n    this._y = props.y;\n    this._width = props.width;\n    this._height = props.height;\n  }\n\n  static DeserializeRect(s: string): Rect {\n    const [x, y, w, h] = s.split(\"|\").map((x) => Number(x));\n\n    return new Rect({ x, y, width: w, height: h });\n  }\n\n  /**\n   * Return the four edges of this Rect as Lines.\n   */\n  getLinesFromRect(): Line[] {\n    return [\n      new Line({ x1: this.x, y1: this.y, x2: this.x + this.width, y2: this.y }),\n      new Line({\n        x1: this.x,\n        y1: this.y,\n        x2: this.x,\n        y2: this.y + this.height,\n      }),\n      new Line({\n        x1: this.x + this.width,\n        y1: this.y + this.height,\n        x2: this.x + this.width,\n        y2: this.y,\n      }),\n      new Line({\n        x1: this.x + this.width,\n        y1: this.y + this.height,\n        x2: this.x,\n        y2: this.y + this.height,\n      }),\n    ];\n  }\n\n  /**\n   * Return the four corners of this Rect.\n   */\n  getCorners(): Vector2[] {\n    return [\n      new Vector2({ x: this.x, y: this.y }),\n      new Vector2({ x: this.x + this.width, y: this.y }),\n      new Vector2({ x: this.x, y: this.y + this.height }),\n      new Vector2({ x: this.x + this.width, y: this.y + this.height }),\n    ];\n  }\n\n  serialize(): string {\n    return `${this.x}|${this.y}|${this.width}|${this.height}`;\n  }\n\n  // consider overlapping edges as intersection, but not overlapping corners.\n  intersects(\n    other: Rect,\n    props: { edgesOnlyIsAnIntersection: boolean } = {\n      edgesOnlyIsAnIntersection: false,\n    }\n  ): boolean {\n    const intersection = this.getIntersection(other, true);\n\n    if (props.edgesOnlyIsAnIntersection) {\n      return (\n        !!intersection && (intersection.width > 0 || intersection.height > 0)\n      );\n    } else {\n      return !!intersection && intersection.width * intersection.height > 0;\n    }\n  }\n\n  completelyContains(smaller: Rect): boolean {\n    return (\n      this.x <= smaller.x &&\n      this.x + this.width >= smaller.x + smaller.width &&\n      this.y <= smaller.y &&\n      this.y + this.height >= smaller.y + smaller.height\n    );\n  }\n\n  getIntersection(\n    other: Rect,\n    edgesOnlyIsAnIntersection = false\n  ): Rect | undefined {\n    const xmin = Math.max(this.x, other.x);\n    const xmax1 = this.x + this.width;\n    const xmax2 = other.x + other.width;\n    const xmax = Math.min(xmax1, xmax2);\n\n    if (xmax > xmin || (edgesOnlyIsAnIntersection && xmax >= xmin)) {\n      const ymin = Math.max(this.y, other.y);\n      const ymax1 = this.y + this.height;\n      const ymax2 = other.y + other.height;\n      const ymax = Math.min(ymax1, ymax2);\n\n      if (ymax >= ymin || (edgesOnlyIsAnIntersection && ymax >= ymin)) {\n        return new Rect({\n          x: xmin,\n          y: ymin,\n          width: xmax - xmin,\n          height: ymax - ymin,\n        });\n      }\n    }\n\n    return undefined;\n  }\n\n  contains(p: IVector2): boolean {\n    return (\n      p.x >= this.x &&\n      p.x < this.x + this.width &&\n      p.y >= this.y &&\n      p.y < this.y + this.height\n    );\n  }\n\n  clone(): Rect {\n    return new Rect({\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n    });\n  }\n\n  add(p: IVector2): Rect {\n    return this.translate(p);\n  }\n\n  subtract(p: IVector2): Rect {\n    return this.translate({ x: -p.x, y: -p.y });\n  }\n\n  translate(p: IVector2): Rect {\n    return new Rect({\n      x: this.x + p.x,\n      y: this.y + p.y,\n      width: this.width,\n      height: this.height,\n    });\n  }\n\n  scale(p: Vector2): Rect {\n    return new Rect({\n      x: this.x,\n      y: this.y,\n      width: this.width * p.x,\n      height: this.height * p.y,\n    });\n  }\n\n  centeredAtOrigin(): Rect {\n    return new Rect({\n      x: -this.width / 2,\n      y: -this.height / 2,\n      width: this.width,\n      height: this.height,\n    });\n  }\n\n  equals(o: Rect | undefined | null): boolean {\n    if (!o) {\n      return false;\n    }\n\n    return (\n      this.x === o.x &&\n      this.y === o.y &&\n      this.width === o.width &&\n      this.height === o.height\n    );\n  }\n\n  toJSON(): any {\n    return {\n      x: this.x,\n      y: this.y,\n      w: this.width,\n      h: this.height,\n      reviver: \"Rect\",\n    };\n  }\n\n  hash(): string {\n    return this.toString();\n  }\n\n  /**\n   * Adds amount to both width and height.\n   */\n  extend(amount: number): Rect {\n    return new Rect({\n      x: this.x,\n      y: this.y,\n      width: this.width + amount,\n      height: this.height + amount,\n    });\n  }\n\n  shrink(amount: number): Rect {\n    return new Rect({\n      x: this.x + amount,\n      y: this.y + amount,\n      width: Math.max(this.width - amount * 2, 0),\n      height: Math.max(this.height - amount * 2, 0),\n    });\n  }\n\n  floor(): Rect {\n    return new Rect({\n      x: Math.floor(this.x),\n      y: Math.floor(this.y),\n      width: Math.floor(this.width),\n      height: Math.floor(this.height),\n    });\n  }\n\n  /**\n   * Grow the Rect by amount in all directions.\n   */\n  expand(amount: number): Rect {\n    return this.shrink(-amount);\n  }\n\n  transform(trans: Vector2, scale: number): Rect {\n    const topLeft = this.topLeft.transform(trans, scale);\n    const botRight = this.bottomRight.transform(trans, scale);\n\n    return new Rect({\n      x: topLeft.x,\n      y: topLeft.y,\n      width: botRight.x - topLeft.x,\n      height: botRight.y - topLeft.y,\n    });\n  }\n\n  static Deserialize(obj: any): Rect {\n    if (\n      !obj.hasOwnProperty(\"x\") ||\n      !obj.hasOwnProperty(\"y\") ||\n      !obj.hasOwnProperty(\"w\") ||\n      !obj.hasOwnProperty(\"h\")\n    ) {\n      console.error(\"Failed deserializing Rect\");\n    }\n\n    return new Rect({\n      x: obj.x,\n      y: obj.y,\n      width: obj.w,\n      height: obj.h,\n    });\n  }\n\n  static Serialize(r: Rect): string {\n    return JSON.stringify({\n      x: r.x,\n      y: r.y,\n      w: r.width,\n      h: r.height,\n    });\n  }\n\n  toString(): string {\n    return `[${this.x}, ${this.y}]`;\n  }\n}\n","export class Pair<T extends { hash(): string }, U extends { hash(): string }> {\n  private _first: T;\n  private _second: U;\n\n  constructor(first: T, second: U) {\n    this._first  = first;\n    this._second = second;\n  }\n\n  hash(): string {\n    return `${ this._first.hash() }|${ this._second.hash() }`\n  }\n\n  get first() {\n    return this._first;\n  }\n\n  get second() {\n    return this._second;\n  }\n}","import * as Pixi from \"pixi.js\";\nimport { Container } from \"pixi.js\";\nimport { Pair } from \"../johnfn_library/data_structures/pair\";\nimport { Rect } from \"../johnfn_library/geometry/rect\";\nimport { IVector2, Vector2 } from \"../johnfn_library/geometry/vector2\";\n\nexport type RenderRectsConfig = {\n  containerHeightProportion: number;\n  aspectRatio1: number;\n  downscaleRatio12: number;\n  aspectRatio2?: number;\n  downscaleRatio23?: number;\n  aspectRatio3?: number;\n  circleSize: number;\n  circleOffColor: number;\n  circleOnColor: number;\n  circleHoverColor: number;\n  circleFillColor: number;\n  borderOffColor: number;\n  borderOnColor: number;\n    borderThickness: number,\n  centerToEdgeBorderRatio2: number;\n  centerToEdgeBorderRatio3?: number;\n  cornerCompression1?: number;\n  cornerCompression2?: number;\n  cornerCompression3?: number;\n  debugHasRectBorder: boolean;\n  debugRandomOn: boolean;\n};\n\nexport class RenderRects {\n  private config: RenderRectsConfig = {\n    containerHeightProportion: 0.9,\n    aspectRatio1: 1.6,\n    aspectRatio3: 1.6,\n    downscaleRatio12: 0.75,\n    downscaleRatio23: 0.35,\n    circleSize: 6,\n    circleOnColor: 0x030303,\n    circleOffColor: 0xcecece,\n    circleHoverColor: 0x000000,\n    circleFillColor: 0xd3d3d3,\n    borderOffColor: 0xefefef,\n    borderOnColor: 0xbcdebc,\n    borderThickness: 2,\n    centerToEdgeBorderRatio2: 1.2,\n    centerToEdgeBorderRatio3: 1.0,\n    cornerCompression1: 0.08,\n    cornerCompression2: 0.2,\n    cornerCompression3: 0.3,\n    debugHasRectBorder: false,\n    debugRandomOn: true,\n  };\n  private containerRect!: Rect;\n  private stage!: Container;\n\n  constructor(\n    stage: Container,\n    containerRect: Rect,\n    config?: RenderRectsConfig\n  ) {\n    this.stage = stage;\n    this.containerRect = containerRect;\n    this.config = Object.assign({}, this.config, config || {});\n  }\n\n  /**\n   * Draws a '=' oriented rectangle, 2 'O' oriented nested, and then 4 '=' further-nested.\n   */\n  public drawFirst() {\n    const hasBorder = this.config.debugHasRectBorder;\n    const newHeight =\n      this.containerRect.height * this.config.containerHeightProportion;\n    const newRect = this.containerRect.withScale({\n      height: newHeight,\n      width: newHeight * this.config.aspectRatio1,\n    });\n    this.drawRect(newRect, hasBorder, this.config.cornerCompression1 || 0);\n\n    const layer2 = this.nestRectPair(\n      newRect,\n      this.config.downscaleRatio12,\n      this.config.aspectRatio2 || this.config.aspectRatio1,\n      this.config.centerToEdgeBorderRatio2\n    );\n    this.drawRect(\n      layer2.first,\n      hasBorder,\n      this.config.cornerCompression2 || this.config.cornerCompression1 || 0\n    );\n    this.drawRect(\n      layer2.second,\n      hasBorder,\n      this.config.cornerCompression2 || this.config.cornerCompression1 || 0\n    );\n\n    const layer3 = new Pair(\n      this.nestRectPair(\n        layer2.first,\n        this.config.downscaleRatio23 || this.config.downscaleRatio12,\n        this.config.aspectRatio3 ||\n          this.config.aspectRatio2 ||\n          this.config.aspectRatio1,\n        this.config.centerToEdgeBorderRatio3 ||\n          this.config.centerToEdgeBorderRatio2\n      ),\n      this.nestRectPair(\n        layer2.second,\n        this.config.downscaleRatio23 || this.config.downscaleRatio12,\n        this.config.aspectRatio3 ||\n          this.config.aspectRatio2 ||\n          this.config.aspectRatio1,\n        this.config.centerToEdgeBorderRatio3 ||\n          this.config.centerToEdgeBorderRatio2\n      )\n    );\n    this.drawRect(\n      layer3.first.first,\n      hasBorder,\n      this.config.cornerCompression3 ||\n        this.config.cornerCompression2 ||\n        this.config.cornerCompression1 ||\n        0\n    );\n    this.drawRect(\n      layer3.second.first,\n      hasBorder,\n      this.config.cornerCompression3 ||\n        this.config.cornerCompression2 ||\n        this.config.cornerCompression1 ||\n        0\n    );\n    this.drawRect(\n      layer3.first.second,\n      hasBorder,\n      this.config.cornerCompression3 ||\n        this.config.cornerCompression2 ||\n        this.config.cornerCompression1 ||\n        0\n    );\n    this.drawRect(\n      layer3.second.second,\n      hasBorder,\n      this.config.cornerCompression3 ||\n        this.config.cornerCompression2 ||\n        this.config.cornerCompression1 ||\n        0\n    );\n  }\n\n  private nestRectPair(\n    original: Rect,\n    downscaleRatio: number,\n    newAspectRatio: number,\n    centerToEdgeBorderRatio: number\n  ): Pair<Rect, Rect> {\n    const longSide = Math.min(original.height, original.width) * downscaleRatio;\n    const shortSide = longSide / newAspectRatio;\n    const remaining = Math.max(original.height, original.width) - 2 * shortSide;\n    const middleGap =\n      (remaining / (2 + centerToEdgeBorderRatio)) * centerToEdgeBorderRatio;\n    const offset = middleGap / 2 + shortSide / 2;\n\n    if (original.height < original.width) {\n      const newHeight = longSide;\n      const newWidth = shortSide;\n\n      const leftCenter = new Vector2(\n        original.centerX - offset,\n        original.centerY\n      );\n      const rightCenter = new Vector2(\n        original.centerX + offset,\n        original.centerY\n      );\n      return new Pair<Rect, Rect>(\n        Rect.FromCenter({\n          center: leftCenter,\n          dimensions: new Vector2(newWidth, newHeight),\n        }),\n        Rect.FromCenter({\n          center: rightCenter,\n          dimensions: new Vector2(newWidth, newHeight),\n        })\n      );\n    } else {\n      const newHeight = shortSide;\n      const newWidth = longSide;\n\n      const topCenter = new Vector2(\n        original.centerX,\n        original.centerY - offset\n      );\n      const bottomCenter = new Vector2(\n        original.centerX,\n        original.centerY + offset\n      );\n      return new Pair<Rect, Rect>(\n        Rect.FromCenter({\n          center: topCenter,\n          dimensions: new Vector2(newWidth, newHeight),\n        }),\n        Rect.FromCenter({\n          center: bottomCenter,\n          dimensions: new Vector2(newWidth, newHeight),\n        })\n      );\n    }\n  }\n\n  private drawRect(\n    rect: Rect,\n    hasBorder: boolean,\n    cornerCompressionRatio: number\n  ) {\n    const corners = rect.withScale({\n      width:\n        rect.width - cornerCompressionRatio * (3 * rect.width + rect.height)/4,\n      height:\n        rect.height -\n        cornerCompressionRatio * (rect.width + 3 * rect.height)/4,\n    });\n    const midpoints = {\n      left: new Vector2(rect.left, rect.centerY),\n      right: new Vector2(rect.right, rect.centerY),\n      top: new Vector2(rect.centerX, rect.top),\n      bottom: new Vector2(rect.centerX, rect.bottom),\n    };\n\n    if (hasBorder) {\n      const graphics = new Pixi.Graphics();\n      graphics.lineStyle(this.config.borderThickness, this.config.borderOffColor, 1);\n      graphics.drawRect(rect.x, rect.y, rect.width, rect.height);\n      this.stage.addChild(graphics);\n    }\n    this.drawLine(corners.topLeft, midpoints.left);\n    this.drawLine(corners.topLeft, midpoints.top);\n    this.drawLine(corners.topRight, midpoints.right);\n    this.drawLine(corners.topRight, midpoints.top);\n    this.drawLine(corners.bottomLeft, midpoints.left);\n    this.drawLine(corners.bottomLeft, midpoints.bottom);\n    this.drawLine(corners.bottomRight, midpoints.right);\n    this.drawLine(corners.bottomRight, midpoints.bottom);\n\n    this.drawCorners(corners);\n    Object.values(midpoints).map((p) => this.drawCircleAt(p));\n  }\n\n  private drawCorners(rect: Rect) {\n    this.drawCircleAt(rect.topLeft);\n    this.drawCircleAt(rect.topRight);\n    this.drawCircleAt(rect.bottomLeft);\n    this.drawCircleAt(rect.bottomRight);\n  }\n\n  public drawLine(p1: IVector2, p2: IVector2) {\n    const graphics = new Pixi.Graphics();\n    // graphics.position.set(p1.x, p1.y);\n    if (this.config.debugRandomOn && Math.random() < 0.5) {\n      graphics.lineStyle(this.config.borderThickness, this.config.borderOnColor, 1);\n    } else {\n      graphics.lineStyle(this.config.borderThickness, this.config.borderOffColor, 1);\n    }\n    graphics.moveTo(p1.x, p1.y);\n    graphics.lineTo(p2.x, p2.y);\n    this.stage.addChild(graphics);\n  }\n\n  public drawCircleAt(point: IVector2): IVector2 {\n    const graphics = new Pixi.Graphics();\n\n    if (this.config.debugRandomOn && Math.random() < 0.5) {\n      graphics.lineStyle(1, this.config.circleOnColor, 1);\n    } else {\n      graphics.lineStyle(1, this.config.circleOffColor, 1);\n    }\n    graphics.beginFill(this.config.circleFillColor, 1);\n    graphics.drawCircle(point.x, point.y, this.config.circleSize);\n    graphics.endFill();\n    this.stage.addChild(graphics);\n    return point;\n  }\n}\n","import * as Pixi from \"pixi.js\";\nimport { Rect } from \"../johnfn_library/geometry/rect\";\nimport { Vector2 } from \"../johnfn_library/geometry/vector2\";\nimport { RenderRects, RenderRectsConfig } from \"./RenderRects\";\n\nexport type Config = {\n  canvasWidth: number;\n  canvasHeight: number;\n};\n\nconst defaultConfig: Config = {\n  canvasWidth: 800,\n  canvasHeight: 800,\n};\n\nexport type Point = number[];\n\nexport class Application {\n  public app!: Pixi.Application;\n\n  public config!: Config;\n\n  public renderRects: RenderRects;\n\n  /**\n   * Need to provide config to set up the pixi canvas\n   */\n  constructor(config?: Config, app?: Pixi.Application) {\n    this.config = Object.assign({}, defaultConfig, config);\n\n    this.app = app || new Pixi.Application({\n      width: this.config.canvasWidth,\n      height: this.config.canvasHeight,\n      antialias: true,\n      backgroundColor: 0xffffff,\n    });\n\n    this.renderRects = new RenderRects(\n      this.app.stage,\n      new Rect({\n        x: 0,\n        y: 0,\n        width: this.config.canvasWidth,\n        height: this.config.canvasHeight,\n      })\n    );\n  }\n\n  /**\n   * Please only call once!!\n   */\n  public register(curr: HTMLDivElement) {\n    curr.appendChild(this.app.view);\n  }\n\n  /**\n   * Draws a full skill tree at the default zoom level.\n   */\n  public drawAll() {\n    // get the first 3 layers' configurations\n    // render the top layer points\n    // renderLayerPoints(layer[0], { rect: null })\n    // render the next layer\n    // render the intermediate connections\n    // render the final layer\n    // render the intermediate connections\n  }\n\n  /**\n   * Used for panning/zooming.\n   */\n  public moveViewport(viewport: Rect) {}\n\n  public drawStart() {\n    this.renderRects.drawFirst();\n  }\n\n  public drawCircle() {\n    this.renderRects.drawCircleAt(\n      new Vector2(\n        Math.random() * this.config.canvasWidth,\n        Math.random() * this.config.canvasHeight\n      )\n    );\n  }\n}\n","import { Rect } from \"./rect\";\nimport { Vector2 } from \"./vector2\";\n\n\nexport class RectGroup {\n  private _rects: Rect[];\n\n  constructor(rects: Rect[]) {\n    this._rects = rects;\n  }\n\n  intersects(other: Rect | RectGroup) {\n    if (other instanceof Rect) {\n      for (const rect of this._rects) {\n        if (rect.intersects(other)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    if (other instanceof RectGroup) {\n      for (const r1 of this._rects) {\n        for (const r2 of this._rects) {\n          if (r1.intersects(r2)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }\n\n  getRects(): Rect[] {\n    return this._rects;\n  }\n\n  add(delta: Vector2): RectGroup {\n    const newRects = this._rects.map(rect => rect.add(delta));\n\n    return new RectGroup(newRects);\n  }\n\n  subtract(delta: Vector2): RectGroup {\n    const newRects = this._rects.map(rect => rect.subtract(delta));\n\n    return new RectGroup(newRects);\n  }\n}","export const IS_PRODUCTION  = !window.location.href.includes(\"localhost\") || window.location.href.includes(\"debug=false\");\nexport const IS_DEVELOPMENT = !IS_PRODUCTION;\nexport const IS_DEBUG       = (IS_DEVELOPMENT || window.location.href.includes(\"debug=true\")) && !(window.location.href.includes(\"debug=false\"));","import { Vector2, IVector2 } from \"./geometry/vector2\";\nimport { Graphics, Sprite, Container } from \"pixi.js\";\nimport { Line } from \"./geometry/line\";\nimport { Entity } from \"./entity\";\nimport { Rect } from \"./geometry/rect\";\nimport { RectGroup } from \"./geometry/rect_group\";\nimport { GameReference } from \"./base_game\";\nimport { BaseGameState } from \"./base_state\";\nimport { IS_DEBUG, IS_PRODUCTION } from \"./environment\";\n\nconst MAX_DEBUGGING_GRAPHICS_COUNT = 500;\n\nexport class Debug {\n  public static stageReference: Entity;\n\n  public static DebugMode = false;\n\n  public static DebugGraphicStack: Graphics[] = [];\n\n  public static Clear(): void {\n    for (const debug of Debug.DebugGraphicStack) {\n      debug.parent.removeChild(debug);\n      debug.destroy();\n    }\n\n    Debug.DebugGraphicStack = [];\n  }\n\n  /** \n   * Draw a point on the canvas.\n   * \n   * We expect this function to be called every tick in an update() function.\n   * Debug graphics drawn in the previous tick are removed in the game loop. \n   * If that's not what you want, pass persistent = true.\n   */\n  public static DrawPoint(point: IVector2, color = 0xff0000, persistent = false): Graphics {\n    if (IS_PRODUCTION) {\n      console.error(\"SHOULD NOT HAPPEN\")\n    }\n\n    const graphics = new Graphics();\n\n    new Line({\n      x1: point.x - 40,\n      x2: point.x + 40,\n\n      y1: point.y - 40,\n      y2: point.y + 40,\n    }).drawOnto(graphics, color);\n\n    new Line({\n      x1: point.x + 40,\n      x2: point.x - 40,\n\n      y1: point.y - 40,\n      y2: point.y + 40,\n    }).drawOnto(graphics, color);\n\n    GameReference.stage.sprite.addChild(graphics);\n\n    if (!persistent) {\n      this.DebugGraphicStack.push(graphics);\n\n      if (this.DebugGraphicStack.length > MAX_DEBUGGING_GRAPHICS_COUNT) {\n        const toBeRemoved = this.DebugGraphicStack.shift()!;\n\n        toBeRemoved.parent.removeChild(toBeRemoved);\n        toBeRemoved.destroy();\n      }\n    }\n\n    return graphics;\n  }\n\n  /** \n   * Draw a line from start to end on the canvas, for debugging.\n   * \n   * We expect this function to be called every tick in an update() function.\n   * Debug graphics drawn in the previous tick are removed in the game loop.\n   * \n   * If that's not what you want, pass persistent = true.\n   */\n  public static DrawLineV2(start: Vector2, end: Vector2, color = 0xff0000, persistent = false): Graphics {\n    if (IS_PRODUCTION) {\n      console.error(\"SHOULD NOT HAPPEN\")\n    }\n\n    return Debug.DrawLine(new Line({ start, end }), color, persistent);\n  }\n\n  /** \n   * Draw a line on the canvas, for debugging.\n   * \n   * We expect this function to be called every tick in an update() function.\n   * Debug graphics drawn in the previous tick are removed in the game loop.\n   * \n   * If that's not what you want, pass persistent = true.\n   */\n  public static DrawLine(line: Line, color = 0xff0000, persistent = false, target: \"stage\" | \"fixed\" = \"fixed\"): Graphics {\n    if (IS_PRODUCTION) {\n      console.error(\"SHOULD NOT HAPPEN\")\n    }\n\n    const graphics = new Graphics();\n\n    line.drawOnto(graphics, color);\n\n    if (target === \"fixed\") {\n      GameReference.fixedCameraStage.sprite.addChild(graphics);\n    } else {\n      GameReference.stage.sprite.addChild(graphics);\n    }\n\n    if (!persistent) {\n      this.DebugGraphicStack.push(graphics);\n\n      if (this.DebugGraphicStack.length > MAX_DEBUGGING_GRAPHICS_COUNT) {\n        const toBeRemoved = this.DebugGraphicStack.shift()!;\n\n        toBeRemoved.parent.removeChild(toBeRemoved);\n        toBeRemoved.destroy();\n      }\n    }\n\n    return graphics;\n  }\n\n  /** \n   * Draw a rectangle from start to end on the canvas, for debugging.\n   * \n   * We expect this function to be called every tick in an update() function.\n   * Debug graphics drawn in the previous tick are removed in the game loop.\n   * \n   * If that's not what you want, pass persistent = true.\n   */\n  public static DrawRect(rect: Rect, color = 0xff0000, persistent = false, target: \"stage\" | \"fixed\" = \"fixed\"): Graphics[] {\n    if (IS_PRODUCTION) {\n      console.error(\"SHOULD NOT HAPPEN\")\n    }\n\n    const lines: Graphics[] = [];\n\n    for (const line of rect.getLinesFromRect()) {\n      lines.push(Debug.DrawLine(line, color, persistent, target));\n    }\n\n    return lines;\n  }\n\n  /** \n   * Draw the bounds of a game object on the canvas, for debugging.\n   * \n   * We expect this function to be called every tick in an update() function.\n   * Debug graphics drawn in the previous tick are removed in the game loop.\n   * \n   * If that's not what you want, pass persistent = true.\n   */\n  public static DrawBounds(\n    entity: Entity | Sprite | Graphics | RectGroup | Container | Rect, \n    color = 0xff0000, \n    persistent = false,\n    target: \"stage\" | \"fixed\" = \"stage\"\n  ): Graphics[] {\n    if (IS_PRODUCTION) {\n      console.error(\"SHOULD NOT HAPPEN\")\n    }\n\n    if (entity instanceof Entity) {\n      entity = entity.collisionBounds()\n        .add(entity.positionAbsolute())\n        ;\n    } \n    \n    if (entity instanceof RectGroup) {\n      const results: Graphics[] = [];\n\n      for (const rect of entity.getRects()) {\n        const lines = Debug.DrawRect(rect, color, persistent, target);\n\n        for (const line of lines) {\n          results.push(line);\n        }\n      }\n\n      return results;\n    } else {\n      return Debug.DrawRect(new Rect({\n        x     : entity.x,\n        y     : entity.y,\n        width : entity.width,\n        height: entity.height,\n      }), color, persistent, target);\n    }\n  }\n\n  private static profiles: { [key: string]: number[] } = {};\n\n  /**\n   * Performance test a block of code.\n   */\n  public static Profile(name: string, cb: () => void): void {\n    Debug.profiles[name] = Debug.profiles[name] || [];\n\n    const start = window.performance.now();\n\n    cb(); \n\n    const end = window.performance.now();\n\n    Debug.profiles[name].push(end - start);\n\n    if (Debug.profiles[name].length === 60) {\n      const average = Debug.profiles[name].reduce((a, b) => a + b) / 60;\n      const rounded = Math.floor(average * 100) / 100;\n\n      Debug.profiles[name] = [];\n\n      console.log(`${ name }: ${ rounded }ms`);\n    }\n  }\n\n  static ResetDrawCount() {\n    (Sprite as any).drawCount = 0;\n    (Container as any).drawCount = 0;\n    drawn = [];\n  }\n\n  static GetDrawnObjects() {\n    return drawn;\n  }\n\n  static GetDrawCount() {\n    return (\n      (Sprite as any).drawCount + \n      (Container as any).drawCount\n    );\n  }\n\n  public static DebugStuff(state: BaseGameState) {\n    if (state.keys.justDown.Z) {\n      Debug.DebugMode = true;\n\n      state.stage.x = 0;\n      state.stage.y = 0;\n\n      if (state.stage.scale.x === 0.2) {\n        state.stage.scale = new Vector2({ x: 1, y: 1 });\n      } else {\n        state.stage.scale = new Vector2({ x: 0.2, y: 0.2 });\n      }\n    }\n\n    if (Debug.DebugMode) {\n      if (state.keys.down.W) {\n        state.stage.y += 20;\n      }\n\n      if (state.keys.down.S) {\n        state.stage.y -= 20;\n      }\n\n      if (state.keys.down.D) {\n        state.stage.x -= 20;\n      }\n\n      if (state.keys.down.A) {\n        state.stage.x += 20;\n      }\n    }\n  }\n\n  public static DebugShowRect(state: BaseGameState, rect: Rect) {\n    state.stage.scale = new Vector2({ x: 0.2, y: 0.2 });\n    state.stage.x = -rect.x * 0.2;\n    state.stage.y = -rect.y * 0.2;\n  }\n}\n\nlet drawn: any[] = [];\n\nif (IS_DEBUG) {\n  (Sprite as any).drawCount = 0;\n\n  (Sprite.prototype as any).__render = (Sprite.prototype as any)._render;\n  (Sprite.prototype as any)._render = function (renderer: any) {\n    (Sprite as any).drawCount++;\n    this.__render(renderer);\n    drawn.push(this);\n  };\n\n\n  (Sprite.prototype as any).__renderCanvas = (Sprite.prototype as any)._renderCanvas;\n  (Sprite.prototype as any)._renderCanvas = function (renderer: any) {\n    (Sprite as any).drawCount++;\n    this.__renderCanvas(renderer);\n    drawn.push(this);\n  };\n\n\n  // PIXI.Container\n\n  (Container as any).drawCount = 0;\n\n  (Container.prototype as any).__render = (Container.prototype as any)._render;\n  (Container.prototype as any)._render = function (renderer: any) {\n    (Container as any).drawCount++;\n    this.__render(renderer);\n    drawn.push(this);\n  };\n\n\n  (Container.prototype as any).__renderCanvas = (Container.prototype as any)._renderCanvas;\n  (Container.prototype as any)._renderCanvas = function (renderer: any) {\n    (Container as any).drawCount++;\n    this.__renderCanvas(renderer);\n    drawn.push(this);\n  };\n}","export class HashSet<K extends { hash(): string }> {\n  private _values: HashMap<K, K>;\n\n  constructor(initialValues: K[] = []) {\n    this._values = new HashMap<K, K>();\n\n    for (const value of initialValues) {\n      this.put(value);\n    }\n  }\n\n  remove(key: K): void {\n    this._values.remove(key);\n  }\n\n  put(key: K): void {\n    this._values.put(key, key);\n  }\n\n  get(key: K): boolean {\n    return this._values.get(key) !== undefined;\n  }\n\n  values(): K[] {\n    return this._values.values();\n  }\n}\n\nexport class HashMap<K extends { hash(): string }, V> {\n  private _values: { [key: string]: V } = {};\n\n  put(key: K, value: V) {\n    this._values[key.hash()] = value;\n  }\n\n  remove(key: K): void {\n    delete this._values[key.hash()];\n  }\n\n  get(key: K): V {\n    return this._values[key.hash()];\n  }\n\n  values(): V[] {\n    return Object.keys(this._values).map(key => this._values[key]);\n  }\n}\n\nexport class DefaultHashMap<K extends { hash(): string }, V> {\n  private _values: { [key: string]: V } = {};\n  private _makeDefault: () => V;\n\n  constructor(makeDefaultValue: () => V) {\n    this._makeDefault = makeDefaultValue;\n  }\n\n  put(key: K, value: V) {\n    this._values[key.hash()] = value;\n  }\n\n  get(key: K): V {\n    if (this._values[key.hash()] === undefined) {\n      this._values[key.hash()] = this._makeDefault();\n    } \n\n    return this._values[key.hash()];\n  }\n}\n\n","import { Vector2, IVector2 } from \"./geometry/vector2\";\nimport { Entity } from \"./entity\";\nimport { Rect } from \"./geometry/rect\";\nimport { Debug } from \"./debug\";\nimport { IGameState } from \"Library\";\n\nexport class Camera {\n  private static LERP_SPEED_X = 0.03;\n  private static LERP_SPEED_Y = 0.4;\n\n\n  /**\n   * Top left coordinate of the camera.\n   */\n  private _position = Vector2.Zero;\n  private _desiredPosition = Vector2.Zero;\n  private _stage: Entity;\n  private _canvasWidth: number;\n  private _canvasHeight: number;\n  private _currentBounds: Rect;\n\n  constructor(props: {\n    stage: Entity;\n    state: IGameState;\n    canvasWidth: number;\n    canvasHeight: number;\n    scale: number;\n    bounds: Rect;\n  }) {\n    this._stage = props.stage;\n    this._canvasWidth = props.canvasWidth / props.scale;\n    this._canvasHeight = props.canvasHeight / props.scale;\n    this._currentBounds = props.bounds;\n\n    this._immediatelyCenterOn(new Vector2({\n      x: this._canvasWidth / 2,\n      y: this._canvasHeight / 2\n    }));\n\n    this._desiredPosition = this._position;\n  }\n\n  public get center(): Vector2 {\n    return new Vector2({\n      x: this._position.x + this._canvasWidth / 2,\n      y: this._position.y + this._canvasHeight / 2\n    });\n  }\n\n  public setBounds(newBounds: Rect) {\n    this._currentBounds = newBounds;\n  }\n\n  public getBounds(): Rect {\n    return this._currentBounds;\n  }\n\n  public cameraFrame(): Rect {\n    return new Rect({\n      x: this.center.x - this._canvasWidth / 2,\n      y: this.center.y - this._canvasHeight / 2,\n      width: this._canvasWidth,\n      height: this._canvasHeight,\n    });\n  }\n\n  private halfDimensions(): Vector2 {\n    return new Vector2({\n      x: this._canvasWidth / 2,\n      y: this._canvasHeight / 2\n    });\n  }\n\n  private _immediatelyCenterOn = (position: IVector2) => {\n    this._position = new Vector2(position).subtract(this.halfDimensions());\n  };\n\n  centerOn = (position: IVector2, immediate = false) => {\n    if (immediate) {\n      this._immediatelyCenterOn(position);\n    } else {\n      this._desiredPosition = new Vector2(position).subtract(this.halfDimensions());\n    }\n  };\n\n  calculateDesiredPosition = (): Vector2 => {\n    let desiredPosition = this._desiredPosition;\n\n    const currentBounds = this._currentBounds;\n\n    if (!currentBounds) {\n      console.error(\"no region for camera!\");\n\n      return desiredPosition;\n    }\n\n    if (currentBounds.width < this._canvasWidth || currentBounds.height < this._canvasHeight) {\n      throw new Error(`There is a region on the map which is too small for the camera at x: ${currentBounds.x} y: ${currentBounds.y}.`);\n    }\n\n    // fit the camera rect into the regions rect\n\n    if (desiredPosition.x < currentBounds.left) {\n      desiredPosition = desiredPosition.withX(currentBounds.left);\n    }\n\n    if (desiredPosition.x + this.cameraFrame().width > currentBounds.right) {\n      desiredPosition = desiredPosition.withX(currentBounds.right - this._canvasWidth);\n    }\n\n    if (desiredPosition.y < currentBounds.top) {\n      desiredPosition = desiredPosition.withY(currentBounds.top);\n    }\n\n    if (desiredPosition.y + this.cameraFrame().height > currentBounds.bottom) {\n      desiredPosition = desiredPosition.withY(currentBounds.bottom - this._canvasHeight);\n    }\n\n    return desiredPosition;\n  };\n\n  update = (state: IGameState) => {\n    if (Debug.DebugMode) {\n      return;\n    }\n\n    const desiredPosition = this.calculateDesiredPosition();\n\n    this._position = this._position.lerp2D(desiredPosition, Camera.LERP_SPEED_X, Camera.LERP_SPEED_Y);\n\n    this._position = new Vector2(\n      Math.floor(this._position.x / 4) * 4,\n      Math.floor(this._position.y / 4) * 4\n    );\n\n    this._stage.x = Math.floor(-this._position.x);\n    this._stage.y = Math.floor(-this._position.y);\n  };\n}","import { Application, Renderer, Point } from \"pixi.js\";\nimport { Entity } from \"./entity\";\nimport { Debug } from \"./debug\";\nimport { HashSet } from \"./data_structures/hash\";\nimport { TypesafeLoader, AllResourcesType } from \"./typesafe_loader\";\nimport { CreateGame as ReactMountGame } from \"./react/react_root\";\nimport { Camera } from \"./camera\";\nimport { DebugFlagsType } from \"./react/debug_flag_buttons\";\nimport { CollisionHandler } from \"./collision_handler\";\nimport { Rect } from \"./geometry/rect\";\n// import { CoroutineManager } from \"./coroutine_manager\";\nimport { IGameState } from 'Library';\nimport { BaseGameState } from \"./base_state\";\n\nexport let GameReference: BaseGame<any>;\n\nexport type GameArgs = {\n  scale: number;\n  canvasWidth: number;\n  canvasHeight: number;\n  tileHeight: number;\n  tileWidth: number;\n  debugFlags: DebugFlagsType;\n  state: Omit<IGameState, keyof BaseGameState>;\n  assets: TypesafeLoader<any>;\n};\n\nexport const StageName = \"Stage\";\nexport const FixedStageName = \"FixedStage\";\nexport const ParallaxStageName = \"ParallaxStage\";\n\nexport class BaseGame<TResources extends AllResourcesType = {}> {\n  app: PIXI.Application;\n\n  state: IGameState;\n\n  /** \n   * The root of the display hierarchy for the game. Everything that exists in\n   * the game that isn't fixed as the camera moves should be under this.\n   */\n  stage: Entity;\n\n  parallaxStage: Entity;\n\n  /**\n   * A stage for things in the game that don't move when the camera move and are\n   * instead fixed to the screen. For example, the HUD.\n   */\n  fixedCameraStage: Entity;\n\n  private assets: TypesafeLoader<TResources>;\n\n  renderer: Renderer;\n\n  camera: Camera;\n\n  collisionHandler: CollisionHandler;\n\n  // coroutineManager: CoroutineManager;\n\n  constructor(props: GameArgs) {\n    GameReference = this;\n\n    // this.coroutineManager = new CoroutineManager(this);\n    this.state = {\n      ...(new BaseGameState()),\n      ...props.state,\n    }\n\n    const view = document.getElementById('canvas');\n\n    if (!view) {\n      // throw new Error(\"I couldn't find an element named #canvas on initialization. Giving up!\")\n    }\n\n    this.collisionHandler = new CollisionHandler({\n      canvasWidth: props.canvasWidth / props.scale,\n      canvasHeight: props.canvasHeight / props.scale,\n      tileHeight: props.tileHeight,\n      tileWidth: props.tileWidth,\n    });\n\n    this.app = new Application({\n      width: props.canvasWidth,\n      height: props.canvasHeight,\n      powerPreference: \"low-power\",\n      antialias: false,\n      transparent: false,\n      resolution: window.devicePixelRatio,\n      autoDensity: true,\n      backgroundColor: 0x4e5759,\n      view: view as HTMLCanvasElement,\n    });\n\n    this.app.stage.scale = new Point(props.scale, props.scale);\n\n    this.parallaxStage = new Entity({ name: ParallaxStageName });\n    this.stage = new Entity({ name: StageName });\n    this.fixedCameraStage = new Entity({ name: FixedStageName });\n\n    this.state.stage = this.stage;\n\n    this.app.stage.addChild(this.parallaxStage.sprite);\n    this.app.stage.addChild(this.stage.sprite);\n    this.app.stage.addChild(this.fixedCameraStage.sprite);\n\n    this.state.renderer = this.app.renderer;\n    this.state.stage = this.stage;\n\n    this.assets = props.assets;\n    this.assets.onLoadComplete(() => this.startGameLoop());\n    this.assets.onLoadComplete(() => this.initialize());\n\n    this.renderer = this.app.renderer;\n\n    this.camera = new Camera({\n      stage: this.stage,\n      state: this.state,\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      scale: props.scale,\n      bounds: new Rect({ x: -5000, y: -5000, width: 10000, height: 10000 }),\n    });\n\n    this.state.camera = this.camera;\n\n    // ReactMountGame(this, props.debugFlags);\n\n    this.stage.sprite.sortableChildren = true;\n    this.fixedCameraStage.sprite.sortableChildren = true;\n  }\n\n  /**\n   * Called after resources are finished loading.\n   */\n  initialize() {\n\n  }\n\n  startGameLoop = () => {\n    this.app.ticker.add(() => this.gameLoop());\n  };\n\n  gameLoop() {\n    Debug.Clear();\n\n    const { entities } = this.state;\n\n    if (!this.state.lastCollisionGrid) {\n      const grid = this.collisionHandler.buildCollisionGrid({\n        bounds: new Rect({ x: 0, y: 0, width: 5000, height: 5000 }),\n        entities: this.state.entities,\n      });\n\n      this.state.lastCollisionGrid = grid;\n    }\n\n    this.state.tick++;\n\n    this.state.keys.update();\n\n    for (const entity of entities.values()) {\n      entity.baseUpdate(this.state);\n    }\n\n    this.state.entities = new HashSet(entities.values().filter(ent => !this.state.toBeDestroyed.includes(ent)));\n\n    for (const entity of this.state.toBeDestroyed) {\n      if (entity.sprite.parent) {\n        entity.sprite.parent.removeChild(entity.sprite);\n      }\n\n      // this.coroutineManager.stopCoroutinesOwnedBy(entity);\n    }\n\n    this.state.toBeDestroyed = [];\n\n    const activeEntities = new HashSet(this.state.entities.values().filter(e => e.activeModes.includes(this.state.mode)));\n\n    const grid = this.collisionHandler.buildCollisionGrid({\n      bounds: this.camera.getBounds(),\n      entities: activeEntities,\n    });\n\n    this.state.lastCollisionGrid = grid;\n\n    this.collisionHandler.resolveCollisions({\n      entities: activeEntities,\n      grid: grid,\n    });\n\n    this.camera.update(this.state);\n\n    // this.coroutineManager.updateCoroutines(this.state);\n\n    // let foo = Debug.GetDrawnObjects();\n\n    // for (const f of Debug.GetDrawnObjects()) {\n    //   if (f instanceof AugmentedSprite) {\n    //     if (f.width > 1024) { \n    //       f.visible = false; \n    //     }\n    //   }\n    // }\n\n    // let foo = Debug.GetDrawn();\n\n    Debug.ResetDrawCount();\n  };\n}","// 2D array that allows for negative indices\nexport class DefaultGrid<T> {\n  private _data: { [key: number]: { [key: number]: T} } = {};\n  private _makeDefault: (x: number, y: number) => T;\n  private _count = 0;\n\n  constructor(makeDefault: (x: number, y: number) => T) {\n    this._makeDefault = makeDefault;\n  }\n\n  getCount() {\n    return this._count;\n  }\n\n  keys(): { x: number, y: number }[] {\n    const result: { x: number, y: number }[] = [];\n\n    for (const x of Object.keys(this._data)) {\n      const inner = this._data[Number(x)];\n\n      for (const y of Object.keys(inner)) {\n        result.push({ \n          x: Number(x), \n          y: Number(y),\n        });\n      }\n    }\n\n    return result;\n  }\n\n  values(): T[] {\n    const result: T[] = [];\n\n    for (const x of Object.keys(this._data)) {\n      const inner = this._data[Number(x)];\n\n      for (const y of Object.keys(inner)) {\n        result.push(inner[Number(y)]);\n      }\n    }\n\n    return result;\n\n  }\n\n  set(x: number, y: number, value: T) {\n    if (!this._data[x]) {\n      this._data[x] = {};\n    }\n\n    if (!this._data[x][y]) {\n      this._count++;\n    }\n\n    this._data[x][y] = value;\n  }\n\n  get(x: number, y: number): T {\n    if (!this._data[x]) {\n      this._data[x] = {};\n    }\n\n    if (this._data[x][y] === undefined) {\n      this._data[x][y] = this._makeDefault(x, y);\n    }\n\n    return this._data[x][y];\n  }\n}\n","import { Graphics } from \"pixi.js\";\nimport { Rect } from \"./geometry/rect\";\nimport { Entity } from \"./entity\";\nimport { Vector2 } from \"./geometry/vector2\";\nimport { DefaultGrid } from \"./data_structures/default_grid\";\nimport { RectGroup } from \"./geometry/rect_group\";\nimport { Debug } from \"./debug\";\n\nexport type CollisionResultRect = {\n  firstRect: Rect;\n  secondRect: Rect;\n  otherEntity?: Entity;\n  thisEntity?: Entity;\n  overlap: Rect;\n};\n\ntype CollisionResultPoint = {\n  firstRect: Rect;\n  secondRect: Rect;\n  firstEntity?: Entity;\n  secondEntity?: Entity;\n  overlap: Vector2;\n};\n\nexport class CollisionGrid {\n  private _position: Vector2 = Vector2.Zero;\n  private _width: number;\n  private _height: number;\n  private _cellSize: number;\n  private _numCellsPerRow: number;\n  private _numCellsPerCol: number;\n  private _cells: DefaultGrid<Cell>;\n  private _renderLines: Graphics | null = null;\n\n  constructor(props: { width: number; height: number; cellSize: number }) {\n    const { width, height, cellSize } = props;\n\n    this._width = width;\n    this._height = height;\n    this._cellSize = cellSize;\n\n    this._numCellsPerRow = Math.ceil(width / cellSize);\n    this._numCellsPerCol = Math.ceil(height / cellSize);\n\n    this._cells = new DefaultGrid<Cell>(\n      (x, y) =>\n        new Cell(new Vector2({ x: x * cellSize, y: y * cellSize }), cellSize)\n    );\n  }\n\n  debug() {\n    for (let x = 0; x < 10; x++) {\n      for (let y = 0; y < 10; y++) {\n        // Draw cell\n\n        Debug.DrawRect(\n          new Rect({\n            x: x * this._cellSize,\n            y: y * this._cellSize,\n            width: this._cellSize,\n            height: this._cellSize,\n          }),\n          0xff0000,\n          true,\n          \"fixed\"\n        );\n\n        for (const obj of this._cells.get(x, y).colliders) {\n          Debug.DrawRect(obj.rect, 0xff0000, true, \"fixed\");\n        }\n      }\n    }\n  }\n\n  public get topLeft() {\n    return this._position;\n  }\n\n  public get center() {\n    return this._position.add({ x: this._width / 2, y: this._height / 2 });\n  }\n\n  /**\n   * Checks if the provided rect would collide with anything on the grid. If an\n   * entity is passed in, ignores that entity when checking for collisions.\n   * (Does not add the rect to the grid.)\n   */\n  getRectCollisions = (\n    rect: Rect,\n    skipEntity?: Entity\n  ): CollisionResultRect[] => {\n    const cells: Cell[] = [];\n\n    const lowX = Math.floor(rect.x / this._cellSize);\n    const highX = Math.ceil((rect.x + rect.width) / this._cellSize);\n\n    const lowY = Math.floor(rect.y / this._cellSize);\n    const highY = Math.ceil((rect.y + rect.height) / this._cellSize);\n\n    for (let x = lowX; x < highX; x++) {\n      for (let y = lowY; y < highY; y++) {\n        cells.push(this._cells.get(x, y));\n      }\n    }\n\n    const collisions: CollisionResultRect[] = [];\n\n    for (const cell of cells) {\n      for (const { rect: rectInCell, entity: entityInCell } of cell.colliders) {\n        if (entityInCell === skipEntity) {\n          continue;\n        }\n\n        const overlap = rect.getIntersection(rectInCell);\n\n        if (overlap) {\n          collisions.push({\n            firstRect: rectInCell,\n            otherEntity: entityInCell,\n\n            secondRect: rect,\n            thisEntity: skipEntity,\n\n            overlap,\n          });\n        }\n      }\n    }\n\n    return collisions;\n  };\n\n  getRectGroupCollisions = (\n    group: RectGroup,\n    entity?: Entity\n  ): CollisionResultRect[] => {\n    let collisions: CollisionResultRect[] = [];\n\n    for (const rect of group.getRects()) {\n      collisions = [...collisions, ...this.getRectCollisions(rect, entity)];\n    }\n\n    return collisions;\n  };\n\n  /**\n   * Same as collidesRect but immediately returns true if there's a collision.\n   */\n  collidesRectFast = (rect: Rect, entity?: Entity): boolean => {\n    const corners = rect.getCorners();\n    const cells = corners.map((corner) =>\n      this._cells.get(\n        Math.floor(corner.x / this._cellSize),\n        Math.floor(corner.y / this._cellSize)\n      )\n    );\n\n    const uniqueCells: { [key: string]: Cell } = {};\n\n    for (const cell of cells) {\n      uniqueCells[cell.hash()] = cell;\n    }\n\n    const values = Object.values(uniqueCells);\n\n    for (const cell of values) {\n      for (const { rect: rectInCell, entity: entityInCell } of cell.colliders) {\n        if (entityInCell === entity) {\n          continue;\n        }\n\n        const overlap = rect.intersects(rectInCell);\n\n        if (overlap) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  collidesPoint = (\n    point: Vector2,\n    takeFirst = false\n  ): CollisionResultPoint[] => {\n    const cell = this._cells.get(\n      Math.floor(point.x / this._cellSize),\n      Math.floor(point.y / this._cellSize)\n    );\n    const collisions: CollisionResultPoint[] = [];\n\n    for (const { rect, entity: entityInCell } of cell.colliders) {\n      const overlap = rect.contains(point);\n\n      if (overlap) {\n        collisions.push({\n          firstRect: rect,\n          firstEntity: entityInCell,\n\n          secondRect: rect,\n          secondEntity: undefined,\n\n          overlap: point,\n        });\n\n        if (takeFirst) {\n          return collisions;\n        }\n      }\n    }\n\n    return collisions;\n  };\n\n  /**\n   * Get all collisions on the grid.\n   */\n  getAllCollisions = (): CollisionResultRect[] => {\n    const result: CollisionResultRect[] = [];\n\n    for (let cell of this.cells) {\n      const cellRects = cell.colliders;\n\n      for (let i = 0; i < cellRects.length; i++) {\n        for (let j = i; j < cellRects.length; j++) {\n          if (i === j) continue;\n\n          const collider1 = cellRects[i];\n          const collider2 = cellRects[j];\n\n          const intersection = collider1.rect.getIntersection(\n            collider2.rect,\n            false\n          );\n\n          if (intersection !== undefined) {\n            result.push({\n              firstRect: collider1.rect,\n              secondRect: collider2.rect,\n              otherEntity: collider1.entity,\n              thisEntity: collider2.entity,\n              overlap: intersection,\n            });\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  public get cells(): Cell[] {\n    return this._cells.values();\n  }\n\n  clear = () => {\n    for (const cell of this._cells.values()) {\n      cell.removeAll();\n    }\n  };\n\n  // Add a rect to the hash grid.\n  // Checks each corner, to handle entities that span multiply grid cells.\n  add = (rect: Rect, associatedEntity?: Entity) => {\n    const startX = Math.floor(rect.x / this._cellSize);\n    const stopX = Math.floor(rect.right / this._cellSize);\n    const startY = Math.floor(rect.y / this._cellSize);\n    const stopY = Math.floor(rect.bottom / this._cellSize);\n\n    for (let x = startX; x <= stopX; x++) {\n      for (let y = startY; y <= stopY; y++) {\n        this._cells.get(x, y).add(rect, associatedEntity);\n      }\n    }\n  };\n\n  addRectGroup = (group: RectGroup, associatedEntity?: Entity) => {\n    for (const rect of group.getRects()) {\n      this.add(rect, associatedEntity);\n    }\n  };\n}\n\ntype CellItem = {\n  rect: Rect;\n  entity?: Entity;\n};\n\nexport class Cell {\n  private _bounds: Rect;\n  private _rects: CellItem[] = [];\n\n  constructor(topLeft: Vector2, cellSize: number) {\n    this._bounds = Rect.FromPoint(topLeft, cellSize);\n  }\n\n  public get colliders(): CellItem[] {\n    return this._rects;\n  }\n\n  add = (rect: Rect, entity?: Entity) => {\n    this._rects.push({ rect, entity });\n  };\n\n  removeAll = () => {\n    this._rects = [];\n  };\n\n  hash(): string {\n    return this._bounds.toString();\n  }\n}\n","import { Entity } from \"./entity\";\nimport { Vector2 } from \"./geometry/vector2\";\nimport { CollisionGrid, CollisionResultRect } from \"./collision_grid\";\nimport { HashSet } from \"./data_structures/hash\";\nimport { Rect } from \"./geometry/rect\";\nimport { RectGroup } from \"./geometry/rect_group\";\n\nexport type HitInfo = {\n  hit: boolean;\n  left?: boolean;\n  right?: boolean;\n  up?: boolean;\n  down?: boolean;\n  collisions: CollisionResultRect[];\n  interactions: CollisionResultRect[];\n};\n\nexport class CollisionHandler {\n  private _canvasWidth: number;\n  private _canvasHeight: number;\n  private _tileSize: number;\n\n  constructor(props: {\n    canvasWidth: number;\n    canvasHeight: number;\n    tileWidth: number;\n    tileHeight: number;\n  }) {\n    if (props.tileWidth !== props.tileHeight) {\n      throw new Error(\"Collision handler does not currently support tileWidth != tileHeight\");\n    }\n\n    this._canvasWidth = props.canvasWidth;\n    this._canvasHeight = props.canvasHeight;\n    this._tileSize = props.tileWidth;\n  }\n\n  buildCollisionGrid = (props: {\n    entities: HashSet<Entity>;\n    bounds: Rect;\n  }): CollisionGrid => {\n    const { entities, bounds } = props;\n\n    const grid = new CollisionGrid({\n      width: 2 * this._canvasWidth,\n      height: 2 * this._canvasHeight,\n      cellSize: 4 * this._tileSize,\n    });\n\n    const collideableEntities = entities.values().filter(x => x.isCollideable() || x.isInteractable());\n\n    for (const entity of collideableEntities) {\n      const collisionRect = entity.collisionBounds().add(entity.positionAbsolute());\n\n      if (collisionRect.intersects(bounds)) {\n        const rectOrRectGroup = collisionRect;\n\n        if (rectOrRectGroup instanceof Rect) {\n          grid.add(rectOrRectGroup, entity);\n        } else {\n          grid.addRectGroup(rectOrRectGroup, entity);\n        }\n      }\n    }\n\n    return grid;\n  };\n\n  getHitsAt = (grid: CollisionGrid, bounds: Rect | RectGroup, entity: Entity): { hits: CollisionResultRect[]; interactions: CollisionResultRect[] } => {\n    const xHits =\n      bounds instanceof Rect\n        ? grid.getRectCollisions(bounds, entity)\n        : grid.getRectGroupCollisions(bounds, entity);\n\n    const hits = xHits.filter(x => !x.otherEntity || (x.otherEntity && !x.otherEntity.isInteractable()));\n    const interactions = xHits.filter(x => (x.otherEntity && x.otherEntity.isInteractable()));\n\n    return {\n      hits,\n      interactions,\n    };\n  }\n\n  resolveCollisions = (props: {\n    entities: HashSet<Entity>;\n    grid: CollisionGrid;\n  }) => {\n    const { entities, grid } = props;\n\n    for (const entity of entities.values()) {\n      const hitInfo: HitInfo = {\n        hit: false,\n        collisions: [],\n        interactions: [],\n      };\n\n      if (entity.velocity.x === 0 && entity.velocity.y === 0) { continue; }\n\n      let updatedBounds = entity.collisionBounds().add(entity.positionAbsolute());\n\n      const xVelocity = new Vector2({ x: entity.velocity.x, y: 0 });\n      const yVelocity = new Vector2({ x: 0, y: entity.velocity.y });\n\n      let delta = Vector2.Zero;\n\n      // resolve x-axis\n\n      delta = delta.add(xVelocity);\n      updatedBounds = updatedBounds.add(xVelocity);\n\n      const { hits: xHits, interactions: xInteractions } = this.getHitsAt(grid, updatedBounds, entity);\n\n      if (xHits.length > 0) {\n        hitInfo.hit = true;\n        hitInfo.right = entity.velocity.x > 0;\n        hitInfo.left = entity.velocity.x < 0;\n        hitInfo.collisions = [...hitInfo.collisions, ...xHits];\n\n        delta = delta.subtract(xVelocity);\n        updatedBounds = updatedBounds.subtract(xVelocity);\n\n        for (let x = 0; x < xVelocity.x; x++) {\n          updatedBounds = updatedBounds.add(new Vector2(1, 0));\n          delta = delta.add(new Vector2(1, 0));\n\n          const { hits: newXHits } = this.getHitsAt(grid, updatedBounds, entity);\n\n          if (newXHits.length > 0) {\n            updatedBounds = updatedBounds.add(new Vector2(-1, 0));\n            delta = delta.add(new Vector2(-1, 0));\n\n            break;\n          }\n        }\n      }\n\n      if (xInteractions.length > 0) {\n        hitInfo.interactions = [...hitInfo.interactions, ...xInteractions];\n      }\n\n      // resolve y-axis\n\n      delta = delta.add(yVelocity);\n      updatedBounds = updatedBounds.add(yVelocity);\n\n      const { hits: yHits, interactions: yInteractions } = this.getHitsAt(grid, updatedBounds, entity);\n\n      if (yHits.length > 0) {\n        hitInfo.hit = true;\n        hitInfo.up = entity.velocity.y < 0;\n        hitInfo.down = entity.velocity.y > 0;\n        hitInfo.collisions = [...hitInfo.collisions, ...yHits];\n\n        delta = delta.subtract(yVelocity);\n        updatedBounds = updatedBounds.subtract(yVelocity);\n\n        for (let y = 0; y < yVelocity.y; y++) {\n          updatedBounds = updatedBounds.add(new Vector2(0, 1));\n          delta = delta.add(new Vector2(0, 1));\n\n          const { hits: newYHits } = this.getHitsAt(grid, updatedBounds, entity);\n\n          if (newYHits.length > 0) {\n            updatedBounds = updatedBounds.add(new Vector2(0, -1));\n            delta = delta.add(new Vector2(0, -1));\n\n            break;\n          }\n        }\n      }\n\n      if (yInteractions.length > 0) {\n        hitInfo.interactions = [...hitInfo.interactions, ...yInteractions];\n      }\n\n      entity.hitInfo = hitInfo;\n\n      hitInfo.hit = hitInfo.collisions.length > 0;\n\n      entity.x = entity.x + delta.x;\n      entity.y = entity.y + delta.y;\n    }\n  };\n}","const KeyInfo = () => ({\n  Q       : false,\n  W       : false,\n  E       : false,\n  R       : false,\n  T       : false,\n  Y       : false,\n  U       : false,\n  I       : false,\n  O       : false,\n  P       : false,\n  A       : false,\n  S       : false,\n  D       : false,\n  F       : false,\n  G       : false,\n  H       : false,\n  J       : false,\n  K       : false,\n  L       : false,\n  Z       : false,\n  X       : false,\n  C       : false,\n  V       : false,\n  B       : false,\n  N       : false,\n  M       : false,\n  Up      : false,\n  Down    : false,\n  Left    : false,\n  Right   : false,\n  Shift   : false,\n  Spacebar: false,\n  Enter   : false,\n});\n\nexport type KeyInfoType = ReturnType<typeof KeyInfo>;\n\ninterface QueuedKeyboardEvent {\n  isDown: boolean;\n  event : KeyboardEvent;\n}\n\nexport class KeyboardState {\n  public down     = KeyInfo();\n  public justDown = KeyInfo();\n  public justUp   = KeyInfo();\n\n  private _queuedEvents: QueuedKeyboardEvent[] = [];\n\n  constructor() {\n    document.addEventListener(\"keydown\", e => this.keyDown(e), false);\n    document.addEventListener(\"keyup\"  , e => this.keyUp(e),   false);\n    window.addEventListener(\"blur\"     , () => { \n      this.clear();\n    }, false);\n  }\n\n  public clear() {\n    this.down          = KeyInfo(); \n    this.justDown      = KeyInfo(); \n    this.justUp        = KeyInfo(); \n    this._queuedEvents = [];\n  }\n\n  private keyUp(e: KeyboardEvent): void {\n    // Since events usually happen between two ticks, we queue them up to be\n    // processed on the next tick.\n\n    this._queuedEvents.push({ event: e, isDown: false });\n  }\n\n  private keyDown(e: KeyboardEvent): void {\n    this._queuedEvents.push({ event: e, isDown: true });\n  }\n\n  private eventToKey(event: KeyboardEvent): string {\n    const number = event.keyCode || event.which;\n    let str: string;\n\n    switch (number) {\n      case 13: str = \"Enter\"; break;\n      case 16: str = \"Shift\"; break;\n      case 37: str = \"Left\" ; break;\n      case 38: str = \"Up\"   ; break;\n      case 39: str = \"Right\"; break;\n      case 40: str = \"Down\" ; break;\n\n      /* A-Z */\n      default: str = String.fromCharCode(number);\n    }\n\n    if (str === \" \") {\n      return \"Spacebar\";\n    }\n\n    if (str.length === 1) {\n      return str.toUpperCase();\n    }\n\n    return str[0].toUpperCase() + str.slice(1);\n  }\n\n  update(): void {\n    for (const key of Object.keys(this.justDown)) {\n      this.justDown[key as keyof KeyInfoType] = false;\n      this.justUp[key as keyof KeyInfoType] = false;\n    }\n\n    for (const queuedEvent of this._queuedEvents) {\n      const key = this.eventToKey(queuedEvent.event);\n\n      if (queuedEvent.isDown) {\n        if (!this.down[key as keyof KeyInfoType]) {\n          this.justDown[key as keyof KeyInfoType] = true;\n        }\n\n        this.down[key as keyof KeyInfoType] = true;\n      } else {\n        if (this.down[key as keyof KeyInfoType]) {\n          this.justUp[key as keyof KeyInfoType] = true;\n        }\n        \n        this.down[key as keyof KeyInfoType] = false;\n      }\n    }\n\n    this._queuedEvents = [];\n  }\n}","import { Renderer } from \"pixi.js\";\nimport { KeyboardState } from \"./keyboard\";\nimport { Entity } from \"./entity\";\nimport { HashSet } from \"./data_structures/hash\";\nimport { IGameState } from \"Library\";\nimport { Mode } from \"Library\";\nimport { CollisionGrid } from \"./collision_grid\";\nimport { Camera } from \"./camera\";\n\nexport class BaseGameState implements Partial<IGameState> {\n  camera           !: Camera;\n  keys: KeyboardState;\n  renderer         !: Renderer;\n  entities = new HashSet<Entity>();\n  toBeDestroyed: Entity[] = [];\n  stage            !: Entity;\n  spriteToEntity: { [key: number]: Entity } = {};\n  mode: Mode = \"Normal\";\n  lastCollisionGrid!: CollisionGrid;\n\n  constructor() {\n    this.keys = new KeyboardState();\n  }\n}\n","// 2D array that allows for negative indices\nexport class Grid<T> {\n  private _data: { [key: number]: { [key: number]: T} } = {};\n\n  getCount() {\n    let count = 0;\n\n    for (const key of Object.keys(this._data)) {\n      const inner = this._data[Number(key)];\n\n      count += Object.keys(inner).length;\n    }\n\n    return count;\n  }\n\n  keys(): { x: number, y: number }[] {\n    const result: { x: number, y: number }[] = [];\n\n    for (const x of Object.keys(this._data)) {\n      const inner = this._data[Number(x)];\n\n      for (const y of Object.keys(inner)) {\n        result.push({ \n          x: Number(x), \n          y: Number(y),\n        });\n      }\n    }\n\n    return result;\n  }\n\n  set(x: number, y: number, value: T) {\n    if (!this._data[x]) {\n      this._data[x] = {};\n    }\n\n    this._data[x][y] = value;\n  }\n\n  get(x: number, y: number): T | null {\n    if (!this._data[x]) {\n      return null;\n    }\n\n    if (this._data[x][y] === undefined) {\n      return null;\n    }\n\n    return this._data[x][y];\n  }\n\n  getOrDefault(x: number, y: number, otherwise: T): T {\n    const result = this.get(x, y);\n\n    if (result === null) {\n      return otherwise;\n    } else {\n      return result;\n    }\n  }\n}\n","import { Rectangle, Texture } from \"pixi.js\";\n// import { AssetName } from '../game/assets';\nimport { Tile } from \"./tilemap/tilemap_types\";\nimport { TypesafeLoader } from \"./typesafe_loader\";\n// import { C } from '../game/constants';\n\nexport class TextureCache {\n  static Cache: { [key: string]: Texture } = {};\n\n  public static GetTextureFromSpritesheet({\n    resourceName: textureName,\n    x,\n    y,\n    tilewidth,\n    tileheight,\n    assets,\n  }: {\n    resourceName: any; // AssetName;\n    x: number;\n    y: number;\n    tilewidth: number;\n    tileheight: number;\n    assets: TypesafeLoader<{}>;\n  }): Texture {\n    const key = `${textureName}-${x}-${y}`;\n\n    if (!TextureCache.Cache[key]) {\n      const texture = (assets.getResource(textureName) as Texture).clone();\n\n      texture.frame = new Rectangle(\n        x * tilewidth,\n        y * tileheight,\n        tilewidth,\n        tileheight\n      );\n\n      this.Cache[key] = texture;\n    }\n\n    return this.Cache[key];\n  }\n\n  public static GetTextureForTile({\n    assets,\n    tile,\n  }: {\n    assets: TypesafeLoader<{}>;\n    tile: Tile;\n  }): Texture {\n    const {\n      tile: { imageUrlRelativeToGame, spritesheetx, spritesheety },\n    } = tile;\n\n    return TextureCache.GetTextureFromSpritesheet({\n      // TODO: Is there any way to improve this cast?\n      // Once I add a loader for tilemaps, probably yes!\n      resourceName: imageUrlRelativeToGame.slice(\n        0,\n        imageUrlRelativeToGame.lastIndexOf(\".\")\n      ) as any, // as AssetName\n      x: spritesheetx,\n      y: spritesheety,\n      tilewidth: tile.tile.tilewidth,\n      tileheight: tile.tile.tileheight,\n      assets: assets,\n    });\n  }\n}\n","import { Entity } from \"../entity\";\nimport { Rect } from \"../geometry/rect\";\nimport { TiledObjectLayerJSON, Tile } from \"./tilemap_types\";\nimport { TextureCache } from \"../texture_cache\";\nimport { Grid } from \"../data_structures/grid\";\nimport { Texture } from \"pixi.js\";\nimport { TiledTilemap, MapLayer } from \"./tilemap\";\nimport { TilemapRegion } from \"./tilemap_data\";\nimport { TypesafeLoader } from \"../typesafe_loader\";\n\nexport type GetInstanceTypeProps = {\n  layerName: string; \n  x: number; \n  y: number \n}\n\ntype TilemapCustomObjectSingle = {\n  type            : \"single\";\n  name            : string;\n  getInstanceType : (\n    tex: Texture, \n    tileProperties: { [key: string]: unknown }, \n    props: GetInstanceTypeProps) => Entity | null;\n};\n\ntype TilemapCustomObjectGroup = {\n  type                 : \"group\";\n  names                : string[];\n  getInstanceType      : (tex: Texture) => Entity;\n  getGroupInstanceType : (props: GetInstanceTypeProps) => Entity;\n};\n\ntype TilemapCustomObjectRect = {\n  type     : \"rect\";\n  layerName: string;\n  process  : (rect: TilemapRegion) => void;\n};\n\nexport type TilemapCustomObjects = \n  | TilemapCustomObjectGroup\n  | TilemapCustomObjectSingle\n  | TilemapCustomObjectRect\n\nexport type ObjectInfo = { entity: Entity; layerName: string };\n\nexport class TiledTilemapObjects {\n  private _layers: TiledObjectLayerJSON[];\n  private _customObjects: TilemapCustomObjects[];\n  private _map: TiledTilemap;\n\n  /**\n   * Every custom object in the game.\n   */\n  private _allObjects: ObjectInfo[] = [];\n\n  private _assets: TypesafeLoader<any>;\n\n  constructor(props: {\n    assets       : TypesafeLoader<any>;\n    layers       : TiledObjectLayerJSON[];\n    customObjects: TilemapCustomObjects[];\n    map          : TiledTilemap;\n  }) {\n    const { layers, customObjects, map } = props;\n\n    this._assets        = props.assets;\n    this._layers        = layers;\n    this._customObjects = customObjects;\n    this._map           = map;\n\n    for (const layer of this._layers) {\n      const objectsInLayer = this.loadLayer(layer);\n\n      this._allObjects = [...this._allObjects, ...objectsInLayer];\n    }\n\n    this.turnOffAllObjects();\n  }\n\n  turnOffAllObjects() {\n    for (const customObject of this._allObjects) {\n      customObject.entity.stopUpdating();\n    }\n  }\n\n  loadObjectLayers(): MapLayer[] {\n    this.turnOffAllObjects();\n\n    let result: MapLayer[] = [];\n\n    for (const layer of this._layers) {\n      result.push({\n        entity     : new Entity({ name: layer.name }),\n        layerName  : layer.name,\n        objectLayer: true,\n      });\n    }\n\n    for (const object of this._allObjects) {\n      const associatedLayer = result.find(obj => obj.layerName === object.layerName)!;\n\n      associatedLayer.entity.addChild(object.entity);\n      object.entity.startUpdating();\n    }\n\n    return result;\n  }\n\n  private loadLayer(layer: TiledObjectLayerJSON): ObjectInfo[] {\n    const results: ObjectInfo[] = [];\n\n    type ObjectInGroup = {\n      name : string;\n      tile : Tile;\n      gridX: number;\n      gridY: number;\n    };\n\n    const objectsToGroup: ObjectInGroup[] = [];\n\n    // Step 0: \n    // Add all single objects\n\n    processNextObject:\n    for (const obj of layer.objects) {\n      if (!obj.gid) {\n        // this is probably a region, so see if we have one of those.\n\n        for (const customObject of this._customObjects) {\n          if (customObject.type === \"rect\" && customObject.layerName === layer.name) {\n            customObject.process({\n              rect: new Rect({\n                  x     : obj.x     ,\n                  y     : obj.y     ,\n                  width : obj.width ,\n                  height: obj.height,\n                }),\n              properties: TiledTilemap.ParseTiledProperties(obj.properties),\n            });\n\n            continue processNextObject;\n          }\n        }\n\n        throw new Error(`on layer ${ layer.name } at position x: ${ obj.x } and y: ${ obj.y } you have a rect region that's not being processed`);\n      }\n\n      const { spritesheet, tileProperties } = this._map._data.gidInfo(obj.gid);\n      const objProperties: { [key: string]: unknown } = {};\n\n      for (const { name, value } of (obj.properties || [])) {\n        tileProperties[name] = value;\n      }\n\n      const allProperties = {\n        ...tileProperties,\n        ...objProperties,\n      };\n\n      let newObj: Entity | null = null;\n      let x = obj.x;\n      let y = obj.y - spritesheet.tileheight // Tiled pivot point is (0, 1) so we need to subtract by tile height.\n\n      const tile = {\n        x             : x,\n        y             : y,\n        tile          : spritesheet,\n        isCollider    : this._map._data._gidHasCollision[obj.gid] || false,\n        gid           : obj.gid,\n        tileProperties: allProperties,\n      };\n\n      const tileName = allProperties.name as string;\n\n      if (tileName === undefined) {\n        throw new Error(\"Custom object needs a tile type\");\n      }\n\n      const associatedObject = this._customObjects.find(obj => {\n        if (obj.type === \"single\") {\n          return obj.name === tileName;\n        }\n\n        if (obj.type === \"group\") {\n          return obj.names.includes(tileName);\n        }\n\n        return false;\n      });\n\n      if (associatedObject === undefined) {\n        throw new Error(`Unhandled tile type: ${ tileName }`);\n      }\n\n      if (associatedObject.type === \"single\") {\n        if (associatedObject.name === tileName) {\n          const spriteTex = TextureCache.GetTextureForTile({ assets: this._assets, tile }); \n\n          newObj = associatedObject.getInstanceType(spriteTex, allProperties, {\n            layerName: layer.name,\n            x: tile.x,\n            y: tile.y,\n          });\n        }\n      } else if (associatedObject.type === \"group\") {\n        // add to the list of grouped objects, which we will process later.\n\n        if (associatedObject.names.includes(tileName)) {\n          objectsToGroup.push({\n            name: tileName,\n            tile: tile,\n            // TODO: We're making an assumption that the size of the objects\n            // are all the same. I think this is safe tho?\n            gridX: tile.x / obj.width,\n            gridY: tile.y / obj.height,\n          });\n        }\n      }\n\n      if (newObj) {\n        newObj.x = tile.x;\n        newObj.y = tile.y;\n\n        results.push({\n          entity   : newObj,\n          layerName: layer.name,\n        });\n      }\n    }\n\n    // Find all groups and add them\n    // Step 1: Load all objects into grid\n\n    const grid = new Grid<{ obj: ObjectInGroup, grouped: boolean }>();\n\n    for (const objectToGroup of objectsToGroup) {\n      grid.set(objectToGroup.gridX, objectToGroup.gridY, {\n        obj    : objectToGroup,\n        grouped: false,\n      });\n    }\n\n    // Step 2: BFS from each object to find all neighbors which are part of the\n    // group.\n\n    for (const obj of objectsToGroup) {\n      const result = grid.get(obj.gridX, obj.gridY);\n\n      if (!result) { throw new Error(\"Wat\"); }\n\n      const { grouped } = result;\n\n      if (grouped) {\n        continue;\n      }\n\n      // Step 2a: Find all names of objects in that group\n\n      let customObject: TilemapCustomObjectGroup | null = null;\n\n      for (const candidate of this._customObjects) {\n        if (candidate.type === \"group\") {\n          if (candidate.names.includes(obj.name)) {\n            customObject = candidate;\n\n            break;\n          }\n        }\n      }\n\n      if (customObject === null) {\n        throw new Error(\"HUH!?!?\");\n      }\n\n      // Step 2: Actually run BFS\n\n      const group: ObjectInGroup[] = [obj];\n      const groupEdge: ObjectInGroup[] = [obj];\n\n      while (groupEdge.length > 0) {\n        const current = groupEdge.pop()!;\n        const dxdy = [\n          [ 1,  0],\n          [-1,  0],\n          [ 0 , 1],\n          [ 0 ,-1],\n        ];\n\n        for (const [dx, dy] of dxdy) {\n          const result = grid.get(current.gridX + dx, current.gridY + dy);\n\n          if (!result) { continue; }\n\n          const { obj: neighbor, grouped } = result;\n\n          if (grouped) { continue; }\n          if (group.includes(neighbor)) { continue; }\n          if (customObject.names.includes(neighbor.name)) {\n            group.push(neighbor);\n            groupEdge.push(neighbor);\n          }\n        }\n      }\n\n      // BFS complete; `group` contains entire group.\n\n      for (const obj of group) {\n        grid.get(obj.gridX, obj.gridY)!.grouped = true;\n      }\n\n      // Find (x, y) of group\n\n      let minTileX = Number.POSITIVE_INFINITY;\n      let minTileY = Number.POSITIVE_INFINITY;\n\n      for (const obj of group) {\n        minTileX = Math.min(minTileX, obj.tile.x);\n        minTileY = Math.min(minTileY, obj.tile.y);\n      }\n\n      const groupEntity = customObject.getGroupInstanceType({\n        layerName: layer.name,\n        x        : minTileX,\n        y        : minTileY,\n      });\n\n      groupEntity.x = minTileX;\n      groupEntity.y = minTileY;\n\n      for (const obj of group) {\n        const spriteTex = TextureCache.GetTextureForTile({ assets: this._assets, tile: obj.tile });\n        const objEntity = customObject.getInstanceType(spriteTex);\n\n        groupEntity.addChild(objEntity);\n\n        objEntity.x = obj.tile.x - groupEntity.x;\n        objEntity.y = obj.tile.y - groupEntity.y;\n      }\n\n      results.push({\n        entity   : groupEntity,\n        layerName: layer.name,\n      });\n    }\n\n    return results;\n  }\n\n  getAllObjects(): ObjectInfo[] {\n    return this._allObjects;\n  }\n}","import { Sprite, Renderer, RenderTexture } from 'pixi.js'\nimport { Rect } from '../geometry/rect'\nimport { TiledJSON } from './tilemap_types';\nimport { TextureCache } from '../texture_cache';\nimport { Entity } from '../entity';\nimport { TiledTilemapObjects, TilemapCustomObjects, ObjectInfo } from './tilemap_objects'\nimport { TilemapData, TilemapRegion } from './tilemap_data';\n// import { Assets } from '../../game/assets';\nimport { TypesafeLoader } from '../typesafe_loader';\n\nexport type MapLayer = {\n  layerName: string;\n  entity: Entity;\n  objectLayer: boolean;\n};\n\n// TODO: Handle the weird new file format where tilesets link to ANOTHER json file\n\nexport class TiledTilemap {\n  private _tileWidth: number;\n  private _tileHeight: number;\n  private _renderer: Renderer;\n  private _objects: TiledTilemapObjects;\n  private _assets: TypesafeLoader<any>;\n\n  _data: TilemapData;\n\n  constructor({ json: data, renderer, pathToTilemap, customObjects, assets }: {\n    // this is required to calculate the relative paths of the tileset images.\n    json: TiledJSON;\n    renderer: Renderer;\n    pathToTilemap: string;\n    customObjects: TilemapCustomObjects[];\n    assets: TypesafeLoader<any>;\n  }) {\n    this._data = new TilemapData({ data, pathToTilemap });\n    this._renderer = renderer;\n    this._tileWidth = this._data.getTileWidth();\n    this._tileHeight = this._data.getTileHeight();\n    this._assets = assets;\n\n    this._objects = new TiledTilemapObjects({\n      layers: this._data.getAllObjectLayers(),\n      customObjects: customObjects,\n      map: this,\n      assets: null as any,\n    });\n  }\n\n  /**\n   * Load all the regions on a specified layer.\n   */\n  loadRegionLayer(layerName: string): TilemapRegion[] {\n    const layer = this._data.getLayer(layerName);\n\n    if (layer.type === \"rects\") {\n      return layer.rects;\n    }\n\n    throw new Error(\"Not a rect layer\");\n  }\n\n  private cache: { [key: string]: MapLayer[] } = {};\n\n  public loadLayersInRectCached(region: Rect): MapLayer[] {\n    // for (const k of Object.keys(this.cache)) {\n    //   const obj = this.cache[k]\n\n    //   for (const l of obj) {\n    //     if (l.entity.texture) {\n    //       l.entity.texture.destroy();\n    //     }\n\n    //     l.entity.parent?.removeChild(l.entity);\n    //   }\n    // }\n\n    // this.cache = {};\n\n    const hash = region.toString();\n\n    if (!this.cache[hash]) {\n      this.cache[hash] = this.loadLayersInRect(region);\n    }\n\n    return this.cache[hash];\n  }\n\n  private loadLayersInRect(region: Rect): MapLayer[] {\n    let tileLayers: MapLayer[] = [];\n\n    // Load tile layers\n\n    for (const layerName of this._data.getLayerNames()) {\n      const layer = this._data.getLayer(layerName);\n      if (layer.type !== \"tiles\") { continue; }\n\n      const renderTexture = RenderTexture.create({\n        width: Math.ceil(region.width),\n        height: Math.ceil(region.height),\n      });\n\n      const tileWidth = this._tileWidth;\n      const tileHeight = this._tileHeight;\n\n      const iStart = region.x / tileWidth;\n      const jStart = region.y / tileHeight;\n\n      if (iStart !== Math.floor(iStart) || jStart !== Math.floor(jStart)) {\n        throw new Error(\"x and y of passed in region aren't divisible by tileWidth/height\")\n      }\n\n      for (let i = region.x / tileWidth; i < region.right / tileWidth; i++) {\n        for (let j = region.y / tileHeight; j < region.bottom / tileHeight; j++) {\n          const tile = layer.grid.get(i, j);\n\n          if (!tile) { continue; }\n\n          const tex = TextureCache.GetTextureForTile({ assets: this._assets, tile });\n          const sprite = new Sprite(tex);\n\n          // We have to offset here because we'd be drawing outside of the\n          // bounds of the RenderTexture otherwise.\n\n          sprite.x = (tile.x - region.x - layer.offset.x);\n          sprite.y = (tile.y - region.y - layer.offset.y);\n\n          this._renderer.render(sprite, renderTexture, false);\n        }\n      }\n\n      const layerEntity = new Entity({\n        texture: renderTexture,\n        name: layerName,\n      });\n\n      layerEntity.x = region.x;\n      layerEntity.y = region.y;\n      layerEntity.width = region.width;\n      layerEntity.height = region.height;\n\n      tileLayers.push({\n        entity: layerEntity,\n        layerName,\n        objectLayer: false,\n      });\n    }\n\n    // Load object layers\n    // TODO: only load objects in this region - not the entire layer!!!\n\n    const objectLayers = this._objects.loadObjectLayers();\n\n    for (const objectLayer of objectLayers) {\n      objectLayer.entity.zIndex = 5; // TODO\n    }\n\n    for (const tileLayer of tileLayers) {\n      tileLayer.entity.zIndex = 0;\n    }\n\n    tileLayers = [...tileLayers, ...objectLayers];\n\n    return tileLayers;\n  }\n\n  turnOffAllObjects() {\n    this._objects.turnOffAllObjects();\n  }\n\n  getAllObjects(): ObjectInfo[] {\n    return this._objects.getAllObjects();\n  }\n\n  public static ParseTiledProperties(properties: { name: string; type: string; value: string }[] | undefined): { [key: string]: string } {\n    const result: { [key: string]: string } = {};\n\n    if (properties === undefined) {\n      return {};\n    }\n\n    for (const obj of properties) {\n      result[obj.name] = obj.value;\n    }\n\n    return result;\n  }\n}\n","import { TiledJSON, Tileset, Tile, TiledLayerTypes, TiledTileLayerJSON, TiledObjectLayerJSON, SpritesheetTile } from \"./tilemap_types\";\nimport { Grid } from \"../data_structures/grid\";\nimport { Rect } from \"../geometry/rect\";\nimport { RectGroup } from \"../geometry/rect_group\";\nimport { Vector2 } from \"../geometry/vector2\";\nimport { TiledTilemap } from \"./tilemap\";\nimport { Util } from \"../util\";\n\nexport type TilemapRegion = {\n  rect      : Rect;\n  properties: { [key: string]: string };\n}\n\nexport type TilemapLayer = \n  | {\n    type: \"tiles\";\n    grid: Grid<Tile>;\n    offset: Vector2;\n  } | {\n    type : \"rects\";\n    rects: TilemapRegion[];\n    offset: Vector2;\n  }\n\nexport class TilemapData {\n  private _data      : TiledJSON;\n  private _tileWidth : number;\n  private _tileHeight: number;\n  private _layers    : { [tilesetName: string]: TilemapLayer };\n  private _tilesets  : Tileset[];\n\n  // (should be private, but cant be for organization reasons)\n  _gidHasCollision: { [id: number]: boolean } = {};\n\n  constructor(props: { \n    data         : TiledJSON;\n    pathToTilemap: string;\n  }) {\n    const { data, pathToTilemap } = props;\n\n    this._data = data;\n    this._tileWidth       = this._data.tilewidth;\n    this._tileHeight      = this._data.tileheight;\n    this._gidHasCollision = this.buildCollisionInfoForTiles()\n    this._tilesets        = this.loadTilesets(pathToTilemap, this._data);\n    this._layers          = this.loadTileLayers();\n  }\n\n  isGidCollider(gid: number): boolean {\n    return this._gidHasCollision[gid] || false;\n  }\n\n  getTileWidth(): number {\n    return this._tileWidth;\n  }\n\n  getTileHeight(): number {\n    return this._tileHeight;\n  }\n\n  getTilesets(): Tileset[] {\n    return this._tilesets;\n  }\n\n  private loadTilesets(pathToTilemap: string, json: TiledJSON): Tileset[] {\n    const tilesets: Tileset[] = [];\n\n    for (const { image: imageUrlRelativeToTilemap, name, firstgid, imageheight, imagewidth, tileheight, tilewidth, tiles } of json.tilesets) {\n      const tileCountInTileset = (imageheight * imagewidth) / (tileheight * tilewidth);\n      const imageUrlRelativeToGame = \n        new URL(pathToTilemap + \"/\" + imageUrlRelativeToTilemap, \"http://a\").href.slice(\"http://a\".length + 1); // slice off the initial / too\n\n      tilesets.push({\n        name,\n        imageUrlRelativeToTilemap,\n        imageUrlRelativeToGame,\n        imagewidth,\n        imageheight,\n        tilewidth,\n        tileheight,\n        tiles,\n\n        gidStart: firstgid,\n        gidEnd  : firstgid + tileCountInTileset,\n      });\n    }\n\n    return tilesets;\n  }\n\n  private buildCollisionInfoForTiles(): { [key: number]: boolean } {\n    // Build a dumb (for now) object of collision ids by just checking if the\n    // tile literally has any collision object at all and takes that to mean the\n    // entire thing is covered.\n\n    // We could improve this if we want!\n\n    const gidHasCollision: { [id: number]: boolean } = {};\n\n    for (const tileset of this._data.tilesets) {\n      if (tileset.tiles) {\n        for (const tileAndCollisionObjects of tileset.tiles) {\n          if (!tileAndCollisionObjects.objectgroup) {\n            continue;\n          }\n\n          if (tileAndCollisionObjects.objectgroup.objects.length > 0) {\n            gidHasCollision[\n              tileAndCollisionObjects.id + tileset.firstgid\n            ] = true;\n          }\n        }\n      }\n    }\n\n    return gidHasCollision;\n  }\n\n  getLayerNames(): string[] {\n    return Object.keys(this._layers);\n  }\n\n  private getAllLayers(): (TiledTileLayerJSON | TiledObjectLayerJSON)[] {\n    return this._getAllLayersHelper(this._data.layers);\n  }\n\n  getLayer(layerName: string) {\n    return this._layers[layerName];\n  }\n\n  /**\n   * Returns all layers as a flat array - most notably flattens\n   * layer groups, which are nested.\n   */\n  private _getAllLayersHelper(root: TiledLayerTypes[]): (TiledTileLayerJSON | TiledObjectLayerJSON)[] {\n    let result: (TiledTileLayerJSON | TiledObjectLayerJSON)[] = [];\n\n    for (const layer of root) {\n      if (layer.type === \"group\") {\n        result = [...result, ...this._getAllLayersHelper(layer.layers)];\n      } else {\n        result.push(layer);\n      }\n    }\n\n    return result;\n  }\n\n  getAllObjectLayers(): TiledObjectLayerJSON[] {\n    const allLayers = this.getAllLayers();\n    const objectLayers: TiledObjectLayerJSON[] = [];\n\n    for (const layer of allLayers) {\n      if (layer.type === \"objectgroup\") {\n        objectLayers.push(layer);\n      }\n    }\n\n    return objectLayers;\n  }\n\n  private loadTileLayers(): { [layerName: string]: TilemapLayer } {\n    const result: { [layerName: string]: TilemapLayer } = {};\n    const layers = this.getAllLayers();\n\n    for (const layer of layers) {\n      if (layer.type === \"tilelayer\") {\n        const grid = this.loadTiles(layer);\n\n        result[layer.name] = { \n          type: \"tiles\",\n          grid,\n          offset: new Vector2(layer.offsetx, layer.offsety),\n        };\n      } else if (layer.type === \"objectgroup\") {\n        result[layer.name] = this.loadRectLayer(layer);\n      }\n    }\n\n    return result;\n  }\n\n  loadRectLayer(layer: TiledObjectLayerJSON): TilemapLayer {\n    const objects = layer.objects;\n    const rects: TilemapRegion[] = [];\n\n    for (const obj of objects) {\n      if (!obj.gid) {\n        rects.push({\n          rect: new Rect({\n            x: obj.x,\n            y: obj.y,\n            width: obj.width,\n            height: obj.height,\n          }),\n          properties: TiledTilemap.ParseTiledProperties(obj.properties) || {},\n        });\n      }\n    }\n\n    return {\n      type : \"rects\",\n      rects: rects,\n      offset: Vector2.Zero,\n    };\n  }\n\n  private loadTiles(layer: TiledTileLayerJSON): Grid<Tile> {\n    const result = new Grid<Tile>();\n    const { chunks } = layer;\n\n    // TODO: If the world gets very large, loading in all chunks like this might\n    // not be the best idea - lazy loading could be better.\n\n    for (const chunk of chunks) {\n      for (let i = 0; i < chunk.data.length; i++) {\n        const gid = chunk.data[i];\n\n        if (gid === 0) { continue; } // empty\n        if (gid > 200000) { throw new Error(\"???\"); } // tiled bug? (TODO: does this actually happen?)\n\n        const relTileX = (i % chunk.width);\n        const relTileY = Math.floor(i / chunk.width);\n\n        if (isNaN(layer.offsetx)) layer.offsetx = 0; // TODO this is indicative of a tmx tileset embed, which we dont support yet\n        if (isNaN(layer.offsety)) layer.offsety = 0;\n\n        const offsetX = layer.offsetx / this._tileWidth;\n        const offsetY = layer.offsety / this._tileHeight;\n\n        if (offsetX !== Math.floor(offsetX) || offsetY !== Math.floor(offsetY)) {\n          throw new Error(\"AAAAAAAAAAAAAAAAAAAAAAAAA\");\n        }\n\n        const absTileX = relTileX + chunk.x + offsetX;\n        const absTileY = relTileY + chunk.y + offsetY;\n\n        const { spritesheet, tileProperties } = this.gidInfo(gid);\n\n        // TODO: Merge instance properties and tileset properties...\n\n        result.set(absTileX, absTileY, {\n          x             : absTileX * this._tileWidth  + layer.offsetx,\n          y             : absTileY * this._tileHeight + layer.offsety,\n          tile          : spritesheet,\n          isCollider    : this.isGidCollider(gid),\n          tileProperties: tileProperties,\n          gid           : gid,\n        });\n      }\n    }\n\n    return result;\n  }\n\n  gidInfo(gid: number): {\n    spritesheet   : SpritesheetTile;\n    tileProperties: { [key: string]: unknown };\n  } {\n    for (const { gidStart, gidEnd, imageUrlRelativeToGame, imagewidth, tilewidth, tileheight, tiles } of this._tilesets) {\n      if (gid >= gidStart && gid < gidEnd) {\n        const normalizedGid = gid - gidStart;\n        const tilesWide     = imagewidth / tilewidth;\n\n        const x = (normalizedGid % tilesWide);\n        const y = Math.floor(normalizedGid / tilesWide);\n\n        const spritesheet = {\n          imageUrlRelativeToGame,\n          spritesheetx: x,\n          spritesheety: y,\n          tilewidth,\n          tileheight,\n          tileProperties: tiles,\n        };\n\n        let tileProperties: { [key: string]: unknown } = {};\n\n        if (tiles) {\n          const matchedTileInfo = tiles.find(tile => gid === gidStart + tile.id);\n\n          if (matchedTileInfo && matchedTileInfo.properties) {\n            for (const { name, value } of matchedTileInfo.properties) {\n              tileProperties[name] = value;\n            }\n          }\n        }\n\n        return {\n          spritesheet,\n          tileProperties,\n        };\n      }\n    }\n\n    throw new Error(\"gid out of range. ask gabby what to do?!?\");\n  }\n\n  public getTilesAtAbsolutePosition(x: number, y: number): Tile[] {\n    return this.getLayerNames()\n      .map(layerName => this.getTileAtAbsolutePositionForLayer(x, y, layerName))\n      .filter(x => x) as Tile[];\n  }\n\n  public getTileAtAbsolutePositionForLayer(x: number, y: number, layerName: string): Tile | null {\n    const tileWidth  = this._tileWidth;\n    const tileHeight = this._tileHeight;\n\n    const layer = this._layers[layerName];\n\n    if (layer.type === \"tiles\") {\n      return layer.grid.get(\n        Math.floor(x / tileWidth),\n        Math.floor(y / tileHeight)\n      );\n    }\n\n    return null;\n  }\n\n  getCollidersInRegion(region: Rect): Rect[] {\n    return Util.FlattenByOne(this.getLayerNames().map(layerName => this.getCollidersInRegionForLayer(region, layerName).getRects()));\n  }\n\n  getCollidersInRegionForLayer(region: Rect, layerName: string): RectGroup {\n    const lowX = Math.floor(region.x / this._tileWidth);\n    const lowY = Math.floor(region.y / this._tileHeight);\n\n    const highX = Math.ceil(region.right  / this._tileWidth);\n    const highY = Math.ceil(region.bottom / this._tileHeight);\n\n    let colliders: Rect[] = [];\n\n    for (let x = lowX; x <= highX; x++) {\n      for (let y = lowY; y <= highY; y++) {\n        const tile = this.getTileAtAbsolutePositionForLayer(\n          x * this._tileWidth, \n          y * this._tileHeight,\n          layerName\n        );\n        \n        if (tile && tile.isCollider) {\n          colliders.push(new Rect({\n            x: x * this._tileWidth,\n            y: y * this._tileHeight,\n            width: this._tileWidth,\n            height: this._tileHeight,\n          }));\n        }\n      }\n    }\n\n    return new RectGroup(colliders);\n  }\n}","import { Loader, Texture } from 'pixi.js'\n// import { AssetsToLoad } from '../game/assets';\nimport { TilemapData } from './tilemap/tilemap_data';\nimport { TiledJSON } from './tilemap/tilemap_types';\n\nconst AssetsToLoad = {} as {never: any};\n\ntype AnimationResource = {\n  type : \"Animation\";\n  paths: string[];\n};\n\ntype NormalResource = {\n  type: \"Image\" | \"Audio\" | \"TileMap\" | \"TileWorld\" | \"Spritesheet\";\n  path: string;\n};\n\ntype IndividualResourceObj = AnimationResource | NormalResource;\n\ntype ResourceReturn<T extends string> =\n  T extends \"Image\"       ? Texture :\n  T extends \"Audio\"       ? HTMLAudioElement :\n  T extends \"TileMap\"     ? TiledJSON :\n  T extends \"TileWorld\"   ? object :\n  T extends \"Spritesheet\" ? unknown :\n  T extends \"Animation\"   ? Texture[] :\n  never\n\nexport type AllResourcesType = { [key: string]: IndividualResourceObj; };\n\n/** \n * TypeSafe loader is intended to be a wrapper around PIXI.Loader which gives a\n * type-checked getResource() check.\n */\nexport class TypesafeLoader<Resources extends AllResourcesType> {\n  loader: Loader;\n  loadComplete: boolean;\n  loadCompleteCallbacks: (() => void)[];\n\n  constructor(resourceNames: Resources) {\n    this.loadCompleteCallbacks = [];\n    this.loader = new Loader();\n    this.loadComplete = false;\n\n    this.startStageOneLoading(resourceNames);\n  }\n\n  // Stage 1: Load all assets in resources.ts\n  private startStageOneLoading = (resources: Resources) => {\n    for (const key of Object.keys(resources)) {\n      const resource = resources[key];\n\n      if (resource.type === \"Animation\") {\n        for (const path of resource.paths) {\n          this.loader.add(path);\n        }\n      } else {\n        this.loader.add(resource.path);\n      }\n    }\n\n    this.loader.load(this.startStageTwoLoading);\n  }\n\n  // Stage 2: Load all assets required by tilemaps - mostly tilesets, I hope!.\n  private startStageTwoLoading = () => {\n    let allTilemapDependencyPaths: string[] = [];\n\n    for (const resource of Object.keys(AssetsToLoad)) {\n      const castedResource = resource as keyof typeof AssetsToLoad;\n      const pathToTilemap = resource.substring(0, resource.lastIndexOf(\"/\"))\n\n      if (AssetsToLoad[castedResource].type === \"TileMap\") {\n        const tilemapData = new TilemapData({ \n          data: this.getResource(castedResource) as TiledJSON, \n          pathToTilemap, \n        });\n\n        allTilemapDependencyPaths = allTilemapDependencyPaths.concat(\n          tilemapData.getTilesets().map(tileset => tileset.imageUrlRelativeToGame)\n        );\n      }\n    }\n\n    for (const tilemapDependencyPath of allTilemapDependencyPaths) {\n      if (!this.loader.resources[tilemapDependencyPath]) {\n        this.loader.add(tilemapDependencyPath);\n      }\n    }\n\n    this.loader.load(this.finishLoading);\n  }\n\n  getResource<T extends keyof typeof AssetsToLoad>(resourceName: T): ResourceReturn<(typeof AssetsToLoad)[T]['type']> {\n    const resource = AssetsToLoad[resourceName] as IndividualResourceObj;\n\n    if (resource.type === \"Audio\") {\n      return new Audio(resource.path) as any;\n    } else if (resource.type === \"Animation\") {\n      return resource.paths.map(path => this.loader.resources[path].texture) as any;\n    } else if (resource.type === \"Image\") {\n      return this.loader.resources[resource.path].texture as any;\n    } else if (resource.type === \"Spritesheet\") {\n      throw new Error(\"Unhandled\");\n    } else if (resource.type === \"TileMap\") {\n      return this.loader.resources[resource.path].data;\n    } else if (resource.type === \"TileWorld\") {\n      return this.loader.resources[resource.path].data;\n    }\n\n    throw new Error(\"AAAAAA\");\n  }\n\n  private finishLoading = () => {\n    this.loadComplete = true;\n\n    for (const callback of this.loadCompleteCallbacks) {\n      callback();\n    }\n\n    this.loadCompleteCallbacks = [];\n  }\n\n  onLoadComplete(callback: () => void) {\n    if (this.loadComplete) {\n      setTimeout(() => {\n        callback();\n      }, 0);\n    } else {\n      this.loadCompleteCallbacks.push(callback);\n    }\n  }\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./Area.css\";\nimport { Application } from \"../pixi/Application\";\nimport { BaseGame } from \"../johnfn_library/base_game\";\nimport { TypesafeLoader } from \"../johnfn_library/typesafe_loader\";\nimport { BaseGameState } from \"../johnfn_library/base_state\";\n\n/**\n * Initialize the pixi app\n */\n\n    const game = new BaseGame({\n      scale: 1,\n      canvasWidth: 800,\n      canvasHeight: 800,\n      tileHeight: 16,\n      tileWidth: 16,\n      debugFlags: {},\n      state: {\n        tick: 0,\n      },\n      assets: new TypesafeLoader({}),\n    });\nconst application = new Application(undefined, game.app);\n\n\nexport function Area(props: { whatever?: any }) {\n  const container = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    application.register(container.current!);\n\n    application.drawStart();\n\n    // container.current!.appendChild(game.app.view)\n\n  }, []);\n\n\n  return (\n    <>\n      <div ref={container} />\n      <button onClick={() => application.drawCircle()}>draw circle</button>\n      <button onClick={() => application.drawStart()}>rerender all</button>\n    </>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Area } from \"./components/Area\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      Hi stuff is here\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n  </header> */}\n      <Area />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}